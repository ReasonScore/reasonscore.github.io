{"version":3,"sources":["EditorElement.tsx","ClaimElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorElement","props","claim","Claim","claimEdge","handleSubmit","changes","state","pasteClaim","push","Change","ClaimEdge","parentId","ID","undefined","pro","id","priority","content","childId","calculationInitator","notify","then","handleEditClose","handleContent","e","setState","currentTarget","value","handlePriority","handlePasteClaim","handlePro","proMain","proMainContext","checked","handleProMain","handleAffects","affects","handleDelete","a","rsData","repository","edges","claimEdgesByParentId","toString","index","indexOf","splice","JSON","getItem","stringify","parentClaim","parse","handleCancel","new","claimId","awaitClaim","Promise","all","values","newState","className","htmlFor","this","onChange","rows","href","type","Affects","Confidence","Relevance","role","aria-label","onClick","React","Component","commonmark","require","ClaimElement","handleDataDispatch","change","newItem","Type","score","sourceClaimId","getClaimEdgesByParentId","ChildClaimEedges","childClaimEedges","handleExpanderClick","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","Score","awaitScore","getScoreBySourceClaimId","awaitChildClaimEedges","messenger","subscribe","unsubscribe","scoreText","Math","round","confidence","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","childClaimEedgesSorted","length","sort","b","proMainText","xmlns","height","viewBox","width","d","fill","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","__html","render","createMarkup","map","child","key","Menu","handleSave","window","db","doc","set","console","log","catch","error","App","Boolean","location","hostname","match","repo","Repository","Messenger","CalculationInitator","get","exists","data","claims","document","getElementsByTagName","possibleClaimId","getAttribute","ReactDOM","RsData","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SA6MeA,E,YAjLX,WAAYC,GAAiB,IAAD,EAExB,GAFwB,qBACxB,4CAAMA,KAJVC,MAAQ,IAAIC,QAGgB,EAF5BC,UAAY,EAAKH,MAAMG,UAEK,EAyC5BC,aAAe,WACX,IAAMC,EAAoB,GACtB,EAAKC,MAAMC,YAAc,EAAKJ,UAC9BE,EAAQG,KAAK,IAAIC,SACb,IAAIC,YAAU,EAAKP,UAAUQ,SAAUC,aAAG,EAAKN,MAAMC,iBAAaM,EAAW,EAAKP,MAAMQ,IAAK,EAAKX,UAAUY,GAAI,EAAKT,MAAMU,aAG/HX,EAAQG,KAAK,IAAIC,SAAO,IAAIP,QAAM,EAAKI,MAAMW,QAAS,EAAKhB,MAAMc,MAC7D,EAAKZ,WACLE,EAAQG,KAAK,IAAIC,SACb,IAAIC,YAAU,EAAKP,UAAUQ,SAAU,EAAKR,UAAUe,aAASL,EAAW,EAAKP,MAAMQ,IAAK,EAAKX,UAAUY,GAAI,EAAKT,MAAMU,aAKpI,EAAKhB,MAAMmB,oBAAoBC,OAAOf,GAASgB,MAAK,WAChD,EAAKrB,MAAMsB,sBAzDS,EA6D5BC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAER,QAASO,EAAEE,cAAcC,SA9DjB,EAiE5BC,eAAiB,SAACJ,GACd,EAAKC,SAAS,CAAET,SAAUQ,EAAEE,cAAcC,SAlElB,EAqE5BE,iBAAmB,SAACL,GAChB,EAAKC,SAAS,CAAElB,WAAYiB,EAAEE,cAAcC,SAtEpB,EAyE5BG,UAAY,SAACN,GACT,IAAIO,EAAU,EAAK/B,MAAMgC,eAAiBR,EAAEE,cAAcO,SAAWT,EAAEE,cAAcO,QACrF,EAAKR,SAAS,CACVX,IAAKU,EAAEE,cAAcO,QACrBF,QAASA,KA7EW,EAiF5BG,cAAgB,SAACV,GACb,IAAIV,EAAM,EAAKd,MAAMgC,eAAiBR,EAAEE,cAAcO,SAAWT,EAAEE,cAAcO,QACjF,EAAKR,SAAS,CACVX,IAAKA,EACLiB,QAASP,EAAEE,cAAcO,WArFL,EAyF5BE,cAAgB,SAACX,GACb,EAAKC,SAAS,CAAEW,QAASZ,EAAEE,cAAcC,SA1FjB,EA6F5BU,aA7F4B,sBA6Fb,kCAAAC,EAAA,yDAELC,EAAS,EAAKvC,MAAMwC,WAAWD,QACjC,EAAKpC,UAHE,wBAIDsC,EAAQF,EAAOG,qBAAqB,EAAKvC,UAAUQ,SAASgC,aAC5DC,EAAQH,EAAMI,QAAQ,EAAK1C,UAAUY,GAAG4B,WAAY,KAC7C,GACTF,EAAMK,OAAOF,EAAO,GAPjB,KASaG,KATb,KAUHA,KAVG,SAWO,EAAK/C,MAAMwC,WAAWQ,QACxB,EAAK7C,UAAUQ,UAZpB,6BAUEsC,UAVF,gBASDC,EATC,KASkBC,MATlB,gBAgBP,EAAKnD,MAAMmB,oBAAoBC,OAAO,CAAC,IAAIX,SAAOyC,KAAe7B,MAAK,WAClE,EAAKrB,MAAMsB,qBAjBR,4CA7Fa,EAmH5B8B,aAAe,WACX,EAAKpD,MAAMsB,mBAlHP,EAAKtB,MAAMqD,IACX,EAAKpD,MAAQ,IAAIC,QACjB,EAAKC,UAAY,IAAIO,YAAU,EAAKV,MAAMsD,QAAS,EAAKrD,MAAMc,QAC3D,CACH,IAAMwC,EAAa,EAAKvD,MAAMwC,WAAWQ,QAAQ,EAAKhD,MAAMsD,SAC5DE,QAAQC,IAAI,CAACF,IAAalC,MAAK,SAACqC,GACxBA,EAAO,KACP,EAAKzD,MAAQyD,EAAO,IAGxB,IAAM5C,GAAM,EAAKX,WAAY,EAAKA,UAAUW,IAExC6C,EAAoB,CACpB1C,QAAS,EAAKhB,MAAMgB,QACpBH,IAAKA,EACLiB,QAAS,EAAK/B,MAAMgC,eAAiBlB,GAAOA,EAC5CsB,QAAS,EAAKjC,UAAY,EAAKA,UAAUiC,QAAQO,gBAAa9B,EAC9DG,SAAU,EAAKb,UAAY,EAAKA,UAAUa,SAAW,GACrDT,WAAY,SAGUM,IAAtB8C,EAAS3C,WAA0B2C,EAAS3C,SAAW,IAE3D,EAAKS,SAASkC,MAzBE,OA8BxB,EAAKrD,MAAQ,CACTW,QAAS,GACTH,KAAK,EACLiB,QAAS,EAAK/B,MAAMgC,eACpBI,aAASvB,EACTG,SAAU,GACVT,WAAY,IApCQ,E,sEAwHxB,OACI,8BACI,yBAAKqD,UAAU,cACX,2BAAOC,QAAQ,iBAAf,WACA,8BAAUD,UAAU,eAAe7C,GAAG,gBAAgBY,MAAOmC,KAAKxD,MAAMW,QAAS8C,SAAUD,KAAKvC,cAAeyC,KAAM,IACrH,2BAAOJ,UAAU,wBAAjB,qBAA0D,uBAAGK,KAAK,2CAAR,cAA1D,oEAGHH,KAAK3D,WACF,oCACK2D,KAAK9D,MAAMgC,eAAiB,OAAS,QACtC,yBAAK4B,UAAU,yBACX,2BAAOM,KAAK,WAAWnD,GAAG,gBAAgBkB,QAAS6B,KAAKxD,MAAMQ,IAAKiD,SAAUD,KAAKhC,YAClF,+CAEJ,yBAAK8B,UAAU,yBACX,2BAAOM,KAAK,WAAWnD,GAAG,UAAUkB,QAAS6B,KAAKxD,MAAMyB,QAASgC,SAAUD,KAAK5B,gBAChF,6CAEJ,yBAAK0B,UAAU,cACX,0CAEA,4BAAQ7C,GAAG,oBAAoBY,MAAOmC,KAAKxD,MAAM8B,QAAS2B,SAAUD,KAAK3B,eACjE,4BAAQR,MAAOwC,UAAQC,YAAvB,cACA,4BAAQzC,MAAOwC,UAAQE,WAAvB,gBAKZ,yBAAKT,UAAU,cACX,2BAAOC,QAAQ,sBAAf,YACA,2BAAOK,KAAK,OAAON,UAAU,eAAe7C,GAAG,qBAAqBY,MAAOmC,KAAKxD,MAAMU,SAAU+C,SAAUD,KAAKlC,kBAEnH,yBAAKgC,UAAU,cACX,2BAAOC,QAAQ,cAAf,eACA,2BAAOK,KAAK,OAAON,UAAU,eAAe7C,GAAG,aAAaY,MAAOmC,KAAKxD,MAAMC,WAAYwD,SAAUD,KAAKjC,oBAE7G,yBAAK+B,UAAU,iBAAiBU,KAAK,QAAQC,aAAW,eACpD,4BAAQL,KAAK,SAASvC,MAAM,SAASiC,UAAU,oBAAoBY,QAASV,KAAKzB,cAAjF,YAIZ,6BACA,yBAAKuB,UAAU,cAAcU,KAAK,UAAUC,aAAW,8BACnD,yBAAKX,UAAU,iBAAiBU,KAAK,QAAQC,aAAW,eACpD,4BAAQL,KAAK,SAASvC,MAAM,SAASiC,UAAU,kBAAkBY,QAASV,KAAK1D,cAA/E,WAEJ,yBAAKwD,UAAU,iBAAiBU,KAAK,QAAQC,aAAW,gBACpD,4BAAQL,KAAK,SAASvC,MAAM,SAASiC,UAAU,oBAAoBY,QAASV,KAAKV,cAAjF,YAGR,qCAAWU,KAAK7D,MAAMc,S,GAhLV0D,IAAMC,WCnB5BC,EAAkBC,EAAQ,IA0NjBC,E,YAnMX,WAAY7E,GAAiB,IAAD,uBACxB,4CAAMA,KA+BV8E,mBAhC4B,uCAgCP,WAAOzE,GAAP,qCAAAiC,EAAA,oFACIjC,EADJ,qEACN0E,EADM,QAELC,EAAYD,EAAZC,QACJrB,EAAgB,GAChBqB,EAAQjE,KAAO,EAAKf,MAAMsD,SAAW0B,EAAQd,OAASe,OAAKhF,QACrDA,EAAQ+E,EACdrB,EAAS1D,MAAQA,GAEjB+E,EAAQd,OAASe,OAAKC,QAChBA,EAAQF,GACJG,gBAAkB,EAAKnF,MAAMsD,UACnCK,EAASuB,MAAQA,GAGrB,EAAK5E,MAAMH,WAAa6E,EAAQjE,KAAO,EAAKT,MAAMH,UAAUY,IAAMiE,EAAQd,OAASe,OAAK9E,YAClFA,EAAY6E,EAClBrB,EAASxD,UAAYA,GAGrB6E,EAAQd,OAASe,OAAK9E,UAnBb,oBAoBS6E,EACJrE,WAAa,EAAKX,MAAMsD,QArB7B,kCAsB0B,EAAKtD,MAAMwC,WAAW4C,wBAAwB,EAAKpF,MAAMsD,SAtBnF,QAsBC+B,EAtBD,OAuBL1B,EAAS2B,iBAAmBD,EAvBvB,QA0Bb,EAAK5D,SAASkC,GA1BD,iVAhCO,wDA8D5B4B,oBAAsB,WAClB,EAAK9D,SAAS,CACV+D,iBAAkB,EAAKlF,MAAMkF,mBAhET,EAoE5BC,sBAAwB,WACpB,EAAKhE,SAAS,CACViE,eAAgB,EAAKpF,MAAMoF,cAC3BC,SAAS,KAvEW,EA2E5BC,qBAAuB,WACnB,EAAKnE,SAAS,CACVkE,SAAS,EACTD,eAAgB,EAAKpF,MAAMoF,iBA9EP,EAkF5BpE,gBAAkB,WACd,EAAKG,SAAS,CACViE,eAAe,KAlFnB,EAAKpF,MAAQ,CACTkF,iBAAiB,EAAKxF,MAAMG,UAC5BuF,eAAe,EACfC,SAAS,EACTT,MAAO,IAAIW,QACX5F,MAAO,IAAIC,QACXoF,iBAAkB,GAClBnF,UAAW,EAAKH,MAAMG,WAG1B,IAAM2F,EAAa,EAAK9F,MAAMwC,WAAWuD,wBAAwB,EAAK/F,MAAMsD,SACtEC,EAAa,EAAKvD,MAAMwC,WAAWQ,QAAQ,EAAKhD,MAAMsD,SACtD0C,EAAwB,EAAKhG,MAAMwC,WAAW4C,wBAAwB,EAAKpF,MAAMsD,SAd/D,OAexBE,QAAQC,IAAI,CAACqC,EAAYvC,EAAYyC,IAAwB3E,MAAK,SAACqC,GAC/D,IAAIC,EAAgB,GACpBA,EAASuB,MAAQxB,EAAO,GACpBA,EAAO,KACPC,EAAS1D,MAAQyD,EAAO,IAE5BC,EAAS2B,iBAAmB5B,EAAO,GACnC,EAAKjC,SAASkC,MAGlB,EAAK3D,MAAMiG,UAAUC,UAAU,EAAKpB,oBAzBZ,E,oFA6BxBhB,KAAK9D,MAAMiG,UAAUE,YAAYrC,KAAKgB,sB,+BA4DtC,IAAM9E,EAAQ8D,KAAK9D,MACfkF,EAAQpB,KAAKxD,MAAM4E,MAClBA,IAASA,EAAQ,IAAIW,SAC1B,IAAM5F,EAAQ6D,KAAKxD,MAAML,MACnBE,EAAY2D,KAAKxD,MAAMH,UACvBmF,EAAmBxB,KAAKxD,MAAMgF,iBAChCvD,EAAU/B,EAAMgC,eAChBoE,EAAS,UAAMC,KAAKC,MAAyB,IAAnBpB,EAAMqB,YAAvB,KACTpG,IACKA,EAAUW,MACXiB,GAAWA,GAGXqE,EADAjG,EAAUiC,UAAY+B,UAAQE,UACrB,eAAQa,EAAMsB,UAAY,GAAGC,oBAAe5F,EAAW,CAAE6F,sBAAuB,EAAGC,sBAAuB,KAE1G,UAAMN,KAAKC,MAAMpB,EAAMqB,WAAarB,EAAMsB,UAAY,OAMvE,IAAII,EAAyBtB,EACzBA,EAAiBuB,OAAS,IAC1BD,EAAyBtB,EAAiBwB,MAAK,SAACxE,EAAGyE,GAC/C,YAAoBlG,IAAfyB,EAAEtB,UAAyC,KAAfsB,EAAEtB,eAAoCH,IAAfkG,EAAE/F,UAAyC,KAAf+F,EAAE/F,cAGlEH,IAAfyB,EAAEtB,UAAyC,KAAfsB,EAAEtB,SACxB,OAESH,IAAfkG,EAAE/F,UAAyC,KAAf+F,EAAE/F,UACvB,EAERsB,EAAEtB,SAAW+F,EAAE/F,SACR,EAEPsB,EAAEtB,SAAW+F,EAAE/F,UACP,EAEL,EAdI,MAoBnB,IAAMgG,EAAcjF,EAAU,MAAQ,MAUtC,OACI,yBAAK6B,UAAW,eACZ,yBAAKA,UAAW,SAAWoD,GACvB,yBAAKpD,UAAW,gBAAiBY,QAASV,KAAK2B,uBAAuB,yBAAKwB,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,MAAK,0BAAMC,EAAE,0JAA0J,0BAAMA,EAAE,kBAAkBC,KAAK,WAC1V,yBAAK1D,UAAW,aAAcY,QAASV,KAAK8B,sBAA5C,KACCN,EAAiBuB,OAAS,GACvB,yBAAKjD,UAAW,YAAcE,KAAKxD,MAAMkF,gBAAkB,YAAc,cAAehB,QAASV,KAAKyB,qBAAtG,UAIJ,yBAAK3B,UAAW,eACZ,0BAAMA,UAAS,SACVwC,GAEL,0BAAMmB,wBArBtB,WACI,IAAIC,EAAS,IAAI7C,EAAW8C,OAAO,IAC/BC,EAAS,IAAI/C,EAAWgD,aAAa,CAAEC,MAAM,IAC7CC,EAASL,EAAOrE,MAAMlD,EAAMgB,SAChC,MAAO,CAAE6G,OAAQJ,EAAOK,OAAOF,IAiBYG,OAItClE,KAAKxD,MAAMoF,eACR,kBAAC,EAAD,CACIpC,QAASrD,EAAMc,GACfyB,WAAYxC,EAAMwC,WAClBrB,oBAAqBnB,EAAMmB,oBAC3BhB,UAAW2D,KAAKxD,MAAMH,UACtB6B,eAAgB8B,KAAKxD,MAAMqF,QAAU5D,EAAU/B,EAAMgC,eACrDV,gBAAiBwC,KAAKxC,gBACtB2E,UAAWjG,EAAMiG,UACjB5C,IAAKS,KAAKxD,MAAMqF,UAGvB7B,KAAKxD,MAAMkF,iBACR,wBAAI5B,UAAU,YACT0B,EAAiBuB,OAAS,GAAKD,EAAuBqB,KAAI,SAACC,GAAD,OACvD,wBAAIC,IAAKD,EAAMhH,QAAQyB,YACnB,kBAACkC,EAAD,CACIvB,QAAS4E,EAAMhH,QACfsB,WAAYxC,EAAMwC,WAClBrB,oBAAqBnB,EAAMmB,oBAC3BhB,UAAW+H,EACXlG,eAAgBD,EAChBkE,UAAWjG,EAAMiG,sB,GA1L1BxB,IAAMC,WCgBlB0D,E,2MAjBXC,WAAa,WACTC,OAAOC,GAAGC,IAAI,UAAUC,IAAI1F,KAAKI,MAAMJ,KAAKE,UAAU,EAAKjD,MAAMwC,WAAWD,UAC3ElB,MAAK,WACFqH,QAAQC,IAAI,qCAEfC,OAAM,SAASC,GACZH,QAAQG,MAAM,2BAA4BA,O,wEAK9C,OACI,4BAAQ3E,KAAK,SAASvC,MAAM,OAAOiC,UAAU,oBAAoBY,QAASV,KAAKuE,YAA/E,Y,GAnBO5D,IAAMC,WCaVoE,EAlBV,SAAC,GAAD,IACHxF,EADG,EACHA,QACAd,EAFG,EAEHA,WACArB,EAHG,EAGHA,oBACA8E,EAJG,EAIHA,UAJG,OAMC,oCACA,kBAAC,EAAD,CAAMzD,WAAYA,IAChB,kBAAC,EAAD,CACEc,QAASA,EACTd,WAAYA,EACZrB,oBAAqBA,EACrBa,gBAAgB,EAChBiE,UAAaA,MCbH8C,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCHN,IAAMC,EAAO,IAAIC,aACXnD,EAAY,IAAIoD,YAChBlI,EAAsB,IAAImI,sBAAoBH,EAAMlD,EAAU7E,QAEpEkH,OAAOC,GAAGC,IAAI,UAAUe,MAAMlI,MAAK,SAACmH,GAClC,GAAIA,EAAIgB,OAAQ,CACdL,EAAK5G,OAASiG,EAAIiB,OAElB,IAAMC,EAASC,SAASC,qBAAqB,YAH/B,uBAId,YAAoBF,EAApB,+CAA4B,CAAC,IAAlBzJ,EAAiB,QACpB4J,EAAkB5J,EAAM6J,aAAa,WACvCxG,EAAU1C,aAAG,IACbiJ,IACFvG,EAAU1C,aAAGiJ,IAEfE,IAAShC,OAAO,kBAAC,EAAD,CACdzE,QAASA,EACTd,WAAY2G,EACZhI,oBAAqBA,EACrB8E,UAAWA,IACThG,IAfQ,uFAiBT,CAELkJ,EAAK5G,OAAS,IAAIyH,SAElB,IAAMN,EAASC,SAASC,qBAAqB,YAJxC,uBAKL,IALK,IAKL,EALK,iBAKM3J,EALN,QAMG4J,EAAkB5J,EAAM6J,aAAa,WACvCxG,EAAU1C,aAAG,IACbiJ,IACFvG,EAAU1C,aAAGiJ,IAIf1I,EAAoBC,OAAO,CACzB,IAAIX,SACF,IAAIP,QAAM,YAAaoD,MAExBjC,MAAK,SAACmH,GAEPuB,IAAShC,OAAO,kBAAC,EAAD,CACdzE,QAASA,EACTd,WAAY2G,EACZhI,oBAAqBA,EACrB8E,UAAWA,IACThG,OAnBR,EAAoByJ,EAApB,+CAA6B,IALxB,uFA4BNd,OAAM,SAAUC,GACjBH,QAAQC,IAAI,0BAA2BE,MDuEnC,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAM9I,MAAK,SAAA+I,GACjCA,EAAaC,kB","file":"static/js/main.464cd36d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Change, Messenger, RsData, ID } from \"@reasonscore/core\";\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n};\r\n\r\ntype MyState = {\r\n    content: string,\r\n    pro?: boolean,\r\n    proMain?: boolean,\r\n    affects?: string,\r\n    priority: string,\r\n    pasteClaim: string,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    claim = new Claim();\r\n    claimEdge = this.props.claimEdge\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        if (this.props.new) {\r\n            this.claim = new Claim();\r\n            this.claimEdge = new ClaimEdge(this.props.claimId, this.claim.id)\r\n        } else {\r\n            const awaitClaim = this.props.repository.getItem(this.props.claimId)\r\n            Promise.all([awaitClaim]).then((values) => {\r\n                if (values[0]) {\r\n                    this.claim = values[0] as Claim;\r\n                }\r\n\r\n                const pro = this.claimEdge ? this.claimEdge.pro : true;\r\n\r\n                let newState: MyState = {\r\n                    content: this.claim.content,\r\n                    pro: pro,\r\n                    proMain: this.props.proMainContext ? pro : !pro,\r\n                    affects: this.claimEdge ? this.claimEdge.affects.toString() : undefined,\r\n                    priority: this.claimEdge ? this.claimEdge.priority : \"\",\r\n                    pasteClaim: \"\",\r\n                }\r\n\r\n                if (newState.priority === undefined) { newState.priority = \"\" } //ToDo: Temp for items with blank priority. mutates state?\r\n\r\n                this.setState(newState);\r\n            });\r\n\r\n        }\r\n\r\n        this.state = {\r\n            content: \"\",\r\n            pro: true,\r\n            proMain: this.props.proMainContext,\r\n            affects: undefined,\r\n            priority: \"\",\r\n            pasteClaim: \"\",\r\n        };\r\n\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const changes: Change[] = [];\r\n        if (this.state.pasteClaim && this.claimEdge) {\r\n            changes.push(new Change(\r\n                new ClaimEdge(this.claimEdge.parentId, ID(this.state.pasteClaim), undefined, this.state.pro, this.claimEdge.id, this.state.priority)\r\n            ))\r\n        } else {\r\n            changes.push(new Change(new Claim(this.state.content, this.claim.id)))\r\n            if (this.claimEdge) {\r\n                changes.push(new Change(\r\n                    new ClaimEdge(this.claimEdge.parentId, this.claimEdge.childId, undefined, this.state.pro, this.claimEdge.id, this.state.priority)\r\n                ))\r\n            }\r\n        }\r\n\r\n        this.props.calculationInitator.notify(changes).then(() => {\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleContent = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n        this.setState({ content: e.currentTarget.value });\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ priority: e.currentTarget.value });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: e.currentTarget.checked,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: pro,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleAffects = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        this.setState({ affects: e.currentTarget.value });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        //To Do : move to repository\r\n        const rsData = this.props.repository.rsData as RsData\r\n        if (this.claimEdge) {\r\n            const edges = rsData.claimEdgesByParentId[this.claimEdge.parentId.toString()]\r\n            const index = edges.indexOf(this.claimEdge.id.toString(), 0);\r\n            if (index > -1) {\r\n                edges.splice(index, 1);\r\n            }\r\n            const parentClaim = JSON.parse(\r\n                JSON.stringify(\r\n                    await this.props.repository.getItem(\r\n                        this.claimEdge.parentId\r\n                    )\r\n                )\r\n            ) as Claim;\r\n            this.props.calculationInitator.notify([new Change(parentClaim)]).then(() => {\r\n                this.props.handleEditClose();\r\n            });\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"claim.content\">Content</label>\r\n                    <textarea className=\"form-control\" id=\"claim.content\" value={this.state.content} onChange={this.handleContent} rows={2}></textarea>\r\n                    <small className=\"form-text text-muted\">For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                    This is [an example](http://example.com/) inline link.</small>\r\n                </div>\r\n                {this.claimEdge &&\r\n                    < >\r\n                        {this.props.proMainContext ? \"True\" : \"false\"}\r\n                        <div className=\"form-group form-check\">\r\n                            <input type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.pro} onChange={this.handlePro} />\r\n                            <label> Pro Parent</label>\r\n                        </div>\r\n                        <div className=\"form-group form-check\">\r\n                            <input type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                            <label> Pro Main</label>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>\r\n                                Affects:\r\n                            <select id=\"claimEdge.affects\" value={this.state.affects} onChange={this.handleAffects}>\r\n                                    <option value={Affects.Confidence}>Confidence</option>\r\n                                    <option value={Affects.Relevance}>Relevance</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.priority} onChange={this.handlePriority}></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                        </div>\r\n                        <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Third group\">\r\n                            <button type=\"button\" value=\"Delete\" className=\"btn btn-secondary\" onClick={this.handleDelete}>Delete</button>\r\n                        </div>\r\n                    </>\r\n                }\r\n                <hr></hr>\r\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n                        <button type=\"button\" value=\"Submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Submit</button>\r\n                    </div>\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\r\n                        <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n                <span>ID: {this.claim.id}</span>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Score, Messenger, Change, Type } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    messenger: Messenger,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childClaimEedges: ClaimEdge[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ClaimElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: this.props.claimEdge ? false : true,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(),\r\n            claim: new Claim(),\r\n            childClaimEedges: [],\r\n            claimEdge: this.props.claimEdge,\r\n        };\r\n\r\n        const awaitScore = this.props.repository.getScoreBySourceClaimId(this.props.claimId)\r\n        const awaitClaim = this.props.repository.getItem(this.props.claimId)\r\n        const awaitChildClaimEedges = this.props.repository.getClaimEdgesByParentId(this.props.claimId)\r\n        Promise.all([awaitScore, awaitClaim, awaitChildClaimEedges]).then((values) => {\r\n            let newState: any = {}\r\n            newState.score = values[0];\r\n            if (values[1]) {\r\n                newState.claim = values[1]\r\n            }\r\n            newState.childClaimEedges = values[2];\r\n            this.setState(newState);\r\n        });\r\n\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (changes: Change[]) => {\r\n        for (const change of changes) {\r\n            const { newItem } = change;\r\n            let newState: any = {}\r\n            if (newItem.id === this.props.claimId && newItem.type === Type.claim) {\r\n                const claim = newItem as Claim;\r\n                newState.claim = claim;\r\n            }\r\n            if (newItem.type === Type.score) {\r\n                const score = newItem as Score;\r\n                if (score.sourceClaimId === this.props.claimId) {\r\n                    newState.score = score;\r\n                }\r\n            }\r\n            if (this.state.claimEdge && newItem.id === this.state.claimEdge.id && newItem.type === Type.claimEdge) {\r\n                const claimEdge = newItem as ClaimEdge;\r\n                newState.claimEdge = claimEdge;\r\n            }\r\n            //Check for changes to child edges\r\n            if (newItem.type === Type.claimEdge) {\r\n                const claimEdge = newItem as ClaimEdge;\r\n                if (claimEdge.parentId === this.props.claimId) {\r\n                    const ChildClaimEedges = await this.props.repository.getClaimEdgesByParentId(this.props.claimId)\r\n                    newState.childClaimEedges = ChildClaimEedges;\r\n                }\r\n            }\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleExpanderClick = () => {\r\n        this.setState({\r\n            childrenVisible: !this.state.childrenVisible\r\n        });\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        if (!score) { score = new Score() } //ToDo: Review this line\r\n        const claim = this.state.claim;\r\n        const claimEdge = this.state.claimEdge;\r\n        const childClaimEedges = this.state.childClaimEedges;\r\n        let proMain = props.proMainContext;\r\n        let scoreText = `${Math.round(score.confidence * 100)}%`\r\n        if (claimEdge) {\r\n            if (!claimEdge.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (claimEdge.affects === Affects.Relevance) {\r\n                scoreText = `×${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreText = `${Math.round(score.confidence * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //ToDO: move this to the repository to reduce duplicate processing\r\n        let childClaimEedgesSorted = childClaimEedges;\r\n        if (childClaimEedges.length > 1) {\r\n            childClaimEedgesSorted = childClaimEedges.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        //Commonmark\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            return { __html: writer.render(parsed) };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <div className={'claim ' + proMainText} >\r\n                    <div className={'editor-button'} onClick={this.handleEditButtonClick}><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 48 48\" width=\"15\"><path d=\"M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\" /><path d=\"M0 0h48v48h-48z\" fill=\"none\" /></svg></div>\r\n                    <div className={'add-button'} onClick={this.handleAddButtonClick}>+</div>\r\n                    {childClaimEedges.length > 0 &&\r\n                        <div className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} onClick={this.handleExpanderClick} >\r\n                            &#9701;\r\n                    </div>\r\n                    }\r\n                    <div className={'claim-inner'}>\r\n                        <span className={`score`}>\r\n                            {scoreText}\r\n                        </span>\r\n                        <span dangerouslySetInnerHTML={createMarkup()}>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {this.state.editorVisible &&\r\n                    <EditorElement\r\n                        claimId={claim.id}\r\n                        repository={props.repository}\r\n                        calculationInitator={props.calculationInitator}\r\n                        claimEdge={this.state.claimEdge}\r\n                        proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                        handleEditClose={this.handleEditClose}\r\n                        messenger={props.messenger}\r\n                        new={this.state.addMode}\r\n                    />}\r\n\r\n                {this.state.childrenVisible &&\r\n                    <ul className=\"children\">\r\n                        {childClaimEedges.length > 0 && childClaimEedgesSorted.map((child) => (\r\n                            <li key={child.childId.toString()}>\r\n                                <ClaimElement\r\n                                    claimId={child.childId}\r\n                                    repository={props.repository}\r\n                                    calculationInitator={props.calculationInitator}\r\n                                    claimEdge={child}\r\n                                    proMainContext={proMain}\r\n                                    messenger={props.messenger}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClaimElement;","import React from 'react';\r\nimport { Repository} from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      db: any;\r\n    }\r\n  }\r\n\r\ntype MyProps = {\r\n    repository: Repository,\r\n};\r\n\r\ntype MyState = {\r\n\r\n};\r\n\r\nclass Menu extends React.Component<MyProps, MyState> {\r\n\r\n\r\n    // constructor(props: MyProps) {\r\n    //     super(props);\r\n    // }\r\n\r\n    handleSave = () => {\r\n        window.db.doc(\"rsData\").set(JSON.parse(JSON.stringify(this.props.repository.rsData)))\r\n        .then(function() {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch(function(error: any) {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" value=\"Save\" className=\"btn btn-secondary\" onClick={this.handleSave}>Save</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './App.css';\r\nimport ClaimElement from './ClaimElement';\r\nimport { Repository, CalculationInitator, Id, Messenger } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  claimId: Id,\r\n  repository: Repository,\r\n  calculationInitator: CalculationInitator,\r\n  messenger: Messenger\r\n}> = ({\r\n  claimId,\r\n  repository,\r\n  calculationInitator,\r\n  messenger\r\n}) => (\r\n      <>\r\n      <Menu repository={repository}></Menu>\r\n        <ClaimElement\r\n          claimId={claimId}\r\n          repository={repository}\r\n          calculationInitator={calculationInitator}\r\n          proMainContext={true}\r\n          messenger = {messenger}\r\n        />\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Repository, CalculationInitator, Change, Claim, ID, Messenger, RsData } from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    db: any;\r\n  }\r\n}\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n// Generate Data (Might need to move to)\r\nconst repo = new Repository();\r\nconst messenger = new Messenger();\r\nconst calculationInitator = new CalculationInitator(repo, messenger.notify);\r\n\r\nwindow.db.doc(\"rsData\").get().then((doc: any) => {\r\n  if (doc.exists) {\r\n    repo.rsData = doc.data();\r\n    //Connect to the HTML\r\n    const claims = document.getElementsByTagName('rs-claim');\r\n    for (const claim of claims) {\r\n      const possibleClaimId = claim.getAttribute('claimId');\r\n      let claimId = ID(\"\");\r\n      if (possibleClaimId) {\r\n        claimId = ID(possibleClaimId);\r\n      }\r\n      ReactDOM.render(<App\r\n        claimId={claimId}\r\n        repository={repo}\r\n        calculationInitator={calculationInitator}\r\n        messenger={messenger}\r\n      />, claim);\r\n    }\r\n  } else {\r\n    // Create a new RsData object with empty claims\r\n    repo.rsData = new RsData();\r\n    //Connect to the HTML\r\n    const claims = document.getElementsByTagName('rs-claim');\r\n    for (const claim of claims) {\r\n      const possibleClaimId = claim.getAttribute('claimId');\r\n      let claimId = ID(\"\");\r\n      if (possibleClaimId) {\r\n        claimId = ID(possibleClaimId);\r\n      }\r\n\r\n      //Create the new claim\r\n      calculationInitator.notify([\r\n        new Change(\r\n          new Claim(\"New Claim\", claimId)\r\n        ),\r\n      ]).then((doc: any) => {\r\n\r\n        ReactDOM.render(<App\r\n          claimId={claimId}\r\n          repository={repo}\r\n          calculationInitator={calculationInitator}\r\n          messenger={messenger}\r\n        />, claim);\r\n      });\r\n    }\r\n  }\r\n}).catch(function (error: any) {\r\n  console.log(\"Error getting document:\", error);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}