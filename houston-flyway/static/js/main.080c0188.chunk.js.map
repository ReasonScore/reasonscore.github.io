{"version":3,"sources":["EditorElement.tsx","ScoreElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorElement","props","claim","Claim","claimEdge","handleSubmit","actions","state","pasteClaim","originalClaimEdge","push","Action","ClaimEdge","parentId","undefined","pro","id","priority","content","new","childId","calculateScoreActions","repository","then","scoreActions","a","messenger","notify","concat","handleEditClose","handleContent","e","setState","currentTarget","value","handlePriority","handlePasteClaim","handlePro","proMain","proMainContext","checked","handleProMain","handleAffects","affects","handleDelete","handleCancel","this","claimId","getClaim","newState","toString","className","htmlFor","onChange","rows","href","type","role","aria-label","onClick","React","Component","commonmark","require","ScoreElement","handleDataDispatch","change","newData","dataId","oldData","getChildrenByScoreId","score","childScores","parentScoreId","handleExpanderClick","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","Score","getScore","scoreId","sourceEdgeId","getClaimEdge","sourceClaimId","claimResult","subscribe","unsubscribe","scoreText","Math","round","confidence","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","childScoresSorted","length","sort","b","proMainText","xmlns","height","viewBox","width","d","fill","style","left","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","parse","__html","render","createMarkup","map","child","key","Menu","handleSave","rsDataCopy","JSON","stringify","rsData","items","itemKey","scoreIdsBySourceId","childIdsByScoreId","window","db","doc","set","console","log","catch","error","toggleSettings","settingsOpen","handleSetting","setting","settings","numbers","lines","classes","paddingBottom","stroke","transform","Object","keys","bind","classNames","App","Boolean","location","hostname","match","RepositoryLocalPure","Messenger","get","exists","data","u","scoreElements","document","getElementsByTagName","scoreElement","possibleScoreId","getAttribute","updatedScores","ReactDOM","RsData","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.080c0188.chunk.js","sourcesContent":["import React from 'react';\r\nimport { RepositoryLocalPure, calculateScoreActions, Claim, ClaimEdge, Action, Messenger, iClaimEdge } from \"@reasonscore/core\";\r\n\r\ntype MyProps = {\r\n    claimId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n    claimEdge?: iClaimEdge\r\n};\r\n\r\ntype MyState = {\r\n    content: string,\r\n    pro?: boolean,\r\n    proMain?: boolean,\r\n    affects?: string,\r\n    priority: string,\r\n    pasteClaim: string,\r\n    originalClaimEdge?: iClaimEdge\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    claim = new Claim();\r\n    claimEdge: ClaimEdge | undefined;\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            content: \"\",\r\n            pro: true,\r\n            proMain: this.props.proMainContext,\r\n            affects: undefined,\r\n            priority: \"\",\r\n            pasteClaim: \"\",\r\n            originalClaimEdge: undefined,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let originalClaimEdge: iClaimEdge | undefined;\r\n        if (this.props.new) {\r\n            this.claim = new Claim();\r\n            originalClaimEdge = new ClaimEdge(this.props.claimId, this.claim.id);\r\n        } else {\r\n            const claim = await this.props.repository.getClaim(this.props.claimId);\r\n            originalClaimEdge = this.props.claimEdge;\r\n            if (claim) {\r\n                this.claim = claim as Claim;\r\n            }\r\n        }\r\n        const pro = originalClaimEdge ? originalClaimEdge.pro : true;\r\n        let newState: MyState = {\r\n            content: this.claim.content,\r\n            pro: pro,\r\n            proMain: this.props.proMainContext ? pro : !pro,\r\n            affects: originalClaimEdge ? originalClaimEdge.affects.toString() : undefined,\r\n            priority: originalClaimEdge ? originalClaimEdge.priority : \"\",\r\n            pasteClaim: \"\",\r\n            originalClaimEdge: originalClaimEdge,\r\n        }\r\n\r\n        if (newState.priority === undefined) { newState.priority = \"\" } //ToDo: Temp for items with blank priority. mutates state?\r\n\r\n        this.setState(newState);\r\n\r\n\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const actions: Action[] = [];\r\n        if (this.state.pasteClaim && this.state.originalClaimEdge) {\r\n            actions.push(\r\n                new Action(\r\n                    new ClaimEdge(this.state.originalClaimEdge.parentId, this.state.pasteClaim, undefined, this.state.pro, this.state.originalClaimEdge.id, this.state.priority),\r\n                    undefined, \"add_claimEdge\", this.state.originalClaimEdge.id\r\n                )\r\n            )\r\n        } else {\r\n            actions.push(\r\n                new Action(\r\n                    new Claim(this.state.content, this.claim.id),\r\n                    undefined, this.props.new ? \"add_claim\" : \"modify_claim\", this.claim.id\r\n                )\r\n            )\r\n            if (this.state.originalClaimEdge) {\r\n                actions.push(new Action(\r\n                    new ClaimEdge(this.state.originalClaimEdge.parentId, this.state.originalClaimEdge.childId, undefined, this.state.pro, this.state.originalClaimEdge.id, this.state.priority),\r\n                    undefined, this.props.new ? \"add_claimEdge\" : \"modify_claimEdge\" , this.state.originalClaimEdge.id\r\n                ))\r\n            }\r\n        }\r\n\r\n        calculateScoreActions({\r\n            actions: actions,\r\n            repository: this.props.repository\r\n        }).then(async (scoreActions) => {\r\n            //TODO: How do I set the glocal state the the new RSData?\r\n            await this.props.messenger.notify(actions.concat(scoreActions));\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleContent = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n        this.setState({ content: e.currentTarget.value });\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ priority: e.currentTarget.value });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: e.currentTarget.checked,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: pro,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleAffects = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        this.setState({ affects: e.currentTarget.value });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        //TODO : move to repository\r\n        if (this.state.originalClaimEdge) {\r\n            const actions: Action[] = [];\r\n                actions.push(\r\n                    new Action(\r\n                        undefined,\r\n                        this.state.originalClaimEdge, \"delete_claimEdge\", this.state.originalClaimEdge.id\r\n                    )\r\n                )\r\n    \r\n            calculateScoreActions({\r\n                actions: actions,\r\n                repository: this.props.repository\r\n            }).then(async (scoreActions) => {\r\n                //TODO: How do I set the glocal state the the new RSData?\r\n                await this.props.messenger.notify(actions.concat(scoreActions));\r\n                this.props.handleEditClose();\r\n            });\r\n    \r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"container\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"claim.content\">Content</label>\r\n                    <textarea className=\"form-control\" id=\"claim.content\" value={this.state.content} onChange={this.handleContent} rows={2}></textarea>\r\n                    <small className=\"form-text text-muted\">For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                    This is [an example](http://example.com/) inline link.</small>\r\n                </div>\r\n                {this.state.originalClaimEdge &&\r\n                    < >\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-xs-4 mr-4\">\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.pro} onChange={this.handlePro} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"claimEdge.pro\">Pro Parent</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group col-xs-4\">\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"proMain\">Pro Main</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-xs-4\">\r\n                                <label htmlFor=\"claimEdge.affects\">Affects</label>\r\n                                <select className=\"form-control\" id=\"claimEdge.affects\" value={this.state.affects} onChange={this.handleAffects}>\r\n                                    <option value={\"confidence\"}>Confidence</option>\r\n                                    <option value={\"relevance\"}>Relevance</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-xs-4\">\r\n                                <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.priority} onChange={this.handlePriority}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-xs-4\">\r\n                                <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                }\r\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Submit\">\r\n                        <button type=\"button\" value=\"Submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Submit</button>\r\n                    </div>\r\n                    <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Cancel\">\r\n                        <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                    </div>\r\n                    {this.state.originalClaimEdge &&\r\n                        <div className=\"btn-group ml-5\" role=\"group\" aria-label=\"Delete\">\r\n                            <button type=\"button\" value=\"Delete\" className=\"btn btn btn-outline-danger\" onClick={this.handleDelete}>Delete</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <span>ID: {this.claim.id}</span>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\nimport { RepositoryLocalPure, Claim, Score, Messenger, iScore, Action, iClaimEdge } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: iScore,\r\n    claim: Claim,\r\n    childScores: iScore[],\r\n    claimEdge?: iClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId);\r\n        let claim = new Claim();\r\n        let childrenVisible = this.state.childrenVisible;\r\n        if (score) {\r\n            let claimEdge: iClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId)\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id);\r\n            if (!score.parentScoreId) {\r\n                childrenVisible = true;\r\n            }\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                childrenVisible: childrenVisible,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //TODO:\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    //TODO:\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleExpanderClick = () => {\r\n        this.setState({\r\n            childrenVisible: !this.state.childrenVisible\r\n        });\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        if (!score) { score = new Score(\"\", \"\") } //TODO: Review this line\r\n        const claim = this.state.claim;\r\n        //const claimEdge = this.state.claimEdge;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreText = `${Math.round(score.confidence * 100)}%`\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (score.affects === \"relevance\") {\r\n                scoreText = `×${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreText = `${Math.round(score.confidence * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move this to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        //Commonmark\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            return { __html: writer.render(parsed) };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <div className={'claim ' + proMainText} >\r\n                    <div className={'editor-button'} onClick={this.handleEditButtonClick}><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 48 48\" width=\"15\"><path d=\"M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\" /><path d=\"M0 0h48v48h-48z\" fill=\"none\" /></svg></div>\r\n                    <div className={'add-button'} onClick={this.handleAddButtonClick}>+</div>\r\n                    {childScores.length > 0 &&\r\n                        <div className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} onClick={this.handleExpanderClick} >\r\n                            &#9701;\r\n                        </div>\r\n                    }\r\n                    <div className={'claim-inner'}>\r\n                        <div className=\"lines\">\r\n                            <div className=\"lines-circle-container\" >\r\n                                <div className=\"lines-circle\" style={{ left: score.confidence * 100 + \"%\" }}></div>\r\n                            </div>\r\n                            <div className=\"lines-inner\"></div>\r\n\r\n                        </div>\r\n                        <span className={`score`}>\r\n                            {scoreText}\r\n                        </span>\r\n                        <span dangerouslySetInnerHTML={createMarkup()}>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {this.state.editorVisible &&\r\n                    <EditorElement\r\n                        claimId={claim.id}\r\n                        repository={props.repository}\r\n                        claimEdge={this.state.claimEdge}\r\n                        proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                        handleEditClose={this.handleEditClose}\r\n                        messenger={props.messenger}\r\n                        new={this.state.addMode}\r\n                    />}\r\n\r\n                {this.state.childrenVisible &&\r\n                    <ul className=\"children\">\r\n                        {childScores.length > 0 && childScoresSorted.map((child) => (\r\n                            <li key={child.id.toString()}>\r\n                                <ScoreElement\r\n                                    scoreId={child.id}\r\n                                    repository={props.repository}\r\n                                    proMainContext={proMain}\r\n                                    messenger={props.messenger}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","import React from 'react';\r\nimport { RepositoryLocalPure, Messenger } from \"@reasonscore/core\";\r\nimport ScoreElement from './ScoreElement';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        db: any;\r\n    }\r\n}\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n};\r\n\r\ntype MyState = {\r\n    settings: {\r\n        [others: string]: boolean;\r\n    }\r\n    settingsOpen: boolean\r\n};\r\n\r\nclass Menu extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            settings: {\r\n                numbers: false,\r\n                lines: true\r\n            },\r\n            settingsOpen: false\r\n        };\r\n    }\r\n\r\n    handleSave = () => {\r\n        const rsDataCopy = JSON.parse(JSON.stringify(this.props.repository.rsData));\r\n\r\n        //remove all scores so we are not passing them back and forth\r\n        const items = rsDataCopy.items;\r\n        for (const itemKey in items) {\r\n            if (items[itemKey].type === \"score\") {\r\n                delete items[itemKey];\r\n            }\r\n        }\r\n        rsDataCopy.scoreIdsBySourceId = {};\r\n        rsDataCopy.childIdsByScoreId = {};\r\n\r\n        //Save the scores to Firebase\r\n        window.db.doc(\"rsData\").set(rsDataCopy)\r\n            .then(function () {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function (error: any) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState({\r\n            settingsOpen: !this.state.settingsOpen\r\n        })\r\n    }\r\n\r\n    handleSetting = (setting: string, e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            settings: {\r\n                ...this.state.settings,\r\n                [setting]: e.currentTarget.checked,\r\n            }\r\n        })\r\n    }\r\n\r\n    classNames() {\r\n        let classes = \"\";\r\n        for (const className in this.state.settings) {\r\n            if (this.state.settings[className]) {\r\n                classes += \"s-\" + className + \" \";\r\n            }\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div style={{ paddingBottom: \".5rem\" }} className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save\" onClick={this.handleSave}>\r\n                    <button type=\"button\" value=\"Submit\" className=\"btn btn-secondary\">Save</button>\r\n                </div>\r\n                <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Settings\">\r\n                    <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.toggleSettings}>\r\n                        <svg style={{ height: \"1em\", fill: \"white\", stroke: \"none\" }} viewBox=\"0 0 1280.000000 1280.000000\">\r\n                            <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\r\n                            <g transform=\"translate(0.000000,1280.000000) scale(0.100000,-0.100000)\">\r\n                                <path d=\"M5664 11538 c-38 -40 -55 -68 -68 -113 -19 -65 -44 -149 -70 -235 -9 -30 -74 -248 -145 -484 l-128 -429 -97 -33 c-176 -60 -334 -125 -503 -209 l-168 -83 -100 53 c-55 29 -154 82 -220 117 -66 36 -147 80 -180 98 -232 125 -441 239 -505 275 -41 22 -100 54 -131 70 l-57 29 -108 -101 c-60 -56 -315 -308 -568 -561 l-458 -460 54 -98 c30 -55 77 -139 103 -189 26 -49 62 -115 78 -145 17 -30 57 -103 89 -162 32 -60 86 -159 119 -220 34 -62 84 -156 112 -208 27 -52 56 -104 63 -115 8 -11 14 -26 14 -35 0 -8 -31 -76 -69 -150 -90 -176 -178 -385 -247 -587 -18 -50 -20 -52 -74 -68 -30 -10 -73 -23 -95 -30 -34 -11 -101 -31 -140 -41 -5 -2 -41 -12 -80 -24 -38 -12 -77 -23 -85 -25 -8 -2 -46 -13 -85 -25 -38 -12 -77 -23 -85 -25 -8 -2 -69 -20 -135 -40 -177 -53 -269 -81 -370 -110 -82 -24 -95 -31 -147 -83 l-57 -57 -1 -712 c0 -688 0 -713 19 -722 10 -6 56 -21 102 -35 46 -13 170 -50 274 -81 105 -31 197 -58 205 -60 8 -2 47 -14 85 -25 111 -34 154 -47 245 -73 113 -33 287 -85 326 -98 27 -8 34 -18 49 -67 79 -263 165 -482 275 -702 l68 -136 -52 -100 c-29 -54 -81 -151 -116 -214 -34 -63 -79 -146 -100 -185 -21 -38 -65 -119 -97 -180 -97 -177 -187 -344 -236 -436 l-46 -85 510 -510 509 -509 58 29 c31 17 91 49 132 71 82 46 409 224 535 291 44 24 134 72 200 109 66 36 152 82 191 102 l71 36 179 -90 c98 -50 240 -114 314 -143 74 -29 144 -56 155 -61 18 -7 175 -57 231 -74 14 -3 25 -19 32 -43 18 -63 66 -228 112 -377 11 -38 23 -77 25 -85 3 -13 70 -240 139 -470 13 -41 40 -132 61 -203 l38 -127 723 0 723 0 55 66 c31 36 56 68 57 72 1 13 8 37 29 107 12 39 23 77 25 85 2 8 13 47 25 85 12 39 23 77 25 85 2 8 13 44 24 80 11 36 63 211 116 390 53 179 100 332 105 340 4 8 48 28 97 44 156 50 363 137 548 229 l180 90 55 -29 c30 -16 118 -63 195 -105 125 -68 203 -110 445 -241 36 -20 119 -65 185 -100 66 -36 159 -86 206 -111 47 -26 92 -47 101 -47 18 0 1118 1103 1118 1122 0 7 -12 33 -26 58 -14 25 -45 81 -69 125 -23 44 -71 132 -105 195 -35 63 -138 255 -230 426 -93 170 -177 326 -189 345 -11 19 -21 41 -21 50 0 9 27 69 60 133 53 104 109 230 156 351 9 22 19 47 23 55 4 8 25 69 46 135 21 66 43 125 49 132 6 6 52 23 101 38 148 44 177 52 250 75 39 11 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 69 20 135 40 66 20 158 47 204 60 74 21 91 30 138 77 l53 52 0 722 0 722 -62 21 c-59 19 -325 98 -358 106 -8 2 -46 14 -85 25 -105 32 -151 46 -250 75 -49 15 -126 37 -170 50 -44 13 -118 35 -165 49 -47 13 -114 33 -150 45 l-65 20 -34 103 c-67 211 -195 507 -293 684 l-45 80 80 145 c43 79 99 182 124 229 57 106 223 413 360 665 24 44 51 95 60 113 l17 33 -499 499 c-275 275 -507 500 -515 500 -9 0 -24 -6 -35 -13 -11 -8 -58 -34 -105 -59 -90 -48 -253 -136 -447 -242 -65 -35 -145 -78 -178 -96 -92 -49 -169 -91 -302 -164 l-121 -66 -159 79 c-192 96 -331 153 -523 216 -80 26 -154 51 -166 55 -15 6 -26 29 -43 86 -33 117 -60 207 -161 544 -51 168 -102 341 -115 385 -13 44 -33 112 -45 150 -12 39 -23 78 -25 88 -2 9 -7 22 -10 27 -4 7 -260 10 -729 10 l-723 0 -49 -52z m981 -3342 c83 -16 89 -17 166 -35 248 -57 582 -231 789 -413 344 -302 557 -671 644 -1118 23 -119 27 -176 27 -362 0 -163 -9 -263 -30 -361 -6 -23 -13 -58 -16 -77 -13 -77 -89 -282 -150 -405 -178 -362 -407 -601 -735 -767 -355 -180 -750 -252 -1120 -203 -63 8 -126 17 -140 20 -14 3 -47 10 -75 16 -91 18 -310 97 -423 154 -560 280 -966 827 -1058 1425 -30 198 -30 501 1 650 3 14 8 41 11 60 31 174 128 426 228 593 120 200 230 324 406 456 216 163 515 302 745 346 73 14 203 35 240 39 83 9 412 -4 490 -18z\" />\r\n                            </g>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className={\"settings-grid \" + (this.state.settingsOpen && \"show-settings\")}>\r\n                {Object.keys(this.state.settings).map((setting) => (\r\n                    <div key={setting}>\r\n                        <input type=\"checkbox\" id={'s-' + setting} checked={this.state.settings[setting]} onChange={this.handleSetting.bind(this, setting)} />\r\n                        <label htmlFor={'s-' + setting}>{setting}</label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className={this.classNames()}>\r\n                <ScoreElement\r\n                    scoreId={this.props.scoreId}\r\n                    repository={this.props.repository}\r\n                    proMainContext={true}\r\n                    messenger={this.props.messenger}\r\n                />\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './App.css';\r\nimport ScoreElement from './ScoreElement';\r\nimport { Messenger, RepositoryLocalPure } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  scoreId: string,\r\n  repository: RepositoryLocalPure,\r\n  messenger: Messenger\r\n}> = ({\r\n  scoreId,\r\n  repository,\r\n  messenger\r\n}) => (\r\n      <>\r\n        <Menu repository={repository}\r\n        scoreId={scoreId}\r\n        proMainContext={true}\r\n        messenger={messenger}></Menu>\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RepositoryLocalPure, Messenger, RsData, calculateScoreActions, Action, Score, Claim, ClaimEdge } from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    db: any;\r\n  }\r\n}\r\n\r\nconst repository = new RepositoryLocalPure();\r\nconst messenger = new Messenger();\r\n\r\nwindow.db.doc(\"rsData\").get().then((doc: any) => {\r\n  if (doc.exists) {\r\n    repository.rsData = doc.data();\r\n\r\n    const u = undefined;\r\n    const scoreElements = document.getElementsByTagName('rs-score');\r\n    for (const scoreElement of scoreElements) {\r\n      const possibleScoreId = scoreElement.getAttribute('score-Id');\r\n      let scoreId = \"\";\r\n      if (possibleScoreId) {\r\n        scoreId = possibleScoreId;\r\n      }\r\n      //re-calculate scores in case there were changes in the algorithm or if scores are not stored\r\n      calculateScoreActions({\r\n        actions: [\r\n          new Action(new Score(\"Yk3JDShDv0lm\", \"Yk3JDShDv0lm\", u, u, u, u, u, 0, u, \"topScore\"), u, \"add_score\"),\r\n        ], repository\r\n      }).then(async (updatedScores: any) => {\r\n        await repository.notify(updatedScores);\r\n        ReactDOM.render(<App\r\n          scoreId={scoreId}\r\n          repository={repository}\r\n          messenger={messenger}\r\n        />, scoreElement);\r\n      });\r\n    }\r\n\r\n\r\n  } else {\r\n    // Create a new RsData object with an empty claim\r\n    repository.rsData = new RsData();\r\n\r\n    //Connect to the HTML\r\n    const scoreElements = document.getElementsByTagName('rs-score');\r\n    for (const scoreElement of scoreElements) {\r\n      const possibleScoreId = scoreElement.getAttribute('score-Id');\r\n      let scoreId = \"\";\r\n      if (possibleScoreId) {\r\n        scoreId = possibleScoreId;\r\n      }\r\n\r\n      //Create the new claim\r\n      const u = undefined;\r\n      calculateScoreActions({\r\n        actions: [\r\n          new Action(new Claim(\"Top Claim\", \"topClaim\"), u, \"add_claim\"),\r\n          new Action(new Claim(\"Child Claim 1\", \"ChildClaim1\"), u, \"add_claim\"),\r\n          new Action(new Claim(\"Child Claim 2\", \"ChildClaim2\"), u, \"add_claim\"),\r\n          new Action(new Claim(\"GrandChild Claim1\", \"grandChild1\"), u, \"add_claim\"),\r\n          new Action(new ClaimEdge(\"topClaim\", \"ChildClaim1\", u, false, \"ChildClaim1Edge\"), u, \"add_claimEdge\"),\r\n          new Action(new ClaimEdge(\"topClaim\", \"ChildClaim2\", u, true, \"ChildClaim2Edge\"), u, \"add_claimEdge\"),\r\n          new Action(new ClaimEdge(\"ChildClaim1\", \"grandChild1\", u, false, \"GrandChildClaim1Edge\"), u, \"add_claimEdge\"),\r\n          new Action(new Score(\"topClaim\", \"topClaim\", u, u, u, u, u, 0, u, \"topScore\"), u, \"add_score\"),\r\n        ], repository\r\n      }).then(async (updatedScores: any) => {\r\n        await repository.notify(updatedScores);\r\n        ReactDOM.render(<App\r\n          scoreId={scoreId}\r\n          repository={repository}\r\n          messenger={messenger}\r\n        />, scoreElement);\r\n      });\r\n    }\r\n  }\r\n}).catch(function (error: any) {\r\n  console.log(\"Error getting document:\", error);\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}