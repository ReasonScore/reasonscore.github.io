{"version":3,"sources":["dataModels/ClaimEdge.ts","dataModels/Claim.ts","EditorElement.tsx","ScoreElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ClaimEdge","parentId","childId","affects","pro","id","newId","priority","type","checked","Claim","content","reversible","labelMin","labelMid","labelMax","EditorElement","props","handleSubmit","actions","state","pasteClaim","claimEdge","push","Action","undefined","claim","new","calculateScoreActions","repository","then","scoreActions","a","messenger","notify","concat","handleEditClose","handleText","e","pathParts","currentTarget","split","length","setState","value","Error","handlePriority","handlePasteClaim","handlePro","proMain","proMainContext","handleProMain","handleDelete","handleCancel","newState","this","claimId","getClaim","JSON","parse","stringify","className","htmlFor","onChange","rows","href","role","aria-label","onClick","React","Component","commonmark","require","ScoreElement","handleChildrenVisible1","childrenVisible","window","document","getElementById","score","handleChildrenVisible","selectedNodes","selectNode","rsData","expander2s","getElementsByClassName","expander2","expander3","replace","selectedNode","find","itemId","substring","status","handleDataDispatch","change","newData","dataId","oldData","getChildrenByScoreId","childScores","parentScoreId","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","Score","getScore","scoreId","sourceEdgeId","getClaimEdge","sourceClaimId","claimResult","settings","startClosed","subscribe","unsubscribe","scoreNumbers","Math","round","confidence","scoreImpact","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","scoreDescription","scoreDescriptions","descriptions","trailing","result","impact","descItem","min","desc","basedOn","descendantCount","childScoresSorted","sort","b","sign","proMainText","fractionalizedScore","abs","fraction","toFixed","width","height","style","left","viewBox","d","title","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","html","render","__html","createMarkup","CSSTransition","in","timeout","classNames","TransitionGroup","component","map","child","key","scoreTree","Menu","action","handleSave","rsDataCopy","getData","RsDatabase","doc","dbCollection","set","console","log","catch","error","handleImport","element","createElement","innerHTML","fileInput","firstChild","that","addEventListener","files","file","name","match","FileReader","onload","updatedScores","setTimeout","readAsText","alert","click","handleExport","hiddenElement","encodeURI","target","download","toggleSettings","settingsOpen","handleSetting","setting","numbers","lines","getScoreTree","scoreTreeId","items","itemKey","scoreIdsBySourceId","childIdsByScoreId","classes","topScoreId","maxWidth","margin","padding","opacity","DbNotAvailable","editable","saveToCloud","portData","cursor","fill","stroke","transform","Object","keys","bind","display","App","Boolean","location","hostname","RepositoryLocalPure","Messenger","RsSettings","get","exists","data","RsActions","scoreElements","getElementsByTagName","scoreElement","possibleScoreId","getAttribute","ReactDOM","startApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f10a4f42.chunk.js","sourcesContent":["import { ItemTypes, Affects, newId } from \"@reasonscore/core\";\r\n\r\n/**\r\n * Stores the relationship between a claim and an item (usually another claim).\r\n * This is directional as the edge points from one claim to it's parent.\r\n * This is just a data transfer object so it should have no logic in it\r\n * and only JSON compatible types string, number, object, array, boolean\r\n */\r\nexport class ClaimEdge {\r\n    type: ItemTypes = 'claimEdge'\r\n    checked: any;\r\n\r\n    constructor(\r\n        /** The ID for the parent claim this edge points to */\r\n        public parentId: string,\r\n        /** The ID for the child claim this edge points from */\r\n        public childId: string,\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = 'confidence',\r\n        /** Is the child claim a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaimEdge {\r\n    type: ItemTypes\r\n\r\n    /** The ID for the parent claim this edge points to */\r\n    parentId: string,\r\n    /** The ID for the child claim this edge points from */\r\n    childId: string,\r\n    /** How the child affects the parent score */\r\n    affects: Affects,\r\n    /** Is the child claim a pro of it's parent (false if it is a con) */\r\n    pro: boolean,\r\n    id: string,\r\n    priority: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}","import { ItemTypes, Item, newId } from \"@reasonscore/core\";\r\n\r\nexport class Claim implements iClaim, Item {\r\n    type: ItemTypes = 'claim'\r\n    labelMin: string = \"\";\r\n    labelMid: string = \"\";\r\n    labelMax: string = \"\";\r\n    priority: string = \"\";\r\n\r\n    constructor(\r\n        public content: string = \"\",\r\n        public id: string = newId(),\r\n        public reversible: boolean = false,\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaim {\r\n    type: ItemTypes,\r\n    id: string,\r\n    reversible: boolean,\r\n    content: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { RepositoryLocalPure, calculateScoreActions, Action, Messenger } from \"@reasonscore/core\";\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\n\r\ntype MyProps = {\r\n    claimId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n    claimEdge?: ClaimEdge\r\n};\r\n\r\ntype MyState = {\r\n    pasteClaim: string,\r\n    proMain: boolean,\r\n    claim?: Claim,\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            proMain: true,\r\n            pasteClaim: \"\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const newState = {} as MyState;\r\n        if (this.props.new) {\r\n            newState.claim = new Claim();\r\n            newState.claimEdge = new ClaimEdge(this.props.claimId, newState.claim.id);\r\n        } else {\r\n            const claim = await this.props.repository.getClaim(this.props.claimId) as Claim;\r\n            if (claim) {\r\n                newState.claim = claim;\r\n            }\r\n            if (this.props.claimEdge) {\r\n                newState.claimEdge = JSON.parse(JSON.stringify(this.props.claimEdge)) //TODO: Replace with deep clone function\r\n            }\r\n        }\r\n\r\n        if (newState.claimEdge) {\r\n                newState.proMain = this.props.proMainContext ? newState.claimEdge.pro : !newState.claimEdge.pro;\r\n        }\r\n\r\n        //TODO: Temp for items with blank properties. This correctes error: A component is changing an uncontrolled input of type text to be controlled\r\n        if (newState.claim) {\r\n            if (newState.claim.labelMin === undefined) { newState.claim.labelMin = \"\" }\r\n            if (newState.claim.labelMid === undefined) { newState.claim.labelMid = \"\" }\r\n            if (newState.claim.labelMax === undefined) { newState.claim.labelMax = \"\" }\r\n            if (newState.claimEdge) {\r\n                if (newState.claimEdge.priority === undefined) { newState.claim.priority = \"\" }\r\n            }\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const actions: Action[] = [];\r\n        if (this.state.pasteClaim && this.state.claimEdge) {\r\n            if (this.state.claimEdge) {\r\n                const claimEdge = this.state.claimEdge;\r\n                claimEdge.childId = this.state.pasteClaim;\r\n                actions.push(\r\n                    new Action(\r\n                        this.state.claimEdge, undefined, \"add_claimEdge\"\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            actions.push(\r\n                new Action(\r\n                    this.state.claim,\r\n                    undefined, this.props.new ? \"add_claim\" : \"modify_claim\"\r\n                )\r\n            )\r\n            if (this.state.claimEdge) {\r\n                actions.push(new Action(\r\n                    this.state.claimEdge, undefined,\r\n                    this.props.new ? \"add_claimEdge\" : \"modify_claimEdge\"\r\n                ))\r\n            }\r\n        }\r\n\r\n        calculateScoreActions({\r\n            actions: actions,\r\n            repository: this.props.repository\r\n        }).then(async (scoreActions) => {\r\n            await this.props.messenger.notify(actions.concat(scoreActions));\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleText = (e: React.FormEvent<HTMLInputElement> |\r\n        React.FormEvent<HTMLTextAreaElement> |\r\n        React.FormEvent<HTMLSelectElement>) => {\r\n        const pathParts = e.currentTarget.id.split(\".\");\r\n        const state = this.state as any;\r\n        if (pathParts.length === 2) {\r\n            this.setState({\r\n                [pathParts[0]]: {\r\n                    ...state[pathParts[0]],\r\n                    [pathParts[1]]: e.currentTarget.value\r\n                }\r\n            } as any);\r\n        } else if (pathParts.length === 1) {\r\n            this.setState({\r\n                [pathParts[0]]: e.currentTarget.value\r\n            } as any);\r\n        } else {\r\n            throw new Error(\"id expectes 1 or 2 items in path. \" + pathParts.length + \" were received.\");\r\n        }\r\n\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ claimEdge: { priority: e.currentTarget.value } as any });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: e.currentTarget.checked,\r\n            } as any,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: pro,\r\n            } as any,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        if (this.state.claimEdge) {\r\n            const actions: Action[] = [];\r\n            actions.push(\r\n                new Action(\r\n                    undefined,\r\n                    this.state.claimEdge, \"delete_claimEdge\", this.state.claimEdge.id\r\n                )\r\n            )\r\n\r\n            calculateScoreActions({\r\n                actions: actions,\r\n                repository: this.props.repository\r\n            }).then(async (scoreActions) => {\r\n                await this.props.messenger.notify(actions.concat(scoreActions));\r\n                this.props.handleEditClose();\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.claim &&\r\n                    <form className=\"container\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"claim.content\">Content</label>\r\n                            <textarea className=\"form-control\" id=\"claim.content\" value={this.state.claim.content} onChange={this.handleText} rows={2}></textarea>\r\n                            <small className=\"form-text text-muted\">\r\n                                For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                                This is [an example](http://example.com/) inline link.</small>\r\n                        </div>\r\n                        <div className=\"form-row  edit-lines\">\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMin\">Minimum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMin\" value={this.state.claim.labelMin} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMid\">Middle Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMid\" value={this.state.claim.labelMid} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMax\">Maximum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMax\" value={this.state.claim.labelMax} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.state.claimEdge &&\r\n                            < >\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4 mr-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.claimEdge.pro} onChange={this.handlePro} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"claimEdge.pro\">Pro Parent</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"proMain\">Pro Main</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.affects\">Affects</label>\r\n                                        <select className=\"form-control\" id=\"claimEdge.affects\" value={this.state.claimEdge.affects} onChange={this.handleText}>\r\n                                            <option value={\"confidence\"}>Confidence</option>\r\n                                            <option value={\"relevance\"}>Relevance</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.claimEdge.priority} onChange={this.handlePriority}></input>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save Locally\">\r\n                                <button type=\"button\" value=\"Save Locally\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Save Locally</button>\r\n                            </div>\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Cancel\">\r\n                                <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                            </div>\r\n                            {this.props.claimEdge &&\r\n                                <div className=\"btn-group ml-5\" role=\"group\" aria-label=\"Delete\">\r\n                                    <button type=\"button\" value=\"Delete\" className=\"btn btn btn-outline-danger\" onClick={this.handleDelete}>Delete</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <span>ID: {this.state.claim.id}</span>\r\n                    </form>\r\n                }</>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\nimport { RepositoryLocalPure, Score, Messenger, Action, ScoreTree, selectNode } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    scoreTree: ScoreTree,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childScores: Score[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId) as Score;\r\n        let claim = new Claim() as Claim;\r\n        //TODO: Figure out how to remove Children Visible completely\r\n        let childrenVisible = this.state.childrenVisible;\r\n        if (score) {\r\n            let claimEdge: ClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId) as ClaimEdge\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id) as Score[];\r\n            if (!score.parentScoreId && !this.props.settings.startClosed) {\r\n                childrenVisible = true;\r\n            }\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                childrenVisible: childrenVisible,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n        this.handleChildrenVisible1()\r\n    }\r\n\r\n    handleChildrenVisible1 = () => {\r\n        if (this.state.childrenVisible) {\r\n            const expander2 = window.document.getElementById(\"expander2-\" + this.state.score.id) as HTMLInputElement;\r\n            expander2.checked = true\r\n        }\r\n    }\r\n\r\n    handleChildrenVisible = (e: React.FormEvent<HTMLInputElement>) => {\r\n        const selectedNodes = selectNode(this.state.score.id, this.props.repository.rsData);\r\n        const expander2s = window.document.getElementsByClassName('expander2') as HTMLCollectionOf<HTMLInputElement>;\r\n        for (const expander2 of expander2s) {\r\n            const expander3 = window.document.getElementById(expander2.id.replace(\"expander2\", \"expander3\")) as HTMLInputElement;\r\n            // TODO: Find feels very slow here. Should it be a dictionairy\r\n            const selectedNode = selectedNodes.find(e => e.itemId === expander2.id.substring(10, 100))\r\n            if (selectedNode) {\r\n                if (selectedNode.status === `selected`) {\r\n                    expander2.checked = true;\r\n                    expander3.checked = true;\r\n                } else if (selectedNode.status === `ancestor`) {\r\n                    expander2.checked = false;\r\n                    expander3.checked = true;\r\n                } else {\r\n                    expander2.checked = false;\r\n                    expander3.checked = false;\r\n                }\r\n            } else {\r\n                expander2.checked = false;\r\n                expander3.checked = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //this.handleChildrenVisible1()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                if (this.state.childrenVisible === false) {\r\n                    newState.childrenVisible = true;\r\n                }\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreNumbers = `${Math.round(score.confidence * 100)}%`\r\n        const settings = this.props.settings;\r\n\r\n        //Score Numbers\r\n        let scoreImpact = score.confidence;\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (!score.reversible && score.confidence < 0) {\r\n                scoreImpact = 0;\r\n            }\r\n            if (score.affects === \"relevance\") {\r\n                scoreNumbers = score.pro ? \"X\" : \"÷\";\r\n                scoreNumbers += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreNumbers = `${Math.round(scoreImpact * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Score Description\r\n        let scoreDescription = \"\";\r\n        if (settings.scoreDescriptions) {\r\n            if (score.affects === \"relevance\") {\r\n                scoreDescription = \"Importance\";\r\n                if (score.pro) {\r\n                    scoreDescription = \"Increases \" + scoreDescription;\r\n                } else {\r\n                    scoreDescription = \"Decreases \" + scoreDescription;\r\n                }\r\n            } else {\r\n                let descriptions, trailing = \"\";\r\n                if (score.parentScoreId === undefined) {\r\n                    descriptions = settings.scoreDescriptions.result\r\n                } else {\r\n                    descriptions = settings.scoreDescriptions.impact\r\n                    trailing = proMain ? \" Pro\" : \" Con\";\r\n                }\r\n                for (const descItem of descriptions) {\r\n                    if (score.confidence * score.relevance >= descItem.min) {\r\n                        scoreDescription = descItem.desc;\r\n                    }\r\n                }\r\n                scoreDescription += trailing + \": \";\r\n            }\r\n        }\r\n        if (!childScores.length) {\r\n            scoreDescription = \"Assumed \" + scoreDescription\r\n        }\r\n        let basedOn = \"\"\r\n        if (this.state.score.descendantCount > 0){\r\n            basedOn = \" based on \" + this.state.score.descendantCount + \" claim\";\r\n            if (this.state.score.descendantCount > 1) basedOn += \"s\"\r\n            basedOn += \".\"\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move score sorting to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        let fractionalizedScore = Math.abs(\r\n            ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n        ).toFixed(0);\r\n        if (fractionalizedScore === \"100\") fractionalizedScore = \"99\";\r\n        let sign;\r\n        if (score.parentScoreId === undefined) {\r\n            if (score.confidence < 0) sign = \"-\";\r\n            else sign = \" \";\r\n        } else {\r\n            sign = proMain ? \"+\" : \"-\";\r\n        }\r\n\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            var html: string = writer.render(parsed)\r\n            //Add target=\"_blank\"\r\n            html = html.replace(/href=\"/g, ' target=\"_blank\" rel=\"noopener noreferrer\"  href=\"');\r\n            // rel=\"noopener noreferrer\" due to security vulnerability https://www.jitbit.com/alexblog/256/\r\n            return { __html: html };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <input id={\"expander2-\" + score.id} type=\"checkbox\" className=\"expander2\" onChange={this.handleChildrenVisible}></input>\r\n                <input id={\"expander3-\" + score.id} type=\"checkbox\" className=\"expander3\"></input>\r\n                <div className={'claim-hider'}>\r\n                    <div className={'claim ' + proMainText} >\r\n                        {childScores.length > 0 &&\r\n                            <div id={\"expander-\" + (this.state.score.id)} className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} >\r\n                                <svg width=\"20px\" height=\"20px\">\r\n                                    <use href=\"#expander\" />\r\n                                </svg>\r\n                            </div>\r\n                        }\r\n                        <div className={'claim-inner'}>\r\n                            <div className=\"lines\">\r\n                                <div className=\"lines-inner\">\r\n                                    <svg className=\"lines-pointer\" style={{ left: scoreImpact * 100 + \"%\" }} height=\"20\" width=\"20\" viewBox=\"0 0 10 10\">\r\n                                        <path d=\"m 0,1.3 a 10,10 0 0 1 10,0 L 5,10 Z\" />\r\n                                    </svg>\r\n                                    <span className=\"min\">{claim.labelMin}</span>\r\n                                    <span className=\"mid\">{claim.labelMid}</span>\r\n                                    <span className=\"max\">{claim.labelMax}</span>\r\n                                    <div className=\"tic\" style={{ left: '0%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '33.3%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '66.6%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '100%' }}></div>\r\n                                </div>\r\n                            </div>\r\n                            <label htmlFor={\"expander2-\" + score.id} className={'numbers'}\r\n                                title={scoreDescription + basedOn}>\r\n                                <span className=\"number\">\r\n                                    <span className=\"sign\">{sign}</span>\r\n                                    {fractionalizedScore}\r\n                                </span>\r\n                                {score.parentScoreId === undefined && \"%\"}\r\n                            </label>\r\n                            <span className={'score-description'}\r\n                                title={scoreNumbers + '% confidence based on ' + basedOn}>\r\n                                {scoreDescription + basedOn}\r\n                            </span>\r\n                            <span className={'rs-content'} dangerouslySetInnerHTML={createMarkup()}></span>\r\n                            <label className=\"more-info\" htmlFor={\"expander2-\" + score.id} >\r\n                                More info&hellip;\r\n                            </label>\r\n                        </div>\r\n                        <svg className=\"callout\" width=\"30px\" height=\"30px\">\r\n                            <use href=\"#callout\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"scoreInfo\">\r\n                    {scoreDescription + basedOn}\r\n                    <span className=\"editable\">\r\n                    <button onClick={this.handleEditButtonClick} className=\"btn-inline\" >edit this claim</button>\r\n                    <button onClick={this.handleAddButtonClick} className=\"btn-inline\" >add a pro or con</button></span>\r\n                </div>\r\n                <CSSTransition in={this.state.editorVisible} timeout={490} classNames=\"editor\">\r\n                    <div>\r\n                        {this.state.editorVisible &&\r\n                            <EditorElement\r\n                                claimId={claim.id}\r\n                                repository={props.repository}\r\n                                claimEdge={this.state.claimEdge}\r\n                                proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                                handleEditClose={this.handleEditClose}\r\n                                messenger={props.messenger}\r\n                                new={this.state.addMode}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </CSSTransition>\r\n                <ul id={\"children-\" + (this.state.score.id)} className={'children ' + (this.state.childrenVisible ? '' : 'hide')}>\r\n                    <TransitionGroup component={null}>\r\n                        {childScores.length > 0 && childScoresSorted.map((child) => (\r\n                            <CSSTransition\r\n                                key={child.id}\r\n                                timeout={5000}\r\n                                classNames='score'>\r\n                                <li key={child.id}>\r\n                                    <ScoreElement\r\n                                        scoreId={child.id}\r\n                                        repository={props.repository}\r\n                                        proMainContext={proMain}\r\n                                        messenger={props.messenger}\r\n                                        settings={props.settings}\r\n                                        scoreTree={props.scoreTree}\r\n                                    />\r\n                                </li>\r\n                            </CSSTransition>\r\n\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","import React, { Component } from 'react';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action, ScoreTree, RsData } from \"@reasonscore/core\";\r\nimport ScoreElement from './ScoreElement';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        RsDatabase: any;\r\n    }\r\n}\r\n\r\ntype MyProps = {\r\n    scoreTreeId: string,\r\n    repository: RepositoryLocalPure,\r\n    messenger: Messenger,\r\n    settings: any,\r\n};\r\n\r\ntype MyState = {\r\n    settings: {\r\n        [others: string]: boolean;\r\n    }\r\n    settingsOpen: boolean,\r\n    scoreTree?: ScoreTree,\r\n};\r\n\r\nclass Menu extends Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            settings: {\r\n                ...{\r\n                    numbers: false,\r\n                    lines: true,\r\n                    scoreDescriptions: {\r\n                        impact: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Weak\" },\r\n                            { min: .5, desc: \"\" },\r\n                            { min: .9, desc: \"Srong\" },\r\n                            { min: 1.1, desc: \"Very Srong\" },\r\n                        ],\r\n                        result: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Possible\" },\r\n                            { min: .5, desc: \"Likely\" },\r\n                            { min: .9, desc: \"Probable\" },\r\n                            { min: 1.1, desc: \"Probable\" },\r\n                        ]\r\n                    },\r\n                }, ...this.props.settings\r\n            },\r\n            settingsOpen: false,\r\n            scoreTree: undefined,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            scoreTree: await this.props.repository.getScoreTree(this.props.scoreTreeId),\r\n        })\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const action of actions) {\r\n            const { newData, type, dataId } = action;\r\n            let newState: Partial<MyState> = {}\r\n            if (type === \"modify_scoreTree\" && dataId === this.state.scoreTree?.id) {\r\n                newState.scoreTree = { ...this.state.scoreTree, ...newData };\r\n            }\r\n\r\n            this.setState(newState as MyState);\r\n        }\r\n    }\r\n\r\n    handleSave = () => {\r\n        const rsDataCopy = this.getData();\r\n\r\n        //Save the scores to Firebase\r\n        window.RsDatabase.doc(this.state.settings.dbCollection).set(rsDataCopy)\r\n            .then(function () {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function (error: any) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n    handleImport = () => {\r\n        //TODO: HACKs: File Import needs to be completely re-done\r\n        const element = document.createElement('div');\r\n        element.innerHTML = '<input type=\"file\">';\r\n        const fileInput = element.firstChild as HTMLInputElement;\r\n        const that = this;\r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', function () {\r\n                if (fileInput.files) {\r\n                    var file = fileInput.files[0];\r\n                    if (file.name.match(/\\.(txt|json)$/)) {\r\n                        var reader = new FileReader();\r\n\r\n                        reader.onload = async function () {\r\n                            that.props.repository.rsData = JSON.parse(reader.result as string);\r\n                            const scoreTree = that.state.scoreTree;\r\n                            that.setState({ scoreTree: undefined })\r\n                            await calculateScoreActions({\r\n                                actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n                                repository: that.props.repository,\r\n                            }).then((updatedScores: any) => {\r\n                                setTimeout(function () {\r\n                                    that.setState({ scoreTree: scoreTree })\r\n                                }, 100);\r\n                            });\r\n                        }\r\n                        reader.readAsText(file);\r\n                    } else {\r\n                        alert(\"File not supported, .txt or .json files only\");\r\n                    }\r\n                }\r\n            });\r\n            fileInput.click();\r\n        }\r\n    }\r\n\r\n    handleExport = () => {\r\n        const rsDataCopy = this.getData();\r\n        var hiddenElement = document.createElement('a');\r\n        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(JSON.stringify(rsDataCopy));\r\n        hiddenElement.target = '_blank';\r\n        hiddenElement.download = 'rsData.json';\r\n        hiddenElement.click();\r\n    }\r\n\r\n    getData(): RsData {\r\n        const rsDataCopy: RsData = JSON.parse(JSON.stringify(this.props.repository.rsData));\r\n\r\n        //remove all scores so we are not passing them back and forth\r\n        const items = rsDataCopy.items;\r\n        for (const itemKey in items) {\r\n            if (items[itemKey].type === \"score\") {\r\n                delete items[itemKey];\r\n            }\r\n        }\r\n        rsDataCopy.scoreIdsBySourceId = {};\r\n        rsDataCopy.childIdsByScoreId = {};\r\n\r\n        return rsDataCopy;\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState({\r\n            settingsOpen: !this.state.settingsOpen\r\n        })\r\n    }\r\n\r\n    handleSetting = (setting: string, e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            settings: {\r\n                ...this.state.settings,\r\n                [setting]: e.currentTarget.checked,\r\n            }\r\n        })\r\n    }\r\n\r\n    classNames() {\r\n        let classes = \"\";\r\n        for (const className in this.state.settings) {\r\n            if (this.state.settings[className]) {\r\n                classes += \"s-\" + className + \" \";\r\n            }\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        const settings = this.state.settings;\r\n        return (<>\r\n            <div className={this.classNames()}>\r\n                {this.state.scoreTree &&\r\n                    <ScoreElement\r\n                        scoreId={this.state.scoreTree.topScoreId}\r\n                        repository={this.props.repository}\r\n                        proMainContext={true}\r\n                        messenger={this.props.messenger}\r\n                        settings={this.state.settings}\r\n                        scoreTree={this.state.scoreTree}\r\n                    />\r\n                }\r\n            </div>\r\n            <div className=\"Content\">\r\n                <div style={{ maxWidth: \"600px\", margin: \"10px\", padding: \"5rem 0 .5rem 0\", opacity: .3 }} className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save\">\r\n                        {!settings.DbNotAvailable && settings.editable && settings.saveToCloud &&\r\n                            <button onClick={this.handleSave} type=\"button\" value=\"Submit\" className=\"btn btn-secondary\">Save to cloud</button>\r\n                        }\r\n                        {settings.portData && <>\r\n                            <button onClick={this.handleImport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Import</button>\r\n                            <button onClick={this.handleExport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Export</button>\r\n                        </>}\r\n\r\n                    </div>\r\n                    <div className=\"btn-group mr-3 float-right\" role=\"group\" aria-label=\"Settings\">\r\n                        <svg onClick={this.toggleSettings} style={{ cursor: \"pointer\", height: \"1em\", fill: \"#aaa\", stroke: \"none\" }} viewBox=\"0 0 1280.000000 1280.000000\">\r\n                            <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\r\n                            <g transform=\"translate(0,1280) scale(0.1,-0.1)\">\r\n                                <path d=\"M5664 11538 c-38 -40 -55 -68 -68 -113 -19 -65 -44 -149 -70 -235 -9 -30 -74 -248 -145 -484 l-128 -429 -97 -33 c-176 -60 -334 -125 -503 -209 l-168 -83 -100 53 c-55 29 -154 82 -220 117 -66 36 -147 80 -180 98 -232 125 -441 239 -505 275 -41 22 -100 54 -131 70 l-57 29 -108 -101 c-60 -56 -315 -308 -568 -561 l-458 -460 54 -98 c30 -55 77 -139 103 -189 26 -49 62 -115 78 -145 17 -30 57 -103 89 -162 32 -60 86 -159 119 -220 34 -62 84 -156 112 -208 27 -52 56 -104 63 -115 8 -11 14 -26 14 -35 0 -8 -31 -76 -69 -150 -90 -176 -178 -385 -247 -587 -18 -50 -20 -52 -74 -68 -30 -10 -73 -23 -95 -30 -34 -11 -101 -31 -140 -41 -5 -2 -41 -12 -80 -24 -38 -12 -77 -23 -85 -25 -8 -2 -46 -13 -85 -25 -38 -12 -77 -23 -85 -25 -8 -2 -69 -20 -135 -40 -177 -53 -269 -81 -370 -110 -82 -24 -95 -31 -147 -83 l-57 -57 -1 -712 c0 -688 0 -713 19 -722 10 -6 56 -21 102 -35 46 -13 170 -50 274 -81 105 -31 197 -58 205 -60 8 -2 47 -14 85 -25 111 -34 154 -47 245 -73 113 -33 287 -85 326 -98 27 -8 34 -18 49 -67 79 -263 165 -482 275 -702 l68 -136 -52 -100 c-29 -54 -81 -151 -116 -214 -34 -63 -79 -146 -100 -185 -21 -38 -65 -119 -97 -180 -97 -177 -187 -344 -236 -436 l-46 -85 510 -510 509 -509 58 29 c31 17 91 49 132 71 82 46 409 224 535 291 44 24 134 72 200 109 66 36 152 82 191 102 l71 36 179 -90 c98 -50 240 -114 314 -143 74 -29 144 -56 155 -61 18 -7 175 -57 231 -74 14 -3 25 -19 32 -43 18 -63 66 -228 112 -377 11 -38 23 -77 25 -85 3 -13 70 -240 139 -470 13 -41 40 -132 61 -203 l38 -127 723 0 723 0 55 66 c31 36 56 68 57 72 1 13 8 37 29 107 12 39 23 77 25 85 2 8 13 47 25 85 12 39 23 77 25 85 2 8 13 44 24 80 11 36 63 211 116 390 53 179 100 332 105 340 4 8 48 28 97 44 156 50 363 137 548 229 l180 90 55 -29 c30 -16 118 -63 195 -105 125 -68 203 -110 445 -241 36 -20 119 -65 185 -100 66 -36 159 -86 206 -111 47 -26 92 -47 101 -47 18 0 1118 1103 1118 1122 0 7 -12 33 -26 58 -14 25 -45 81 -69 125 -23 44 -71 132 -105 195 -35 63 -138 255 -230 426 -93 170 -177 326 -189 345 -11 19 -21 41 -21 50 0 9 27 69 60 133 53 104 109 230 156 351 9 22 19 47 23 55 4 8 25 69 46 135 21 66 43 125 49 132 6 6 52 23 101 38 148 44 177 52 250 75 39 11 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 69 20 135 40 66 20 158 47 204 60 74 21 91 30 138 77 l53 52 0 722 0 722 -62 21 c-59 19 -325 98 -358 106 -8 2 -46 14 -85 25 -105 32 -151 46 -250 75 -49 15 -126 37 -170 50 -44 13 -118 35 -165 49 -47 13 -114 33 -150 45 l-65 20 -34 103 c-67 211 -195 507 -293 684 l-45 80 80 145 c43 79 99 182 124 229 57 106 223 413 360 665 24 44 51 95 60 113 l17 33 -499 499 c-275 275 -507 500 -515 500 -9 0 -24 -6 -35 -13 -11 -8 -58 -34 -105 -59 -90 -48 -253 -136 -447 -242 -65 -35 -145 -78 -178 -96 -92 -49 -169 -91 -302 -164 l-121 -66 -159 79 c-192 96 -331 153 -523 216 -80 26 -154 51 -166 55 -15 6 -26 29 -43 86 -33 117 -60 207 -161 544 -51 168 -102 341 -115 385 -13 44 -33 112 -45 150 -12 39 -23 78 -25 88 -2 9 -7 22 -10 27 -4 7 -260 10 -729 10 l-723 0 -49 -52z m981 -3342 c83 -16 89 -17 166 -35 248 -57 582 -231 789 -413 344 -302 557 -671 644 -1118 23 -119 27 -176 27 -362 0 -163 -9 -263 -30 -361 -6 -23 -13 -58 -16 -77 -13 -77 -89 -282 -150 -405 -178 -362 -407 -601 -735 -767 -355 -180 -750 -252 -1120 -203 -63 8 -126 17 -140 20 -14 3 -47 10 -75 16 -91 18 -310 97 -423 154 -560 280 -966 827 -1058 1425 -30 198 -30 501 1 650 3 14 8 41 11 60 31 174 128 426 228 593 120 200 230 324 406 456 216 163 515 302 745 346 73 14 203 35 240 39 83 9 412 -4 490 -18z\" />\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className={\"settings-container \" + (this.state.settingsOpen && \"show-settings\")}>\r\n                    <div className={\"settings-grid \"}>\r\n                        {Object.keys(this.state.settings).map((setting) => (\r\n                            <div key={setting}>\r\n                                {// TODO: make setting componant handle more than booleans\r\n                                    (this.state.settings[setting] === true || this.state.settings[setting] === false) &&\r\n                                    <>\r\n                                        <input type=\"checkbox\" id={'s-' + setting} checked={this.state.settings[setting]} onChange={this.handleSetting.bind(this, setting)} />\r\n                                        <label htmlFor={'s-' + setting}>{setting}</label>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <svg style={{ display: \"none\" }}>\r\n                <symbol id=\"callout\" viewBox=\"0 0 30 30\">\r\n                    <g>\r\n                        <path d=\"M 18,28 C 10,28 4,28 2,20 L 10,2 c 0,10 0,23 8,26 z\"></path>\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n            <svg height=\"20px\" width=\"20px\" style={{ display: \"none\" }}>\r\n                <symbol id=\"expander\" viewBox=\"0 0 10 10\" >\r\n                    <g>\r\n                        <path d=\"m1 1 7 4-7 4z\" />\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './custom.scss';\r\nimport { Messenger, RepositoryLocalPure } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  scoreTreeId: string,\r\n  repository: RepositoryLocalPure,\r\n  messenger: Messenger,\r\n  settings: any\r\n}> = ({\r\n  scoreTreeId,\r\n  repository,\r\n  messenger,\r\n  settings\r\n}) => (\r\n      <>\r\n        <Menu repository={repository}\r\n          scoreTreeId={scoreTreeId}\r\n          messenger={messenger}\r\n          settings={settings}></Menu>\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action} from \"@reasonscore/core\";\r\n// import { Claim, ClaimEdge, ScoreTree } from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    RsDatabase: any,\r\n    RsActions: Action[],\r\n    RsSettings: any,\r\n  }\r\n}\r\n\r\nasync function startApp() {\r\n  const repository = new RepositoryLocalPure();\r\n  const messenger = new Messenger();\r\n  const settings = window.RsSettings;\r\n\r\n  let doc\r\n\r\n  if (settings.dbCollection === null) {\r\n    settings.dbCollection = \"rsData\"\r\n  }\r\n\r\n  // //TODO: This is for easy testing for now\r\n  // const u = undefined, pro = true, con = false\r\n  // window.RsActions = [\r\n  //   new Action(new Claim('mainClaim', 'mainClaim'), u, 'add_claim'), new Action(new ScoreTree('mainClaim', 'mainClaim-score', u, 'ScoreTree'), u, 'add_scoreTree'),\r\n  //   new Action(new Claim('01', '01'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '01', u, con, '01-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02', '02'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '02', u, pro, '02-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-1', '02-1'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-1', u, pro, '02-1-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-2', '02-2'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-2', u, con, '02-2-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-3', '02-3'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-3', u, pro, '02-3-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('03', '03'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '03', u, pro, '03-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('04', '04'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '04', u, pro, '04-edge'), u, 'add_claimEdge'),\r\n  // ]\r\n\r\n  //Populate the Repository\r\n  if (window.RsDatabase) {\r\n    doc = await window.RsDatabase.doc(settings.dbCollection).get()\r\n  }\r\n  if (doc && doc.exists) {\r\n    repository.rsData = doc.data();\r\n  } else if (window.RsActions) {\r\n    await repository.notify(window.RsActions)\r\n    settings.DbNotAvailable = true;\r\n  }\r\n\r\n  //Look in the HTML to see what we need to prep\r\n  //Loop through the html scores and start an app for each\r\n  const scoreElements = document.getElementsByTagName('rs-score');\r\n  for (const scoreElement of scoreElements) {\r\n    const possibleScoreId = scoreElement.getAttribute('score-tree-Id');\r\n    let scoreTreeId = \"\";\r\n    if (possibleScoreId) {\r\n      scoreTreeId = possibleScoreId;\r\n    }\r\n\r\n    //TODO: Check if the scoreTree, Score and Claim exist. If not, create them\r\n    const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n    if (scoreTree) {\r\n      await calculateScoreActions({\r\n        actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n        repository,\r\n      })\r\n    }\r\n\r\n    ReactDOM.render(<App\r\n      scoreTreeId={scoreTreeId}\r\n      repository={repository}\r\n      messenger={messenger}\r\n      settings={window.RsSettings}\r\n    />, scoreElement);\r\n\r\n  }\r\n}\r\nstartApp();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}