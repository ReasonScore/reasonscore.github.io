{"version":3,"sources":["EditorElement.tsx","ScoreElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorElement","props","handleSubmit","actions","state","pasteClaim","claimEdge","push","Action","undefined","claim","new","calculateScoreActions","repository","then","scoreActions","a","messenger","notify","concat","handleEditClose","handleText","e","pathParts","currentTarget","id","split","length","setState","value","Error","handlePriority","priority","handlePasteClaim","handlePro","proMain","proMainContext","checked","pro","handleProMain","handleDelete","handleCancel","newState","this","Claim","ClaimEdge","claimId","getClaim","JSON","parse","stringify","labelMin","labelMid","labelMax","className","htmlFor","content","onChange","rows","href","type","affects","role","aria-label","onClick","React","Component","commonmark","require","ScoreElement","handleDataDispatch","change","newData","dataId","oldData","parentId","getChildrenByScoreId","score","childScores","parentScoreId","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","Score","getScore","scoreId","sourceEdgeId","getClaimEdge","sourceClaimId","claimResult","settings","startClosed","subscribe","expandChildrenSetup","expanderElement","window","document","getElementById","setAttribute","unsubscribe","scoreNumbers","Math","round","confidence","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","childScoresSorted","sort","b","proMainText","xmlns","height","viewBox","width","d","fill","style","left","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","__html","render","createMarkup","CSSTransition","in","timeout","classNames","TransitionGroup","component","map","child","key","Menu","handleSave","rsDataCopy","getData","RsDatabase","doc","set","console","log","catch","error","handleImport","element","createElement","innerHTML","fileInput","firstChild","that","addEventListener","files","file","name","match","FileReader","onload","rsData","result","scoreTree","updatedScores","setTimeout","readAsText","alert","click","handleExport","hiddenElement","encodeURI","target","download","toggleSettings","settingsOpen","handleSetting","setting","numbers","lines","getScoreTree","scoreTreeId","items","itemKey","scoreIdsBySourceId","childIdsByScoreId","classes","paddingBottom","maxWidth","margin","DbNotAvailable","portData","cursor","opacity","stroke","transform","Object","keys","bind","topScoreId","display","App","Boolean","location","hostname","RepositoryLocalPure","Messenger","get","exists","data","RsActions","RsSettings","scoreElements","getElementsByTagName","scoreElement","possibleScoreId","getAttribute","ReactDOM","startApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10890920.chunk.js","sourcesContent":["import React from 'react';\r\nimport { RepositoryLocalPure, calculateScoreActions, Claim, Action, Messenger, iClaimEdge, iClaim, ClaimEdge } from \"@reasonscore/core\";\r\n\r\ntype MyProps = {\r\n    claimId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n    claimEdge?: iClaimEdge\r\n};\r\n\r\ntype MyState = {\r\n    pasteClaim: string,\r\n    proMain: boolean,\r\n    claim?: iClaim,\r\n    claimEdge?: iClaimEdge,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            proMain: true,\r\n            pasteClaim: \"\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const newState = {} as MyState;\r\n        if (this.props.new) {\r\n            newState.claim = new Claim();\r\n            newState.claimEdge = new ClaimEdge(this.props.claimId, newState.claim.id);\r\n        } else {\r\n            const claim = await this.props.repository.getClaim(this.props.claimId);\r\n            if (claim) {\r\n                newState.claim = claim;\r\n            }\r\n            if (this.props.claimEdge) {\r\n                newState.claimEdge = JSON.parse(JSON.stringify(this.props.claimEdge)) //TODO: Replace with deep clone function\r\n            }\r\n        }\r\n\r\n        if (newState.claimEdge) {\r\n            newState.proMain = this.props.proMainContext ? newState.claimEdge.pro : !newState.claimEdge.checked;\r\n        }\r\n\r\n        //TODO: Temp for items with blank properties. This correctes error: A component is changing an uncontrolled input of type text to be controlled\r\n        if (newState.claim) {\r\n            if (newState.claim.labelMin === undefined) { newState.claim.labelMin = \"\" }\r\n            if (newState.claim.labelMid === undefined) { newState.claim.labelMid = \"\" }\r\n            if (newState.claim.labelMax === undefined) { newState.claim.labelMax = \"\" }\r\n            if (newState.claimEdge) {\r\n                if (newState.claimEdge.priority === undefined) { newState.claim.priority = \"\" }\r\n            }\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const actions: Action[] = [];\r\n        if (this.state.pasteClaim && this.state.claimEdge) {\r\n            actions.push(\r\n                new Action(\r\n                    this.state.claimEdge, undefined, \"add_claimEdge\"\r\n                )\r\n            )\r\n        } else {\r\n            actions.push(\r\n                new Action(\r\n                    this.state.claim,\r\n                    undefined, this.props.new ? \"add_claim\" : \"modify_claim\"\r\n                )\r\n            )\r\n            if (this.state.claimEdge) {\r\n                actions.push(new Action(\r\n                    this.state.claimEdge, undefined,\r\n                    this.props.new ? \"add_claimEdge\" : \"modify_claimEdge\"\r\n                ))\r\n            }\r\n        }\r\n\r\n        calculateScoreActions({\r\n            actions: actions,\r\n            repository: this.props.repository\r\n        }).then(async (scoreActions) => {\r\n            await this.props.messenger.notify(actions.concat(scoreActions));\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleText = (e: React.FormEvent<HTMLInputElement> |\r\n        React.FormEvent<HTMLTextAreaElement> |\r\n        React.FormEvent<HTMLSelectElement>) => {\r\n        const pathParts = e.currentTarget.id.split(\".\");\r\n        const state = this.state as any;\r\n        if (pathParts.length === 2) {\r\n            this.setState({\r\n                [pathParts[0]]: {\r\n                    ...state[pathParts[0]],\r\n                    [pathParts[1]]: e.currentTarget.value\r\n                }\r\n            } as any);\r\n        } else if (pathParts.length === 1) {\r\n            this.setState({\r\n                [pathParts[0]]: e.currentTarget.value\r\n            } as any);\r\n        } else {\r\n            throw new Error(\"id expectes 1 or 2 items in path. \" + pathParts.length + \" were received.\");\r\n        }\r\n\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ claimEdge: { priority: e.currentTarget.value } as any });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: e.currentTarget.checked,\r\n            } as any,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: pro,\r\n            } as any,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        if (this.state.claimEdge) {\r\n            const actions: Action[] = [];\r\n            actions.push(\r\n                new Action(\r\n                    undefined,\r\n                    this.state.claimEdge, \"delete_claimEdge\", this.state.claimEdge.id\r\n                )\r\n            )\r\n\r\n            calculateScoreActions({\r\n                actions: actions,\r\n                repository: this.props.repository\r\n            }).then(async (scoreActions) => {\r\n                await this.props.messenger.notify(actions.concat(scoreActions));\r\n                this.props.handleEditClose();\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.claim &&\r\n                    <form className=\"container\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"claim.content\">Content</label>\r\n                            <textarea className=\"form-control\" id=\"claim.content\" value={this.state.claim.content} onChange={this.handleText} rows={2}></textarea>\r\n                            <small className=\"form-text text-muted\">\r\n                                For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                                This is [an example](http://example.com/) inline link.</small>\r\n                        </div>\r\n                        <div className=\"form-row  edit-lines\">\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMin\">Minimum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMin\" value={this.state.claim.labelMin} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMid\">Middle Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMid\" value={this.state.claim.labelMid} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMax\">Maximum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMax\" value={this.state.claim.labelMax} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.state.claimEdge &&\r\n                            < >\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4 mr-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.claimEdge.pro} onChange={this.handlePro} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"claimEdge.pro\">Pro Parent</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"proMain\">Pro Main</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.affects\">Affects</label>\r\n                                        <select className=\"form-control\" id=\"claimEdge.affects\" value={this.state.claimEdge.affects} onChange={this.handleText}>\r\n                                            <option value={\"confidence\"}>Confidence</option>\r\n                                            <option value={\"relevance\"}>Relevance</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.claimEdge.priority} onChange={this.handlePriority}></input>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save Locally\">\r\n                                <button type=\"button\" value=\"Save Locally\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Save Locally</button>\r\n                            </div>\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Cancel\">\r\n                                <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                            </div>\r\n                            {this.props.claimEdge &&\r\n                                <div className=\"btn-group ml-5\" role=\"group\" aria-label=\"Delete\">\r\n                                    <button type=\"button\" value=\"Delete\" className=\"btn btn btn-outline-danger\" onClick={this.handleDelete}>Delete</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <span>ID: {this.state.claim.id}</span>\r\n                    </form>\r\n                }</>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\nimport { RepositoryLocalPure, Claim, Score, Messenger, iScore, Action, iClaimEdge, iClaim } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n    settings: any,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: iScore,\r\n    claim: iClaim,\r\n    childScores: iScore[],\r\n    claimEdge?: iClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId);\r\n        let claim = new Claim() as iClaim;\r\n        //TODO: Figure out how to remove Children Visible completely\r\n        let childrenVisible = this.state.childrenVisible;\r\n        if (score) {\r\n            let claimEdge: iClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId)\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id);\r\n            if (!score.parentScoreId && !this.props.settings.startClosed) {\r\n                childrenVisible = true;\r\n            }\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                childrenVisible: childrenVisible,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n        this.expandChildrenSetup()\r\n    }\r\n\r\n    expandChildrenSetup() {\r\n        //Set up the click event to open the children outside React so it can be used with an embed without javascript code\r\n        const expanderElement = window.document.getElementById(\"expander-\" + (this.state.score.id));\r\n        expanderElement?.setAttribute(\"onClick\", `window.RsExpandChildren('${this.state.score.id}');`);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.expandChildrenSetup()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                if (this.state.childrenVisible === false) {\r\n                    newState.childrenVisible = true;\r\n                }\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    // // Removed, handled outside react\r\n    // handleExpanderClick = () => {\r\n    //     this.setState({\r\n    //         childrenVisible: !this.state.childrenVisible\r\n    //     });\r\n    // }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreNumbers = `${Math.round(score.confidence * 100)}%`\r\n        let scoreDescription = `-`\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (score.affects === \"relevance\") {\r\n                scoreNumbers = score.pro ? \"X\" : \"÷\";\r\n                scoreNumbers += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreNumbers = `${Math.round(score.confidence * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move score sorting to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        //Commonmark\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            return { __html: writer.render(parsed) };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <div className={'claim-hider'}>\r\n                    <div className={'claim ' + proMainText} >\r\n                        <div className={'editor-button'} onClick={this.handleEditButtonClick}><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 48 48\" width=\"15\"><path d=\"M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\" /><path d=\"M0 0h48v48h-48z\" fill=\"none\" /></svg></div>\r\n                        <div className={'add-button'} onClick={this.handleAddButtonClick}>+</div>\r\n                        {childScores.length > 0 &&\r\n                            <div id={\"expander-\" + (this.state.score.id)} className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} >\r\n                                <svg width=\"20px\" height=\"20px\">\r\n                                    <use href=\"#expander\" />\r\n                                </svg>\r\n                            </div>\r\n                        }\r\n                        <div className={'claim-inner'}>\r\n                            <div className=\"lines\">\r\n                                <div className=\"lines-circle-container\" >\r\n                                    <div className=\"lines-circle\" style={{ left: score.confidence * 100 + \"%\" }}></div>\r\n                                </div>\r\n                                <div className=\"lines-inner\"></div>\r\n                                <span className=\"min\">{claim.labelMin}</span>\r\n                                <span className=\"mid\">{claim.labelMid}</span>\r\n                                <span className=\"max\">{claim.labelMax}</span>\r\n                            </div>\r\n                            <span className={'numbers'}>\r\n                                {scoreNumbers}\r\n                            </span>\r\n                            <span className={'score-description'}>\r\n                                {scoreDescription}\r\n                            </span>\r\n                            <span className={'content'} dangerouslySetInnerHTML={createMarkup()}>\r\n                            </span>\r\n                        </div>\r\n                        <svg className=\"callout\" width=\"30px\" height=\"30px\">\r\n                            <use href=\"#callout\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <CSSTransition in={this.state.editorVisible} timeout={490} classNames=\"editor\">\r\n                    <div>\r\n                        {this.state.editorVisible &&\r\n                            <EditorElement\r\n                                claimId={claim.id}\r\n                                repository={props.repository}\r\n                                claimEdge={this.state.claimEdge}\r\n                                proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                                handleEditClose={this.handleEditClose}\r\n                                messenger={props.messenger}\r\n                                new={this.state.addMode}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </CSSTransition>\r\n\r\n                <ul id={\"children-\" + (this.state.score.id)} className={'children ' + (this.state.childrenVisible ? '' : 'hide')}>\r\n                    <TransitionGroup component={null}>\r\n                        {childScores.length > 0 && childScoresSorted.map((child) => (\r\n                            <CSSTransition\r\n                                key={child.id}\r\n                                timeout={5000}\r\n                                classNames='score'>\r\n                                <li key={child.id}>\r\n                                    <ScoreElement\r\n                                        scoreId={child.id}\r\n                                        repository={props.repository}\r\n                                        proMainContext={proMain}\r\n                                        messenger={props.messenger}\r\n                                        settings={props.settings}\r\n                                    />\r\n                                </li>\r\n                            </CSSTransition>\r\n\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","import React from 'react';\r\nimport { RepositoryLocalPure, Messenger, iRsData, calculateScoreActions, Action, ScoreTree } from \"@reasonscore/core\";\r\nimport ScoreElement from './ScoreElement';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        RsDatabase: any;\r\n    }\r\n}\r\n\r\ntype MyProps = {\r\n    scoreTreeId: string,\r\n    repository: RepositoryLocalPure,\r\n    messenger: Messenger,\r\n    settings: any,\r\n};\r\n\r\ntype MyState = {\r\n    settings: {\r\n        [others: string]: boolean;\r\n    }\r\n    settingsOpen: boolean,\r\n    scoreTree?: ScoreTree,\r\n};\r\n\r\nclass Menu extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            settings: {\r\n                ...{\r\n                    numbers: false,\r\n                    lines: true\r\n                }, ...this.props.settings\r\n            },\r\n            settingsOpen: false,\r\n            scoreTree: undefined,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            scoreTree: await this.props.repository.getScoreTree(this.props.scoreTreeId),\r\n        })\r\n    }\r\n\r\n    handleSave = () => {\r\n        const rsDataCopy = this.getData();\r\n\r\n        //Save the scores to Firebase\r\n        window.RsDatabase.doc(\"rsData\").set(rsDataCopy)\r\n            .then(function () {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function (error: any) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n    handleImport = () => {\r\n        //TODO: HACKs: File Import needs to be completely re-done\r\n        const element = document.createElement('div');\r\n        element.innerHTML = '<input type=\"file\">';\r\n        const fileInput = element.firstChild as HTMLInputElement;\r\n        const that = this;\r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', function () {\r\n                if (fileInput.files) {\r\n                    var file = fileInput.files[0];\r\n                    if (file.name.match(/\\.(txt|json)$/)) {\r\n                        var reader = new FileReader();\r\n\r\n                        reader.onload = async function () {\r\n                            that.props.repository.rsData = JSON.parse(reader.result as string);\r\n                            const scoreTree = that.state.scoreTree;\r\n                            that.setState({ scoreTree: undefined })\r\n                            await calculateScoreActions({\r\n                                actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n                                repository: that.props.repository,\r\n                            }).then((updatedScores: any) => {\r\n                                setTimeout(function () {\r\n                                    that.setState({ scoreTree: scoreTree })\r\n                                }, 100);\r\n                            });\r\n                        }\r\n                        reader.readAsText(file);\r\n                    } else {\r\n                        alert(\"File not supported, .txt or .json files only\");\r\n                    }\r\n                }\r\n            });\r\n            fileInput.click();\r\n        }\r\n    }\r\n\r\n    handleExport = () => {\r\n        const rsDataCopy = this.getData();\r\n        var hiddenElement = document.createElement('a');\r\n        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(JSON.stringify(rsDataCopy));\r\n        hiddenElement.target = '_blank';\r\n        hiddenElement.download = 'rsData.json';\r\n        hiddenElement.click();\r\n    }\r\n\r\n    getData(): iRsData {\r\n        const rsDataCopy: iRsData = JSON.parse(JSON.stringify(this.props.repository.rsData));\r\n\r\n        //remove all scores so we are not passing them back and forth\r\n        const items = rsDataCopy.items;\r\n        for (const itemKey in items) {\r\n            if (items[itemKey].type === \"score\") {\r\n                delete items[itemKey];\r\n            }\r\n        }\r\n        rsDataCopy.scoreIdsBySourceId = {};\r\n        rsDataCopy.childIdsByScoreId = {};\r\n        return rsDataCopy;\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState({\r\n            settingsOpen: !this.state.settingsOpen\r\n        })\r\n    }\r\n\r\n    handleSetting = (setting: string, e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            settings: {\r\n                ...this.state.settings,\r\n                [setting]: e.currentTarget.checked,\r\n            }\r\n        })\r\n    }\r\n\r\n    classNames() {\r\n        let classes = \"\";\r\n        for (const className in this.state.settings) {\r\n            if (this.state.settings[className]) {\r\n                classes += \"s-\" + className + \" \";\r\n            }\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        const settings = this.state.settings;\r\n        return (<><div className=\"Content\">\r\n            <div style={{ paddingBottom: \".5rem\", maxWidth: \"600px\", margin: \"10px\" }} className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save\">\r\n                    {!settings.DbNotAvailable &&\r\n                        <button onClick={this.handleSave} type=\"button\" value=\"Submit\" className=\"btn btn-secondary\">Save to cloud</button>\r\n                    }\r\n                    {settings.portData && <>\r\n                        <button onClick={this.handleExport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Download/Export</button>\r\n                        <button onClick={this.handleImport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Upload/Import</button>\r\n                    </>}\r\n\r\n                </div>\r\n                <div className=\"btn-group mr-3 float-right\" role=\"group\" aria-label=\"Settings\">\r\n                    <svg onClick={this.toggleSettings} style={{ cursor: \"pointer\", opacity: .8, height: \"1em\", fill: \"#aaa\", stroke: \"none\" }} viewBox=\"0 0 1280.000000 1280.000000\">\r\n                        <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\r\n                        <g transform=\"translate(0,1280) scale(0.1,-0.1)\">\r\n                            <path d=\"M5664 11538 c-38 -40 -55 -68 -68 -113 -19 -65 -44 -149 -70 -235 -9 -30 -74 -248 -145 -484 l-128 -429 -97 -33 c-176 -60 -334 -125 -503 -209 l-168 -83 -100 53 c-55 29 -154 82 -220 117 -66 36 -147 80 -180 98 -232 125 -441 239 -505 275 -41 22 -100 54 -131 70 l-57 29 -108 -101 c-60 -56 -315 -308 -568 -561 l-458 -460 54 -98 c30 -55 77 -139 103 -189 26 -49 62 -115 78 -145 17 -30 57 -103 89 -162 32 -60 86 -159 119 -220 34 -62 84 -156 112 -208 27 -52 56 -104 63 -115 8 -11 14 -26 14 -35 0 -8 -31 -76 -69 -150 -90 -176 -178 -385 -247 -587 -18 -50 -20 -52 -74 -68 -30 -10 -73 -23 -95 -30 -34 -11 -101 -31 -140 -41 -5 -2 -41 -12 -80 -24 -38 -12 -77 -23 -85 -25 -8 -2 -46 -13 -85 -25 -38 -12 -77 -23 -85 -25 -8 -2 -69 -20 -135 -40 -177 -53 -269 -81 -370 -110 -82 -24 -95 -31 -147 -83 l-57 -57 -1 -712 c0 -688 0 -713 19 -722 10 -6 56 -21 102 -35 46 -13 170 -50 274 -81 105 -31 197 -58 205 -60 8 -2 47 -14 85 -25 111 -34 154 -47 245 -73 113 -33 287 -85 326 -98 27 -8 34 -18 49 -67 79 -263 165 -482 275 -702 l68 -136 -52 -100 c-29 -54 -81 -151 -116 -214 -34 -63 -79 -146 -100 -185 -21 -38 -65 -119 -97 -180 -97 -177 -187 -344 -236 -436 l-46 -85 510 -510 509 -509 58 29 c31 17 91 49 132 71 82 46 409 224 535 291 44 24 134 72 200 109 66 36 152 82 191 102 l71 36 179 -90 c98 -50 240 -114 314 -143 74 -29 144 -56 155 -61 18 -7 175 -57 231 -74 14 -3 25 -19 32 -43 18 -63 66 -228 112 -377 11 -38 23 -77 25 -85 3 -13 70 -240 139 -470 13 -41 40 -132 61 -203 l38 -127 723 0 723 0 55 66 c31 36 56 68 57 72 1 13 8 37 29 107 12 39 23 77 25 85 2 8 13 47 25 85 12 39 23 77 25 85 2 8 13 44 24 80 11 36 63 211 116 390 53 179 100 332 105 340 4 8 48 28 97 44 156 50 363 137 548 229 l180 90 55 -29 c30 -16 118 -63 195 -105 125 -68 203 -110 445 -241 36 -20 119 -65 185 -100 66 -36 159 -86 206 -111 47 -26 92 -47 101 -47 18 0 1118 1103 1118 1122 0 7 -12 33 -26 58 -14 25 -45 81 -69 125 -23 44 -71 132 -105 195 -35 63 -138 255 -230 426 -93 170 -177 326 -189 345 -11 19 -21 41 -21 50 0 9 27 69 60 133 53 104 109 230 156 351 9 22 19 47 23 55 4 8 25 69 46 135 21 66 43 125 49 132 6 6 52 23 101 38 148 44 177 52 250 75 39 11 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 69 20 135 40 66 20 158 47 204 60 74 21 91 30 138 77 l53 52 0 722 0 722 -62 21 c-59 19 -325 98 -358 106 -8 2 -46 14 -85 25 -105 32 -151 46 -250 75 -49 15 -126 37 -170 50 -44 13 -118 35 -165 49 -47 13 -114 33 -150 45 l-65 20 -34 103 c-67 211 -195 507 -293 684 l-45 80 80 145 c43 79 99 182 124 229 57 106 223 413 360 665 24 44 51 95 60 113 l17 33 -499 499 c-275 275 -507 500 -515 500 -9 0 -24 -6 -35 -13 -11 -8 -58 -34 -105 -59 -90 -48 -253 -136 -447 -242 -65 -35 -145 -78 -178 -96 -92 -49 -169 -91 -302 -164 l-121 -66 -159 79 c-192 96 -331 153 -523 216 -80 26 -154 51 -166 55 -15 6 -26 29 -43 86 -33 117 -60 207 -161 544 -51 168 -102 341 -115 385 -13 44 -33 112 -45 150 -12 39 -23 78 -25 88 -2 9 -7 22 -10 27 -4 7 -260 10 -729 10 l-723 0 -49 -52z m981 -3342 c83 -16 89 -17 166 -35 248 -57 582 -231 789 -413 344 -302 557 -671 644 -1118 23 -119 27 -176 27 -362 0 -163 -9 -263 -30 -361 -6 -23 -13 -58 -16 -77 -13 -77 -89 -282 -150 -405 -178 -362 -407 -601 -735 -767 -355 -180 -750 -252 -1120 -203 -63 8 -126 17 -140 20 -14 3 -47 10 -75 16 -91 18 -310 97 -423 154 -560 280 -966 827 -1058 1425 -30 198 -30 501 1 650 3 14 8 41 11 60 31 174 128 426 228 593 120 200 230 324 406 456 216 163 515 302 745 346 73 14 203 35 240 39 83 9 412 -4 490 -18z\" />\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n            <div className={\"settings-container \" + (this.state.settingsOpen && \"show-settings\")}>\r\n                <div className={\"settings-grid \"}>\r\n                    {Object.keys(this.state.settings).map((setting) => (\r\n                        <div key={setting}>\r\n                            <input type=\"checkbox\" id={'s-' + setting} checked={this.state.settings[setting]} onChange={this.handleSetting.bind(this, setting)} />\r\n                            <label htmlFor={'s-' + setting}>{setting}</label>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n            <div className={this.classNames()}>\r\n                {this.state.scoreTree &&\r\n                    <ScoreElement\r\n                        scoreId={this.state.scoreTree.topScoreId}\r\n                        repository={this.props.repository}\r\n                        proMainContext={true}\r\n                        messenger={this.props.messenger}\r\n                        settings={this.state.settings}\r\n                    />\r\n                }\r\n            </div>\r\n            <svg style={{ display: \"none\" }}>\r\n                <symbol id=\"callout\" viewBox=\"0 0 30 30\">\r\n                    <g>\r\n                        <path d=\"M 18,28 C 10,28 4,28 2,20 L 10,2 c 0,10 0,23 8,26 z\"></path>\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n            <svg height=\"20px\" width=\"20px\" style={{ display: \"none\" }}>\r\n                <symbol id=\"expander\" viewBox=\"0 0 10 10\" >\r\n                    <g>\r\n                        <path d=\"m1 1 7 4-7 4z\" />\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './custom.scss';\r\nimport { Messenger, RepositoryLocalPure } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  scoreTreeId: string,\r\n  repository: RepositoryLocalPure,\r\n  messenger: Messenger,\r\n  settings: any\r\n}> = ({\r\n  scoreTreeId,\r\n  repository,\r\n  messenger,\r\n  settings\r\n}) => (\r\n      <>\r\n        <Menu repository={repository}\r\n          scoreTreeId={scoreTreeId}\r\n          messenger={messenger}\r\n          settings={settings}></Menu>\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action} from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    RsDatabase: any,\r\n    RsActions: Action[],\r\n    RsSettings: any,\r\n  }\r\n}\r\n\r\nasync function startApp() {\r\n  const repository = new RepositoryLocalPure();\r\n  const messenger = new Messenger();\r\n  let doc\r\n\r\n  //Populate the Reporsitory\r\n  if (window.RsDatabase) {\r\n    doc = await window.RsDatabase.doc(\"rsData\").get()\r\n  }\r\n  if (doc && doc.exists) {\r\n    repository.rsData = doc.data();\r\n  } else if (window.RsActions) {\r\n    repository.notify(window.RsActions)\r\n  } else {\r\n    window.RsSettings.DbNotAvailable = true;\r\n  }\r\n\r\n  //Look in the HTML to see what we need to prep\r\n  //Loop through the html scores and start an app for each\r\n  {\r\n    const scoreElements = document.getElementsByTagName('rs-score');\r\n    for (const scoreElement of scoreElements) {\r\n      const possibleScoreId = scoreElement.getAttribute('score-tree-Id');\r\n      let scoreTreeId = \"\";\r\n      if (possibleScoreId) {\r\n        scoreTreeId = possibleScoreId;\r\n      }\r\n\r\n      //TODO: Check if the scoreTree, Score and Claim exist. If not, create them\r\n      const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n      if (scoreTree) {\r\n        await calculateScoreActions({\r\n          actions: [new Action(scoreTree,undefined,\"add_scoreTree\")],\r\n          repository,\r\n        })\r\n      }\r\n\r\n      ReactDOM.render(<App\r\n        scoreTreeId={scoreTreeId}\r\n        repository={repository}\r\n        messenger={messenger}\r\n        settings={window.RsSettings}\r\n      />, scoreElement);\r\n\r\n    }\r\n  }\r\n\r\n\r\n}\r\nstartApp();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}