{"version":3,"sources":["EditorElement.tsx","ClaimElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorElement","props","claim","repository","getItem","claimId","Claim","claimEdge","handleSubmit","changes","Change","state","content","id","push","ClaimEdge","parentId","childId","undefined","pro","calculationInitator","notify","handleEditClose","handleContent","e","setState","currentTarget","value","handlePro","checked","handleAffects","affects","handleDelete","rsData","edges","claimEdgesByParentId","toString","index","indexOf","splice","parentClaim","JSON","parse","stringify","items","handleCancel","new","className","htmlFor","this","onChange","rows","href","type","Affects","Confidence","Relevance","role","aria-label","onClick","React","Component","commonmark","require","ClaimElement","handleDataDispatch","newItem","newState","Type","score","handleExpanderClick","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","getScoreBySourceClaimId","childClaimEedges","getClaimEdgesByParentId","messenger","subscribe","unsubscribe","proMain","proMainContext","scoreText","Math","round","confidence","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","proMainText","xmlns","height","viewBox","width","d","fill","length","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","__html","render","createMarkup","map","child","key","Menu","handleSave","window","db","doc","set","then","console","log","catch","error","App","Boolean","location","hostname","match","repo","Repository","Messenger","CalculationInitator","topClaim","ID","reversible","get","exists","data","claims","document","getElementsByTagName","possibleClaimId","getAttribute","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f084fe1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Change, Messenger, RsData } from \"@reasonscore/core\";\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n};\r\n\r\ntype MyState = {\r\n    content: string,\r\n    pro?: boolean,\r\n    affects?: string,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    claim = this.props.repository.getItem(this.props.claimId) as Claim || new Claim();\r\n    claimEdge = this.props.claimEdge\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        if (this.props.new) {\r\n            this.claim = new Claim();\r\n            this.claimEdge = new ClaimEdge(this.props.claimId, this.claim.id)\r\n        }\r\n        this.state = {\r\n            content: this.claim.content,\r\n            pro: this.claimEdge ? this.claimEdge.pro : undefined,\r\n            affects: this.claimEdge ? this.claimEdge.affects.toString() : undefined,\r\n        };\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const changes = [\r\n            new Change(new Claim(this.state.content, this.claim.id)),\r\n        ]\r\n        if (this.claimEdge) {\r\n            changes.push(new Change(new ClaimEdge(this.claimEdge.parentId, this.claimEdge.childId, undefined, this.state.pro, this.claimEdge.id)))\r\n        }\r\n        this.props.calculationInitator.notify(changes);\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    handleContent = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n        this.setState({ content: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pro: e.currentTarget.checked });\r\n    }\r\n\r\n    handleAffects = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        this.setState({ affects: e.currentTarget.value });\r\n    }\r\n\r\n    handleDelete = () => {\r\n        //To Do : move to repository\r\n        const rsData = this.props.repository.rsData as RsData\r\n        if (this.claimEdge) {\r\n            const edges = rsData.claimEdgesByParentId[this.claimEdge.parentId.toString()]\r\n            const index = edges.indexOf(this.claimEdge.id.toString(), 0);\r\n            if (index > -1) {\r\n                edges.splice(index, 1);\r\n            }\r\n            const parentClaim = JSON.parse(JSON.stringify(rsData.items[this.claimEdge.parentId.toString()][0])) as Claim\r\n            this.props.calculationInitator.notify([new Change(parentClaim)])\r\n            this.props.handleEditClose();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"content\">Content</label>\r\n                    <textarea className=\"form-control\" id=\"claim.content\" value={this.state.content} onChange={this.handleContent} rows={2}></textarea>\r\n                    <small className=\"form-text text-muted\">For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                    This is [an example](http://example.com/) inline link.</small>\r\n                </div>\r\n                {this.claimEdge &&\r\n                    < >\r\n                        <div className=\"form-group form-check\">\r\n                            <input type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.pro} onChange={this.handlePro} />\r\n                            <label> Pro Parent</label>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>\r\n                                Affects:\r\n                            <select id=\"claimEdge.affects\" value={this.state.affects} onChange={this.handleAffects}>\r\n                                    <option value={Affects.Confidence}>Confidence</option>\r\n                                    <option value={Affects.Relevance}>Relevance</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Third group\">\r\n                            <button type=\"button\" value=\"Delete\" className=\"btn btn-secondary\" onClick={this.handleDelete}>Delete</button>\r\n                        </div>\r\n                    </>\r\n                }\r\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n                        <button type=\"button\" value=\"Submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Submit</button>\r\n                    </div>\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\r\n                        <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\n//import Editor from './Editor';\r\n//import ClaimInner from './ClaimInner';\r\n//import { CSSTransitionGroup } from 'react-transition-group';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Score, Messenger, Change, Type } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\n\r\n// declare global {\r\n//     interface Window {\r\n//       commonmark: any;\r\n//     }\r\n//   }\r\n\r\n  const commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    messenger: Messenger,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childClaimEedges: ClaimEdge[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ClaimElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: this.props.claimEdge ? false : true,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: this.props.repository.getScoreBySourceClaimId(this.props.claimId),\r\n            claim: this.props.repository.getItem(this.props.claimId) as Claim || new Claim(),\r\n            childClaimEedges: this.props.repository.getClaimEdgesByParentId(this.props.claimId),\r\n            claimEdge: this.props.claimEdge,\r\n        };\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = (changes: Change[]) => {\r\n        for (const change of changes) {\r\n            const { newItem } = change;\r\n            let newState: any = {}\r\n            if (newItem.id === this.props.claimId && newItem.type === Type.claim) {\r\n                const claim = newItem as Claim;\r\n                newState.claim = claim;\r\n            }\r\n            if (newItem.id === this.state.score.id && newItem.type === Type.score) {\r\n                const score = newItem as Score;\r\n                newState.score = score;\r\n            }\r\n            if (this.state.claimEdge && newItem.id === this.state.claimEdge.id && newItem.type === Type.claimEdge) {\r\n                const claimEdge = newItem as ClaimEdge;\r\n                newState.claimEdge = claimEdge;\r\n            }\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleExpanderClick = () => {\r\n        this.setState({\r\n            childrenVisible: !this.state.childrenVisible\r\n        });\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childClaimEedges = this.props.repository.getClaimEdgesByParentId(this.props.claimId);\r\n        let proMain = props.proMainContext;\r\n        let scoreText = `${Math.round(this.state.score.confidence * 100)}%`\r\n        if (this.state.claimEdge) {\r\n            if (!this.state.claimEdge.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (this.state.claimEdge.affects === Affects.Relevance) {\r\n                scoreText = `×${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreText = `${Math.round(score.confidence * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        //Commonmark\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({safe: true});\r\n            var parsed = reader.parse(claim.content);\r\n            return {__html: writer.render(parsed)};\r\n          }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <div className={'claim ' + proMainText} >\r\n                    <div className={'editor-button'} onClick={this.handleEditButtonClick}><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 48 48\" width=\"15\"><path d=\"M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\" /><path d=\"M0 0h48v48h-48z\" fill=\"none\" /></svg></div>\r\n                    <div className={'add-button'} onClick={this.handleAddButtonClick}>+</div>\r\n                    {childClaimEedges.length > 0 &&\r\n                        <div className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} onClick={this.handleExpanderClick} >\r\n                            &#9701;\r\n                    </div>\r\n                    }\r\n                    <div className={'claim-inner'}>\r\n                        <span className={`score`}>\r\n                            {scoreText}\r\n                        </span>\r\n                        <span dangerouslySetInnerHTML={createMarkup()}>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {this.state.editorVisible &&\r\n                    <EditorElement\r\n                        claimId={claim.id}\r\n                        repository={props.repository}\r\n                        calculationInitator={props.calculationInitator}\r\n                        claimEdge={this.state.claimEdge}\r\n                        proMainContext={proMain}\r\n                        handleEditClose={this.handleEditClose}\r\n                        messenger={props.messenger}\r\n                        new={this.state.addMode}\r\n                    />}\r\n\r\n                {this.state.childrenVisible &&\r\n                    <ul className=\"children\">\r\n                        {childClaimEedges.length > 0 && childClaimEedges.map((child) => (\r\n                            <li key={child.childId.toString()}>\r\n                                <ClaimElement\r\n                                    claimId={child.childId}\r\n                                    repository={props.repository}\r\n                                    calculationInitator={props.calculationInitator}\r\n                                    claimEdge={child}\r\n                                    proMainContext={proMain}\r\n                                    messenger={props.messenger}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClaimElement;","import React from 'react';\r\nimport { Repository} from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      db: any;\r\n    }\r\n  }\r\n\r\ntype MyProps = {\r\n    repository: Repository,\r\n};\r\n\r\ntype MyState = {\r\n\r\n};\r\n\r\nclass Menu extends React.Component<MyProps, MyState> {\r\n\r\n\r\n    // constructor(props: MyProps) {\r\n    //     super(props);\r\n    // }\r\n\r\n    handleSave = () => {\r\n        window.db.doc(\"rsData\").set(JSON.parse(JSON.stringify(this.props.repository.rsData)))\r\n        .then(function() {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch(function(error: any) {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" value=\"Save\" className=\"btn btn-secondary\" onClick={this.handleSave}>Save</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport ClaimElement from './ClaimElement';\nimport { Repository, CalculationInitator, Id, Messenger } from \"@reasonscore/core\";\nimport Menu from './Menu';\n\n\nconst App: React.FC<{\n  claimId: Id,\n  repository: Repository,\n  calculationInitator: CalculationInitator,\n  messenger: Messenger\n}> = ({\n  claimId,\n  repository,\n  calculationInitator,\n  messenger\n}) => (\n      <>\n      <Menu repository={repository}></Menu>\n        <ClaimElement\n          claimId={claimId}\n          repository={repository}\n          calculationInitator={calculationInitator}\n          proMainContext={true}\n          messenger = {messenger}\n        />\n      </>\n    );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Repository, CalculationInitator, Change, Claim, ID, Messenger } from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    db: any;\r\n  }\r\n}\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n// Generate Data (Might need to move to)\r\nconst repo = new Repository();\r\nconst messenger = new Messenger();\r\nconst calculationInitator = new CalculationInitator(repo, messenger.notify);\r\nconst topClaim = new Claim(\"Not From Database\", ID(\"Yk3JDShDv0lm\"));\r\ntopClaim.reversible = true;\r\ncalculationInitator.notify([\r\n  new Change(topClaim),\r\n]);\r\n\r\nwindow.db.doc(\"rsData\").get().then(function (doc: any) {\r\n  if (doc.exists) {\r\n    repo.rsData = doc.data();\r\n    //Connect to the HTML\r\n    const claims = document.getElementsByTagName('rs-claim');\r\n    for (const claim of claims) {\r\n      const possibleClaimId = claim.getAttribute('claimId');\r\n      let claimId = ID(\"\");\r\n      if (possibleClaimId) {\r\n        claimId = ID(possibleClaimId);\r\n      }\r\n      ReactDOM.render(<App\r\n        claimId={claimId}\r\n        repository={repo}\r\n        calculationInitator={calculationInitator}\r\n        messenger={messenger}\r\n      />, claim);\r\n    }\r\n  } else {\r\n    // doc.data() will be undefined in this case\r\n    console.log(\"No such document!\");\r\n  }\r\n}).catch(function (error: any) {\r\n  console.log(\"Error getting document:\", error);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}