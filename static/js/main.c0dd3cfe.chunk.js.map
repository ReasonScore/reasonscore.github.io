{"version":3,"sources":["../../src/index.ts","../../src/newId.ts","../../../src/dataModels/Score.ts","../../../src/dataModels/Action.ts","../../../src/dataModels/RsData.ts","../../../../src/repositories/reducers/IndexReducer.ts","../../src/calculateScore.ts","../../../src/repositories/RepositoryLocalPure.ts","../../../src/dataModels/Claim.ts","../../../src/dataModels/ClaimEdge.ts","../../../src/dataModels/ScoreTree.ts","../../src/Messenger.ts","../../src/calculateScoreActions.ts","../../../src/utils/hasItemChanged.ts","../../../../src/repositories/reducers/claims.ts","../../../../src/repositories/reducers/claimEdges.ts","../../../src/repositories/RepositoryLocalBase.ts","../../../../src/repositories/reducers/scores.ts","../../../../src/repositories/reducers/scoresTrees.ts","../../../src/utils/deepClone.ts","../../../src/utils/selectNode.ts","dataModels/ClaimEdge.ts","dataModels/Claim.ts","EditorElement.tsx","selectElement.ts","ScoreElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["when","decimal","s","split","result","Math","Array","constructor","parentScoreId","sourceEdgeId","reversible","pro","affects","confidence","relevance","id","priority","content","sourceClaimId","scoreTreeId","dataId","newData","oldData","type","this","actionsLog","items","claimEdgeIdsByParentId","claimEdgeIdsByChildId","scoreIdsBySourceId","childIdsByScoreId","ScoreTreeIds","state","childScores","newScore","childScore","polarity","Object","rsData","RsData","actions","claims","claimEdges","scores","scoreTrees","RepositoryLocalBase","parentId","childId","descendantCount","topScoreId","subscriber","index","subscribers","indexOf","callback","repository","RepositoryLocalPure","calculator","calculateScore","scoreActions","claimIdsToScore","action","score","scoreTemp","claimEdge","claimEdgeTemp","Action","oldClaimEdge","scoreTree","claimScore","missingScoreActions","mainScore","Score","createBlankMissingScores","scoreTreeActions","calculateScoreDescendants","newMainScore","fractionActions","calculateFractions","generationActions","calculateGenerations","newScoreTreePartial","oldScoreTreePartial","edges","edge","u","currentScore","oldChildScores","newChildScores","newDescendantCount","newScoreFragment","newChildScore","oldChildScore","hasItemChanged","parentScore","totalRelevance","oldScore","fractionSimple","fraction","generation","scoreA","JSON","checkResult","itemChanges","newItem","partialOldItem","partialNewItem","oldItem","Claim","ClaimEdge","IndexReducer","IndexDelete","scoreIds","internalIndex","location","claimEdgeIdStrings","getClaimEdge","scoreIdStrings","getScore","childIdStrings","ScoreTree","selectedId","itemId","status","newId","checked","labelMin","labelMid","labelMax","EditorElement","props","handleSubmit","pasteClaim","push","undefined","claim","new","calculateScoreActions","then","a","messenger","notify","concat","handleEditClose","handleText","e","pathParts","currentTarget","length","setState","value","Error","handlePriority","handlePasteClaim","handlePro","proMain","proMainContext","handleProMain","handleDelete","handleCancel","newState","claimId","getClaim","parse","stringify","className","htmlFor","onChange","rows","href","role","aria-label","onClick","disabled","scoreId","React","Component","selectElement","settings","selectedNodes","selectNode","expander2s","window","document","getElementsByClassName","expander2","expander3","getElementById","replace","selectedNode","find","substring","selectedOnly","commonmark","require","ScoreElement","handleChildrenVisible","handleDataDispatch","change","getChildrenByScoreId","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","claimResult","subscribe","unsubscribe","scoreNumbers","round","scoreImpact","toLocaleString","minimumFractionDigits","maximumFractionDigits","scoreDescription","scoreDescriptions","descriptions","trailing","impact","descItem","min","desc","basedOn","childScoresSorted","sort","b","fractionalizedScore","sign","proMainText","abs","toFixed","width","height","title","style","left","viewBox","d","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","html","render","__html","createMarkup","CSSTransition","in","timeout","classNames","TransitionGroup","component","map","child","key","Menu","handleSave","rsDataWithtouUndefined","RsDatabase","doc","dbCollection","set","console","log","catch","error","handleImport","element","createElement","innerHTML","fileInput","firstChild","that","addEventListener","files","file","name","match","FileReader","onload","updatedScores","setTimeout","readAsText","alert","click","handleExport","hiddenElement","encodeURI","target","download","toggleSettings","settingsOpen","handleSetting","setting","numbers","lines","getScoreTree","selectId","startClosed","classes","maxWidth","margin","padding","opacity","DbNotAvailable","editable","saveToCloud","portData","cursor","fill","stroke","transform","keys","bind","display","App","Boolean","hostname","RsRepository","RsMessenger","Messenger","RsSettings","RsCalculateScoreActions","RsActions","get","exists","data","scoreElements","getElementsByTagName","scoreElement","possibleScoreId","getAttribute","URL","searchParams","ReactDOM","startApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0dd3cfe.chunk.js","sourcesContent":["export * from \"./calculateScore\";\r\nexport * from \"./Messenger\";\r\nexport * from \"./newId\";\r\nexport * from \"./calculateScoreActions\";\r\nexport * from \"./repositories/RepositoryLocalPure\"\r\nexport * from \"./utils/deepClone\"\r\nexport * from \"./utils/selectNode\"\r\n\r\n// Data Models\r\nexport * from \"./dataModels/Action\";\r\nexport * from \"./dataModels/ActionTypes\";\r\nexport * from \"./dataModels/Affects\";\r\nexport * from \"./dataModels/Item\";\r\nexport * from \"./dataModels/ItemTypes\";\r\nexport * from \"./dataModels/ClaimEdge\";\r\nexport * from \"./dataModels/RsData\";\r\nexport * from \"./dataModels/Score\";\r\nexport * from \"./dataModels/ScoreTree\";\r\nexport * from \"./dataModels/Claim\";\r\n","\r\nexport function newId(when: Date = new Date()): string {\r\n  // take the UTC date and convert to base 62\r\n  let decimal = 5000000000000 - when.getTime();\r\n  const s = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n  let result = '';\r\n  while (decimal >= 1) {\r\n    result = s[(decimal - (62 * Math.floor(decimal / 62)))] + result;\r\n    decimal = Math.floor(decimal / 62);\r\n  }\r\n\r\n  // Add 5 extra random characters in case multiple ids are creates at the same time\r\n  result += Array(5).join().split(',').map(() => s[(Math.floor(Math.random() * s.length))])\r\n    .join('');\r\n\r\n  return result ;\r\n}","import { newId } from \"../newId\";\r\nimport { Affects } from \"./Affects\";\r\nimport { Item } from \"./Item\";\r\nimport { ItemTypes } from \"..\";\r\n/**\r\n * Stores the score for a claim. Just a data transfer object. Does not contain any logic.\r\n */\r\nexport class Score implements Item {\r\n    type: ItemTypes = 'score'\r\n\r\n    constructor(\r\n        /** The claim to which this score belongs */\r\n        public sourceClaimId: string,\r\n        /** The top of the tree of scores that this belongs to. Used for indexing */\r\n        public scoreTreeId: string,\r\n        /** The parent of this score in the score tree graph */\r\n        public parentScoreId: string | null = null, // Use null because Firestore does not allow undefined\r\n        /** The Edge to which this score belongs */\r\n        public sourceEdgeId: string | null = null,\r\n\r\n        public reversible: boolean = false,\r\n        /** Is this score a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        /** how confident we sould be in the claim. (AKA True) */\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = \"confidence\",\r\n        public confidence: number = 1,\r\n        /** How relevent this claim is to it's parent claim. Ranges from 0 to infinity.\r\n         * A multiplier set by all the child edges that affect 'relevance'*/\r\n        public relevance: number = 1,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n        public content: string = \"\",\r\n    ) {\r\n    }\r\n\r\n    public descendantCount: number = 0;\r\n    public generation: number = 0;\r\n\r\n    /** What fraction of tree is this disregarding all scores */\r\n    public fractionSimple: number = 1;\r\n    /** What fraction of mainScore is this score and it's descendants responsible for */\r\n    public fraction: number = 1;\r\n\r\n    public childrenAveragingWeight: number = 1;\r\n    public childrenConfidenceWeight: number = 1;\r\n    public childrenRelevanceWeight: number = 1;\r\n    public childrenWeight: number = 1;\r\n    public weight: number = 1;\r\n    public percentOfWeight: number = 1;\r\n\r\n    // //TODO:Experimental\r\n    // public childrenProWeight: number = 0;\r\n    // public childrenConWeight: number = 0;\r\n    // public percentAgreeWeight: number = 0;\r\n    // public parentFractionSimple: number = 0;\r\n}\r\n\r\n","import { ActionTypes } from \"./ActionTypes\";\r\n\r\nexport class Action {\r\n    constructor(\r\n        public newData: any,\r\n        public oldData: any,\r\n        public type: ActionTypes,\r\n        public dataId: string = \"\",\r\n    ) {\r\n        if (dataId === \"\") {\r\n            this.dataId = newData.id\r\n        }\r\n    }\r\n}","import { Action } from \"./Action\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport interface Index { [searchIndex: string]: string; } //Store the string for the ID\r\nexport interface IndexArray { [searchIndex: string]: string[]; } //Store the string for the ID\r\n\r\nexport class RsData implements RsData {\r\n    constructor(\r\n        public actionsLog: { actions: Action[] }[] = [],\r\n        // Claim data\r\n        /** Stores all the current items */\r\n        public items: { [idString: string]: Item; } = {},\r\n\r\n        // Claim Indexes - Local\r\n        public claimEdgeIdsByParentId: IndexArray = {},\r\n        public claimEdgeIdsByChildId: IndexArray = {},\r\n\r\n        //Score Indexes - Local\r\n        public scoreIdsBySourceId: IndexArray = {},\r\n        public childIdsByScoreId: IndexArray = {},\r\n        public ScoreTreeIds: string[] = [],\r\n    ) {\r\n    }\r\n}\r\n","import { RsData } from \"../../dataModels/RsData\";\r\nexport function IndexReducer(state: any, index: string, keyId: string | null | undefined, id: string): RsData {\r\n    if (keyId) {\r\n        //TODO: remove this, can I use \"...state[index][keyId] || []\" below?\r\n        if (!state[index][keyId]) {\r\n            state[index][keyId] = [];\r\n        }\r\n        if (state[index][keyId].indexOf(id) == -1) {\r\n            state = {\r\n                ...state,\r\n                [index]: {\r\n                    ...state[index],\r\n                    [keyId]: [\r\n                        ...state[index][keyId],\r\n                        id\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","import { Score } from \"./dataModels/Score\";\r\n\r\nexport interface iCalculateScore {\r\n    ({ childScores }: {\r\n        /** An array of grouped edges and claims*/\r\n        childScores?: Score[];\r\n    }): Partial<Score>\r\n}\r\n\r\n/**\r\n * Calculates a new score based on the child scores passed in.\r\n */\r\nexport function calculateScore({ childScores = [], reversible = true }: {\r\n    /** An array of grouped edges and claims*/\r\n    childScores?: Score[];\r\n    /** Can this score fall below a 0 confidence (have a negative confidence) */\r\n    reversible?: boolean\r\n} = {},\r\n): Partial<Score> {\r\n    // TODO: Simplify all this math and maybe break it up between base functionality and additional scoring (like the points)\r\n    const newScore: Partial<Score> = {};\r\n    newScore.confidence = 0;\r\n    newScore.relevance = 1;\r\n    newScore.childrenAveragingWeight = 0;\r\n    newScore.childrenConfidenceWeight = 0;\r\n    newScore.childrenRelevanceWeight = 0;\r\n    newScore.childrenWeight = 0;\r\n    // newScore.childrenProWeight = 0;\r\n    // newScore.childrenConWeight = 0;\r\n\r\n\r\n    if (childScores.filter(s => s.affects === 'confidence').length < 1) {\r\n        // Defaults if there are no children\r\n        newScore.confidence = 1; // assume 100% confident\r\n        newScore.relevance = 1; // assume 100% relevant\r\n        newScore.childrenAveragingWeight = 1;\r\n        newScore.childrenConfidenceWeight = 1;\r\n        newScore.childrenRelevanceWeight = 1;\r\n        newScore.childrenWeight = 1;\r\n    }\r\n\r\n    //Gather children Weights totals for processing further down\r\n    for (const childScore of childScores) {\r\n        //Ensure calculations for non-reversible scores don't allow the confidence to be below 0\r\n        //TODO: Is this needed in the totals seciton?\r\n        let confidence = childScore.confidence\r\n        if (!childScore.reversible && childScore.confidence < 0) {\r\n            confidence = 0\r\n        }\r\n\r\n        childScore.weight = Math.abs(confidence) * childScore.relevance; // confidenceWeight * RelevanceWeight\r\n        newScore.childrenAveragingWeight += 1;\r\n        newScore.childrenConfidenceWeight += Math.abs(confidence);\r\n        newScore.childrenRelevanceWeight += childScore.relevance;\r\n        newScore.childrenWeight += childScore.weight;\r\n\r\n        // //TODO: Experimantal\r\n        // if (confidence > 0) {\r\n        //     if (childScore.pro) {\r\n        //         newScore.childrenProWeight += confidence\r\n        //     }\r\n        //     if (!childScore.pro) {\r\n        //         newScore.childrenConWeight += confidence\r\n        //     }\r\n        // } else if (confidence < 0) {\r\n        //     if (childScore.pro) {\r\n        //         newScore.childrenConWeight += confidence\r\n        //     }\r\n        //     if (!childScore.pro) {\r\n        //         newScore.childrenProWeight += confidence\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // Loop through to calculate the final scores\r\n    for (const childScore of childScores) {\r\n        const polarity = childScore.pro ? 1 : -1\r\n\r\n        if (childScore.affects === \"confidence\") {\r\n            if (newScore.childrenWeight === 0) {\r\n                childScore.percentOfWeight = 0;\r\n                newScore.confidence = 0;\r\n            } else {\r\n\r\n                childScore.percentOfWeight =\r\n                    childScore.weight /\r\n                    // @ts-ignore\r\n                    newScore.childrenWeight;\r\n\r\n                // @ts-ignore\r\n                newScore.confidence +=\r\n                    childScore.percentOfWeight *\r\n                    childScore.confidence * polarity;\r\n            }\r\n        }\r\n\r\n        if (childScore.affects === \"relevance\") {\r\n            // Process Relevance child claims\r\n\r\n            let confidence = childScore.confidence\r\n            if (!childScore.reversible && childScore.confidence < 0) {\r\n                confidence = 0\r\n            }\r\n\r\n            if (newScore.relevance == undefined) {\r\n                newScore.relevance = 1;\r\n            }\r\n\r\n            if (childScore.pro) {\r\n                newScore.relevance += confidence;\r\n            } else {\r\n                newScore.relevance -= confidence / 2;\r\n            }\r\n        }\r\n\r\n        let confidence = childScore.confidence\r\n        if (!childScore.reversible && childScore.confidence < 0) {\r\n            confidence = 0\r\n        }\r\n        // if (childScore.pro) {\r\n        //     childScore.percentAgreeWeight = confidence / newScore.childrenProWeight\r\n        // } else {\r\n        //     childScore.percentAgreeWeight = confidence / newScore.childrenConWeight\r\n        // }\r\n    }\r\n\r\n\r\n    if (Object.is(newScore.confidence, -0)) {\r\n        // Protect against negative zero \r\n        newScore.confidence = 0;\r\n    }\r\n\r\n    return newScore;\r\n}\r\n\r\n","import { Action } from \"../dataModels/Action\";\r\nimport { RsData } from \"../dataModels/RsData\";\r\nimport { iRepository } from \"../dataModels/iRepository\";\r\nimport { claims } from \"./reducers/claims\";\r\nimport { claimEdges } from \"./reducers/claimEdges\";\r\nimport { RepositoryLocalBase } from \"./RepositoryLocalBase\";\r\nimport { scores } from \"./reducers/scores\";\r\nimport { scoreTrees } from \"./reducers/scoresTrees\";\r\n\r\n\r\nexport class RepositoryLocalPure extends RepositoryLocalBase implements iRepository {\r\n\r\n    constructor(\r\n        public rsData: RsData = new RsData()\r\n    ) {\r\n        super(rsData);\r\n    }\r\n\r\n    async notify(actions: Action[]) {\r\n        this.rsData.actionsLog.push({actions:actions}); //TODO: put logs back in\r\n        for (const action of actions) {\r\n            this.rsData = claims(this.rsData, action);\r\n            this.rsData = claimEdges(this.rsData, action);\r\n            this.rsData = scores(this.rsData, action);\r\n            this.rsData = scoreTrees(this.rsData, action);\r\n        }\r\n    }\r\n\r\n}","import { ItemTypes } from \"./ItemTypes\";\r\nimport { newId } from \"../newId\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport class Claim implements Item {\r\n    type: ItemTypes = 'claim'\r\n\r\n    constructor(\r\n        public content: string = \"\",\r\n        public id: string = newId(),\r\n        public reversible: boolean = false,\r\n    ) {\r\n    }\r\n}\r\n","import { Affects } from \"./Affects\"\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport { newId } from \"../newId\";\r\n/**\r\n * Stores the relationship between a claim and an item (usually another claim).\r\n * This is directional as the edge points from one claim to it's parent.\r\n * This is just a data transfer object so it should have no logic in it\r\n * and only JSON compatible types string, number, object, array, boolean\r\n */\r\nexport class ClaimEdge {\r\n    type: ItemTypes = 'claimEdge'\r\n\r\n    constructor(\r\n        /** The ID for the parent claim this edge points to */\r\n        public parentId: string,\r\n        /** The ID for the child claim this edge points from */\r\n        public childId: string,\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = 'confidence',\r\n        /** Is the child claim a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n    ) {\r\n    }\r\n}\r\n","import { newId } from \"../newId\";\r\nimport { Item } from \"./Item\";\r\nimport { ItemTypes } from \"..\";\r\n/**\r\n * Represents an intentional top of a tree of scores.\r\n */\r\nexport class ScoreTree implements Item {\r\n    type: ItemTypes = 'scoreTree'\r\n\r\n    constructor(\r\n        /** The claim to which this score belongs */\r\n        public sourceClaimId: string,\r\n        /** The top of the tree of scores that this belongs to. Used for indexing */\r\n        public topScoreId: string,\r\n        /** how confident we sould be in the claim. (AKA True) */\r\n        public confidence: number = 1,\r\n        public id: string = newId(),\r\n        public descendantCount: number = 0,\r\n    ) {\r\n    }\r\n}","import { Action } from \"./dataModels/Action\";\r\n\r\nexport class Messenger {\r\n    public readonly subscribers: { (changes: Action[]): void; }[] = []\r\n    public readonly actionsLog: Action[][] = [];\r\n\r\n    subscribe(callback: (actions: Action[]) => void): void {\r\n        this.subscribers.push(callback)\r\n    }\r\n\r\n    unsubscribe(callback: (actions: Action[]) => void): void {\r\n        const index = this.subscribers.indexOf(callback, 0);\r\n        if (index > -1) {\r\n            this.subscribers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /** this function can be called by outside code to notfy this repository of changes */\r\n    notify = (actions: Action[]) => {\r\n        this.actionsLog.push(actions);\r\n        for (const subscriber of this.subscribers) {\r\n            subscriber(actions);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import { Score } from \"./dataModels/Score\";\r\nimport { hasItemChanged } from \"./utils/hasItemChanged\";\r\nimport { Action } from \"./dataModels/Action\";\r\nimport { iCalculateScore, calculateScore } from \"./calculateScore\";\r\nimport { iRepository } from \"./dataModels/iRepository\";\r\nimport { ClaimEdge } from \"./dataModels/ClaimEdge\";\r\nimport { RepositoryLocalPure } from \"./repositories/RepositoryLocalPure\";\r\nimport { ScoreTree } from \".\";\r\n\r\n/**\r\n * Calculates the score actions based on a list of actions\r\n */\r\nexport async function calculateScoreActions({ actions = [], repository = new RepositoryLocalPure(), calculator = calculateScore }: {\r\n    /** An array of actions, usually on claims or edges that incluse no scores*/\r\n    actions?: Action[];\r\n    /** The repository used to get context for the actions */\r\n    repository?: iRepository;\r\n    /** The function used to calculate the scores */\r\n    calculator?: iCalculateScore;\r\n} = {},\r\n) {\r\n    const scoreActions: Action[] = [];\r\n    const claimIdsToScore: string[] = [];\r\n    const ScoreTreeIds: string[] = [];\r\n\r\n    await repository.notify(actions);\r\n    for (const action of actions) {\r\n\r\n        // find claims that may need scores changed\r\n        if (action.type == 'add_claim' || action.type == 'modify_claim') {\r\n            claimIdsToScore.push(action.dataId)\r\n        }\r\n\r\n        if (action.type == \"add_score\") {\r\n            let score = action.newData as Score;\r\n            if (!score.parentScoreId) {\r\n                const scoreTemp = await repository.getScore(action.dataId)\r\n                if (scoreTemp) {\r\n                    score = scoreTemp;\r\n                }\r\n            }\r\n\r\n            claimIdsToScore.push(score.sourceClaimId)\r\n        }\r\n\r\n        //Add scores if edges adds new children to claims in score trees\r\n        if (action.type == 'add_claimEdge' || action.type == 'modify_claimEdge') {\r\n            let claimEdge = action.newData as ClaimEdge;\r\n            if (!claimEdge.parentId) {\r\n                const claimEdgeTemp = await repository.getClaimEdge(action.dataId)\r\n                if (claimEdgeTemp) {\r\n                    claimEdge = claimEdgeTemp;\r\n                }\r\n            }\r\n            claimIdsToScore.push(claimEdge.parentId)\r\n        }\r\n\r\n        //TODO: If an edge changes then modify the existing scores to match\r\n        if (action.type == 'modify_claimEdge') {\r\n            let claimEdge = await repository.getClaimEdge(action.dataId)\r\n            claimEdge = { ...claimEdge, ...action.newData }\r\n            if (claimEdge) {\r\n                action.newData as ClaimEdge;\r\n                const scores = await repository.getScoresBySourceId(claimEdge.id)\r\n                for (const score of scores) {\r\n                    //TODO: Where should I put this? It is modifying am object. If it is reactive i should just change the data. If pure it should be a new object.\r\n                    //For now I will modify it but it may not trigger updates in a pure library (React)\r\n                    //This change should also probably be centralized somewhere to reduce the chance of inconsistent bugs. I think it will happen in multiple paces\r\n                    //Nope, it is an action so it should always be a new object. If it goes into a reactive respoitory then it will modify the actual object\r\n                    //Should I group these actions or just throw them in one at a time like I am doing\r\n                    if (score.pro != claimEdge.pro ||\r\n                        score.affects != claimEdge.affects) {\r\n                        const action = new Action({\r\n                            pro: claimEdge.pro,\r\n                            affects: claimEdge.affects,\r\n                            priority: claimEdge.priority,\r\n                        }, score, \"modify_score\", score.id)\r\n                        scoreActions.push(action);\r\n                        await repository.notify([action]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (action.type == 'delete_claimEdge') {\r\n            const oldClaimEdge = action.oldData as ClaimEdge;\r\n            claimIdsToScore.push(oldClaimEdge.parentId)\r\n        }\r\n\r\n        if (action.type == 'add_scoreTree') {\r\n            const scoreTree = action.newData as ScoreTree;\r\n            ScoreTreeIds.push(scoreTree.id)\r\n        }\r\n\r\n    }\r\n\r\n    //Walk up the scores for each claim to the top\r\n    for (const claimId of claimIdsToScore) {\r\n        for (const claimScore of await repository.getScoresBySourceId(claimId)) {\r\n            ScoreTreeIds.push(claimScore.scoreTreeId)\r\n        }\r\n    }\r\n\r\n    //Re-calc all Score Trees with possible changed claims\r\n\r\n    for (const scoreTreeId of ScoreTreeIds) {\r\n        const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n        if (scoreTree) {\r\n            const missingScoreActions: Action[] = [];\r\n\r\n            let mainScore = await repository.getScore(scoreTree.topScoreId);\r\n            if (!mainScore) {\r\n                mainScore = new Score(scoreTree.sourceClaimId, scoreTree.id);\r\n                mainScore.id = scoreTree.topScoreId;\r\n                missingScoreActions.push(new Action(mainScore, undefined, \"add_score\"));\r\n            }\r\n\r\n            await createBlankMissingScores(repository, scoreTree.topScoreId, scoreTree.sourceClaimId || \"\", missingScoreActions, scoreTreeId)\r\n            if (missingScoreActions.length > 0) {\r\n                await repository.notify(missingScoreActions)\r\n            }\r\n\r\n            const scoreTreeActions: Action[] = [];\r\n            const newMainScore = await calculateScoreDescendants(repository, mainScore, calculator, scoreTreeActions);\r\n            if (missingScoreActions.length > 0) {\r\n                await repository.notify(scoreTreeActions)\r\n            }\r\n\r\n            const fractionActions: Action[] = [];\r\n            await calculateFractions(repository, mainScore, fractionActions)\r\n            if (fractionActions.length > 0) {\r\n                await repository.notify(fractionActions)\r\n            }\r\n\r\n            const generationActions: Action[] = [];\r\n            await calculateGenerations(repository, mainScore.id, generationActions, 0)\r\n            if (generationActions.length > 0) {\r\n                await repository.notify(generationActions)\r\n            }\r\n\r\n            scoreActions.push(\r\n                ...missingScoreActions,\r\n                ...scoreTreeActions,\r\n                ...fractionActions,\r\n                ...generationActions,\r\n            )\r\n\r\n            if (scoreTree.descendantCount != newMainScore.descendantCount) {\r\n                let newScoreTreePartial: Partial<ScoreTree> = { descendantCount: newMainScore.descendantCount }\r\n                let oldScoreTreePartial: Partial<ScoreTree> = { descendantCount: scoreTree.descendantCount }\r\n                scoreActions.push(\r\n                    new Action(newScoreTreePartial, oldScoreTreePartial, \"modify_scoreTree\", scoreTree.id)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO: Review this decision: Feed the score actions back into the repository so this repository is up to date in case it is used \r\n    await repository.notify(scoreActions);\r\n\r\n    return scoreActions;\r\n}\r\n\r\n//Create Blank Missing Scores\r\nasync function createBlankMissingScores(repository: iRepository, currentScoreId: string, currentClaimId: string, actions: Action[], scoreTreeId: string) {\r\n    const edges = await repository.getClaimEdgesByParentId(currentClaimId)\r\n    const scores = await repository.getChildrenByScoreId(currentScoreId)\r\n    for (const edge of edges) {\r\n        //see if there is a matching child score for the child edge\r\n        let score = scores.find(({ sourceClaimId }) => sourceClaimId === edge.childId);\r\n        if (!score) {\r\n            //Create a new Score and attach it to it's parent\r\n            const u = undefined;\r\n            score = new Score(edge.childId, scoreTreeId, currentScoreId, edge.id, undefined, edge.pro, edge.affects, u, u, u, edge.priority);\r\n            actions.push(new Action(score, undefined, \"add_score\", score.id));\r\n        }\r\n        //Recurse and through children\r\n        await createBlankMissingScores(repository, score.id, edge.childId, actions, scoreTreeId);\r\n    }\r\n}\r\n\r\n//This function assume that all scores already exist\r\nasync function calculateScoreDescendants(repository: iRepository, currentScore: Score, calculator: iCalculateScore = calculateScore, actions: Action[]) {\r\n    const oldChildScores = await repository.getChildrenByScoreId(currentScore.id)\r\n    const newChildScores: Score[] = [];\r\n    let newDescendantCount = 0;\r\n\r\n    for (const oldChildScore of oldChildScores) { //Calculate Children\r\n        //TODO: remove any scores to calculate based on formulas that exclude scores\r\n        const newScore = await calculateScoreDescendants(repository, oldChildScore, calculator, actions);\r\n        newChildScores.push(newScore);\r\n        newDescendantCount += newScore.descendantCount + 1;\r\n    }\r\n\r\n    const newScoreFragment = calculator({\r\n        childScores: newChildScores,\r\n    })\r\n\r\n    //update any newChildScores that changed\r\n    for (const newChildScore of newChildScores) {\r\n        // TODO: Is this slow accessing the data store again for this data or do we assume it is cached if it is in an external DB\r\n        const oldChildScore = await repository.getScore(newChildScore.id);\r\n        if (oldChildScore && hasItemChanged(oldChildScore, newChildScore)) {\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n        }\r\n    }\r\n\r\n    //TODO: Modify the newScore based on any formulas\r\n    const newScore = {\r\n        ...currentScore,\r\n        ...newScoreFragment,\r\n        descendantCount: newDescendantCount\r\n    }\r\n    if (hasItemChanged(currentScore, newScore)) {\r\n        actions.push(new Action(newScore, undefined, \"modify_score\"));\r\n    }\r\n\r\n    return newScore;\r\n}\r\n\r\nasync function calculateFractions(repository: iRepository, parentScore: Partial<Score>, actions: Action[]) {\r\n    if (parentScore.id != undefined &&\r\n        parentScore.fraction != undefined &&\r\n        parentScore.fractionSimple != undefined) {\r\n        const oldChildScores = await repository.getChildrenByScoreId(parentScore.id)\r\n\r\n        //Count up total relevance\r\n        let totalRelevance = 0\r\n        for (const oldScore of oldChildScores) {\r\n            if (oldScore.affects === \"confidence\") {\r\n                totalRelevance += oldScore.relevance\r\n            }\r\n        }\r\n        if (totalRelevance === 0) {\r\n            totalRelevance = 1;\r\n        }\r\n\r\n        for (const oldChildScore of oldChildScores) {\r\n            const newChildScore: Partial<Score> = {\r\n                ...oldChildScore,\r\n                fractionSimple: (oldChildScore.relevance / totalRelevance) * parentScore.fractionSimple,\r\n                fraction: parentScore.fraction * oldChildScore.percentOfWeight,\r\n                // parentFractionSimple: parentScore.fractionSimple,\r\n            }\r\n            if (newChildScore.fractionSimple != oldChildScore.fractionSimple ||\r\n                newChildScore.fraction != oldChildScore.fraction) {\r\n                actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n            }\r\n            await calculateFractions(repository, newChildScore, actions);\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// TODO: factor out duplicate code of these calculate functions. maybe mae an array of items to process...\r\nasync function calculateGenerations(repository: iRepository, parentScoreId: string, actions: Action[], generation: number) {\r\n    const oldChildScores = await repository.getChildrenByScoreId(parentScoreId)\r\n    generation++;\r\n\r\n    for (const oldChildScore of oldChildScores) {\r\n        if (oldChildScore.generation != generation) {\r\n            const newChildScore = { ...oldChildScore, generation: generation }\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n        }\r\n        await calculateGenerations(repository, oldChildScore.id, actions, generation)\r\n    }\r\n}\r\n","import { Item } from \"../dataModels/Item\";\r\nimport { Action } from \"../dataModels/Action\";\r\nimport { ActionTypes } from \"..\";\r\n\r\n/** Compare two scores to see if they are different in what the score is.\r\n *  Just compares confidence and relavance\r\n */\r\nexport function hasItemChanged(scoreA: Item, scoreB: Item) {\r\n    return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) ===\r\n        JSON.stringify(scoreB, Object.keys(scoreB).sort()));\r\n}\r\n\r\n/** Compares two data objects and create apropriate change objects if necessary\r\n * If a property exists on old but not new, it is ignored as the new can be a partial and is not expected to have everything\r\n * If the propert exists on the new but not the old. It retunrs the property on the partialNewItem object\r\n * If the property exists on both items and has the same value, it is ignored\r\n * If the property exists on both items but the value differs, it is added to both partials in the return\r\n * If no changes are detected then undefined is returned so it can be easily checked.\r\n */\r\nexport function itemChanges(newItem: any, oldItem: any ) {\r\n    const partialOldItem: any = {};\r\n    const partialNewItem: any = {};\r\n\r\n    //Loop through the old item properties to see if they changed in the new item\r\n    for (const prop in oldItem) {\r\n        if (oldItem[prop] !== newItem[prop]) {\r\n            partialOldItem[prop] = oldItem[prop];\r\n            partialNewItem[prop] = newItem[prop];\r\n        }\r\n    }\r\n\r\n    //Loop thgout the new item properties to see if there are any new props that should be included\r\n    for (const prop in newItem) {\r\n        if (oldItem[prop] === undefined) {\r\n            partialNewItem[prop] = newItem[prop];\r\n        }\r\n    }\r\n\r\n    if (Object.keys(partialNewItem).length > 0) {\r\n        return {\r\n            partialNewItem: partialNewItem,\r\n            partialOldItem: partialOldItem\r\n        }\r\n    } else\r\n        return undefined\r\n}\r\n\r\nexport function pushActionIfChanged(actions: Action[], newItem: any, OldItem: any, type: ActionTypes, itemId?: string) {\r\n    const checkResult = itemChanges(newItem, OldItem);\r\n    if (checkResult) {\r\n        actions.push(new Action(checkResult.partialNewItem, checkResult.partialNewItem, type, itemId));\r\n    }\r\n}\r\n","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { Claim } from \"../../dataModels/Claim\"\r\n\r\nexport function claims(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_claim\":\r\n        case \"sync_claim\":\r\n        case \"modify_claim\":\r\n            {\r\n                let newItem = state.items[action.dataId] as Claim\r\n                if (!newItem){\r\n                    newItem = new Claim(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n                \r\n                return {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                } as RsData\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData, IndexArray } from \"../../dataModels/RsData\"\r\nimport { IndexReducer } from \"./IndexReducer\"\r\nimport { ClaimEdge } from \"../../dataModels/ClaimEdge\";\r\nimport { Score } from \"../../dataModels/Score\";\r\n\r\nexport function claimEdges(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_claimEdge\":\r\n        case \"modify_claimEdge\":\r\n        case \"sync_claimEdge\":\r\n            {\r\n                let newItem = state.items[action.dataId] as ClaimEdge\r\n                if (!newItem){\r\n                    newItem = new ClaimEdge(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                state = IndexReducer(state, \"claimEdgeIdsByChildId\", newItem.childId, action.dataId);\r\n                state = IndexReducer(state, \"claimEdgeIdsByParentId\", newItem.parentId, action.dataId);\r\n                return state\r\n            }\r\n        case \"delete_claimEdge\":\r\n            {\r\n                const claimEdge = state.items[action.dataId] as ClaimEdge;\r\n                //TODO: Check that I'm not deleting anythign I shouldn't or deleting something twice?\r\n                //TODO: This leaves a lot of orphaned scores and claim and claimedges\r\n                //TODO: Probably should comment what this is doing\r\n                delete state.items[action.dataId];\r\n                state = IndexDelete(state, state.claimEdgeIdsByChildId, claimEdge.childId, action.dataId);\r\n                state = IndexDelete(state, state.claimEdgeIdsByParentId, claimEdge.parentId, action.dataId);\r\n\r\n                const scoreIds = state.scoreIdsBySourceId[action.dataId]\r\n                for (const scoreId of scoreIds) {\r\n                    const score = state.items[scoreId] as Score;\r\n                    delete state.items[scoreId];\r\n                    delete state.scoreIdsBySourceId[action.dataId];\r\n                    delete state.childIdsByScoreId[scoreId];\r\n                    if (score.parentScoreId) {\r\n                        state = IndexDelete(state, state.childIdsByScoreId, score.parentScoreId, scoreId);\r\n                    }\r\n                    state = IndexDelete(state, state.scoreIdsBySourceId, score.sourceClaimId, scoreId);\r\n                }\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function IndexDelete(state: any, index: IndexArray, keyId: string, id: string): RsData {\r\n    const internalIndex = index[keyId]\r\n    const location = internalIndex.indexOf(id, 0);\r\n    if (location > -1) {\r\n        internalIndex.splice(location, 1);\r\n    }\r\n\r\n    return state;\r\n}","import { ClaimEdge } from \"../dataModels/ClaimEdge\";\r\nimport { Score } from \"../dataModels/Score\";\r\nimport { RsData } from \"../dataModels/RsData\";\r\nimport { Action } from \"../dataModels/Action\";\r\nimport { Claim } from \"../dataModels/Claim\";\r\nimport { ScoreTree } from \"../dataModels/ScoreTree\";\r\n\r\n\r\nexport class RepositoryLocalBase {\r\n\r\n    constructor(\r\n        public rsData: RsData = new RsData()\r\n    ) {\r\n    }\r\n\r\n    async getClaim(id: string): Promise<Claim | undefined> {\r\n        return this.rsData.items[id] as Claim;\r\n    }\r\n    async getClaimEdge(id: string): Promise<ClaimEdge | undefined> {\r\n        return this.rsData.items[id] as ClaimEdge;\r\n    }\r\n    async getScore(id: string): Promise<Score | undefined> {\r\n        return this.rsData.items[id] as Score;\r\n    }\r\n    async getScoreTree(id: string): Promise<ScoreTree | undefined> {\r\n        return this.rsData.items[id] as ScoreTree;\r\n    }\r\n    async getClaimEdgesByParentId(parentId: string): Promise<ClaimEdge[]> {\r\n        const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];\r\n        const claimEdges: ClaimEdge[] = [];\r\n        if (claimEdgeIdStrings) {\r\n            for (const claimEdgeIdString of claimEdgeIdStrings) {\r\n                const claimEdge = await this.getClaimEdge(claimEdgeIdString)\r\n                if (claimEdge) claimEdges.push(claimEdge)\r\n            }\r\n        }\r\n        return claimEdges\r\n    }\r\n    async getClaimEdgesByChildId(childId: string): Promise<ClaimEdge[]> {\r\n        const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];\r\n        const claimEdges: ClaimEdge[] = [];\r\n        for (const claimEdgeIdString of claimEdgeIdStrings) {\r\n            const claimEdge = await this.getClaimEdge(claimEdgeIdString)\r\n            if (claimEdge) claimEdges.push(claimEdge)\r\n        }\r\n        return claimEdges\r\n    }\r\n    async getScoresBySourceId(sourceClaimId: string): Promise<Score[]> {\r\n        const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];\r\n        const scores: Score[] = [];\r\n        if (scoreIdStrings) {\r\n            for (const scoreIdString of scoreIdStrings) {\r\n                const score = await this.getScore(scoreIdString)\r\n                if (score) scores.push(score)\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    async getChildrenByScoreId(parentScoreId: string): Promise<Score[]> {\r\n        const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];\r\n        const scores: Score[] = [];\r\n        if (childIdStrings) {\r\n            for (const scoreIdString of childIdStrings) {\r\n                const score = await this.getScore(scoreIdString)\r\n                if (score) scores.push(score)\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    public readonly log: Action[][] = [];\r\n\r\n}","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { Score } from \"../../dataModels/Score\"\r\nimport { IndexReducer } from \"./IndexReducer\";\r\n\r\nexport function scores(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_score\":\r\n        case \"modify_score\":\r\n        case \"sync_score\":\r\n            {\r\n                let newItem = state.items[action.dataId] as Score\r\n                if (!newItem){\r\n                    newItem = new Score(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                //TODO: Do I need to stop recreating the state so many times in this reducer?\r\n                state = IndexReducer(state, \"childIdsByScoreId\", newItem.parentScoreId, action.dataId);\r\n                state = IndexReducer(state, \"scoreIdsBySourceId\", newItem.sourceClaimId, action.dataId);\r\n                state = IndexReducer(state, \"scoreIdsBySourceId\", newItem.sourceEdgeId, action.dataId);\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { ScoreTree } from \"../../dataModels/ScoreTree\";\r\nimport { IndexReducer } from \"./IndexReducer\";\r\n\r\nexport function scoreTrees(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_scoreTree\":\r\n        case \"modify_scoreTree\":\r\n            {\r\n                let newItem = state.items[action.dataId] as ScoreTree\r\n                if (!newItem) {\r\n                    newItem = new ScoreTree(\"\", \"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = { ...newItem, ...action.newData }\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                //TODO: Do I need to stop recreating the state so many times in this reducer?\r\n                state = IndexReducer(state, \"ScoreTreeIds\", newItem.id, action.dataId);\r\n                return state as RsData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","export function deepClone<T>(item: T): T{\r\n    return JSON.parse(JSON.stringify(item))\r\n}\r\n\r\n","import { RsData } from \"../dataModels/RsData\";\r\nimport { Score } from \"../dataModels/Score\";\r\n\r\nexport function selectNode(selectedId: string, rsData: RsData) {\r\n    const result: selectedStatus[] = []\r\n    result.push({ itemId: selectedId, status: \"selected\" })\r\n\r\n    // Walk up the tree and get ancestors\r\n    let lastScoreId\r\n    let parentScoreId = (rsData.items[selectedId] as Score)?.parentScoreId\r\n    while (parentScoreId != undefined) {\r\n        result.push({ itemId: parentScoreId, status: \"ancestor\" })\r\n        parentScoreId = (rsData.items[parentScoreId] as Score).parentScoreId\r\n    }\r\n\r\n    //get the children\r\n    const children = rsData.childIdsByScoreId[selectedId];\r\n    if (children) {\r\n        for (const childId of rsData.childIdsByScoreId[selectedId]) {\r\n            result.push({ itemId: childId, status: \"child\" })\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport type selectedStatus = {\r\n    itemId: string,\r\n    status: selectedStatuses\r\n}\r\n\r\nexport type selectedStatuses =\r\n    \"selected\" |\r\n    \"ancestor\" |\r\n    \"child\" |\r\n    \"main\"","import { ItemTypes, Affects, newId } from \"@reasonscore/core\";\r\n\r\n/**\r\n * Stores the relationship between a claim and an item (usually another claim).\r\n * This is directional as the edge points from one claim to it's parent.\r\n * This is just a data transfer object so it should have no logic in it\r\n * and only JSON compatible types string, number, object, array, boolean\r\n */\r\nexport class ClaimEdge {\r\n    type: ItemTypes = 'claimEdge'\r\n    checked: any;\r\n\r\n    constructor(\r\n        /** The ID for the parent claim this edge points to */\r\n        public parentId: string,\r\n        /** The ID for the child claim this edge points from */\r\n        public childId: string,\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = 'confidence',\r\n        /** Is the child claim a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaimEdge {\r\n    type: ItemTypes\r\n\r\n    /** The ID for the parent claim this edge points to */\r\n    parentId: string,\r\n    /** The ID for the child claim this edge points from */\r\n    childId: string,\r\n    /** How the child affects the parent score */\r\n    affects: Affects,\r\n    /** Is the child claim a pro of it's parent (false if it is a con) */\r\n    pro: boolean,\r\n    id: string,\r\n    priority: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}","import { ItemTypes, Item, newId } from \"@reasonscore/core\";\r\n\r\nexport class Claim implements iClaim, Item {\r\n    type: ItemTypes = 'claim'\r\n    labelMin: string = \"\";\r\n    labelMid: string = \"\";\r\n    labelMax: string = \"\";\r\n    priority: string = \"\";\r\n\r\n    constructor(\r\n        public content: string = \"\",\r\n        public id: string = newId(),\r\n        public reversible: boolean = false,\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaim {\r\n    type: ItemTypes,\r\n    id: string,\r\n    reversible: boolean,\r\n    content: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { RepositoryLocalPure, calculateScoreActions, Action, Messenger } from \"@reasonscore/core\";\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\n\r\ntype MyProps = {\r\n    claimId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    scoreId: string,\r\n    new?: boolean,\r\n    claimEdge?: ClaimEdge\r\n};\r\n\r\ntype MyState = {\r\n    pasteClaim: string,\r\n    proMain: boolean,\r\n    claim?: Claim,\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            proMain: true,\r\n            pasteClaim: \"\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const newState = {} as MyState;\r\n        if (this.props.new) {\r\n            newState.claim = new Claim();\r\n            newState.claimEdge = new ClaimEdge(this.props.claimId, newState.claim.id);\r\n        } else {\r\n            const claim = await this.props.repository.getClaim(this.props.claimId) as Claim;\r\n            if (claim) {\r\n                newState.claim = claim;\r\n            }\r\n            if (this.props.claimEdge) {\r\n                newState.claimEdge = JSON.parse(JSON.stringify(this.props.claimEdge)) //TODO: Replace with deep clone function\r\n            }\r\n        }\r\n\r\n        if (newState.claimEdge) {\r\n            newState.proMain = this.props.proMainContext ? newState.claimEdge.pro : !newState.claimEdge.pro;\r\n        }\r\n\r\n        //TODO: Temp for items with blank properties. This correctes error: A component is changing an uncontrolled input of type text to be controlled\r\n        if (newState.claim) {\r\n            if (newState.claim.labelMin === undefined) { newState.claim.labelMin = \"\" }\r\n            if (newState.claim.labelMid === undefined) { newState.claim.labelMid = \"\" }\r\n            if (newState.claim.labelMax === undefined) { newState.claim.labelMax = \"\" }\r\n            if (newState.claimEdge) {\r\n                if (newState.claimEdge.priority === undefined) { newState.claim.priority = \"\" }\r\n            }\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const actions: Action[] = [];\r\n        if (this.state.pasteClaim && this.state.claimEdge) {\r\n            if (this.state.claimEdge) {\r\n                const claimEdge = this.state.claimEdge;\r\n                claimEdge.childId = this.state.pasteClaim;\r\n                actions.push(\r\n                    new Action(\r\n                        this.state.claimEdge, undefined, \"add_claimEdge\"\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            actions.push(\r\n                new Action(\r\n                    this.state.claim,\r\n                    undefined, this.props.new ? \"add_claim\" : \"modify_claim\"\r\n                )\r\n            )\r\n            if (this.state.claimEdge) {\r\n                actions.push(new Action(\r\n                    this.state.claimEdge, undefined,\r\n                    this.props.new ? \"add_claimEdge\" : \"modify_claimEdge\"\r\n                ))\r\n            }\r\n        }\r\n\r\n        calculateScoreActions({\r\n            actions: actions,\r\n            repository: this.props.repository\r\n        }).then(async (scoreActions) => {\r\n            await this.props.messenger.notify(actions.concat(scoreActions));\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleText = (e: React.FormEvent<HTMLInputElement> |\r\n        React.FormEvent<HTMLTextAreaElement> |\r\n        React.FormEvent<HTMLSelectElement>) => {\r\n        const pathParts = e.currentTarget.id.split(\".\");\r\n        const state = this.state as any;\r\n        if (pathParts.length === 2) {\r\n            this.setState({\r\n                [pathParts[0]]: {\r\n                    ...state[pathParts[0]],\r\n                    [pathParts[1]]: e.currentTarget.value\r\n                }\r\n            } as any);\r\n        } else if (pathParts.length === 1) {\r\n            this.setState({\r\n                [pathParts[0]]: e.currentTarget.value\r\n            } as any);\r\n        } else {\r\n            throw new Error(\"id expectes 1 or 2 items in path. \" + pathParts.length + \" were received.\");\r\n        }\r\n\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ claimEdge: { priority: e.currentTarget.value } as any });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: e.currentTarget.checked,\r\n            } as any,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: pro,\r\n            } as any,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        if (this.state.claimEdge) {\r\n            const actions: Action[] = [];\r\n            actions.push(\r\n                new Action(\r\n                    undefined,\r\n                    this.state.claimEdge, \"delete_claimEdge\", this.state.claimEdge.id\r\n                )\r\n            )\r\n\r\n            calculateScoreActions({\r\n                actions: actions,\r\n                repository: this.props.repository\r\n            }).then(async (scoreActions) => {\r\n                await this.props.messenger.notify(actions.concat(scoreActions));\r\n                this.props.handleEditClose();\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.claim &&\r\n                    <form className=\"container\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"claim.content\">Content</label>\r\n                            <textarea className=\"form-control\" id=\"claim.content\" value={this.state.claim.content} onChange={this.handleText} rows={2}></textarea>\r\n                            <small className=\"form-text text-muted\">\r\n                                For hyperlinks us <a href=\"https://commonmark.org/help/\">commonMark</a> syntax:\r\n                                This is [an example](http://example.com/) inline link.</small>\r\n                        </div>\r\n                        <div className=\"form-row  edit-lines\">\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMin\">Minimum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMin\" value={this.state.claim.labelMin} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMid\">Middle Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMid\" value={this.state.claim.labelMid} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMax\">Maximum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMax\" value={this.state.claim.labelMax} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.state.claimEdge &&\r\n                            < >\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4 mr-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.claimEdge.pro} onChange={this.handlePro} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"claimEdge.pro\">Pro Parent</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"proMain\">Pro Main</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.affects\">Affects</label>\r\n                                        <select className=\"form-control\" id=\"claimEdge.affects\" value={this.state.claimEdge.affects} onChange={this.handleText}>\r\n                                            <option value={\"confidence\"}>Confidence</option>\r\n                                            <option value={\"relevance\"}>Relevance</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.claimEdge.priority} onChange={this.handlePriority}></input>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save Locally\">\r\n                                <button type=\"button\" value=\"Save Locally\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Save Locally</button>\r\n                            </div>\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Cancel\">\r\n                                <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                            </div>\r\n                            {this.props.claimEdge &&\r\n                                <div className=\"btn-group ml-5\" role=\"group\" aria-label=\"Delete\">\r\n                                    <button type=\"button\" value=\"Delete\" className=\"btn btn btn-outline-danger\" onClick={this.handleDelete}>Delete</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        \r\n                        <br></br>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-6\">\r\n                                <label htmlFor=\"claim.claimId\">Claim ID</label>\r\n                                <input disabled type=\"text\" className=\"form-control\" id=\"claim.claimId\" value={this.state.claim.id} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-6\">\r\n                                <label htmlFor=\"claim.scoreId\">Score ID</label>\r\n                                <input disabled type=\"text\" className=\"form-control\" id=\"claim.scoreId\" value={this.props.scoreId} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                }</>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import { selectNode, RsData } from \"@reasonscore/core\";\r\n\r\nexport function selectElement(scoreId: string, rsData: RsData, settings: any) {\r\n    const selectedNodes = selectNode(scoreId, rsData);\r\n    const expander2s = window.document.getElementsByClassName('expander2') as HTMLCollectionOf<HTMLInputElement>;\r\n    for (const expander2 of expander2s) {\r\n        const expander3 = window.document.getElementById(expander2.id.replace(\"expander2\", \"expander3\")) as HTMLInputElement;\r\n        // TODO: Find feels very slow here. Should it be a dictionairy\r\n        const selectedNode = selectedNodes.find(e => e.itemId === expander2.id.substring(10, 100))\r\n        if (selectedNode) {\r\n            if (selectedNode.status === `selected`) {\r\n                expander2.checked = true;\r\n                expander3.checked = true;\r\n            } else if (selectedNode.status === `ancestor` && !settings?.selectedOnly) {\r\n                expander2.checked = false;\r\n                expander3.checked = true;\r\n            } else {\r\n                expander2.checked = false;\r\n                expander3.checked = false;\r\n            }\r\n        } else {\r\n            expander2.checked = false;\r\n            expander3.checked = false;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { RepositoryLocalPure, Score, Messenger, Action, ScoreTree } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\nimport { selectElement } from './selectElement';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    scoreTree: ScoreTree,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childScores: Score[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n        this.state.score.confidence = .5;\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId) as Score;\r\n        let claim = new Claim() as Claim;\r\n        if (score) {\r\n            let claimEdge: ClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId) as ClaimEdge\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id) as Score[];\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleChildrenVisible = () => {\r\n        selectElement(this.state.score.id, this.props.repository.rsData, this.props.settings);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                if (this.state.childrenVisible === false) {\r\n                    newState.childrenVisible = true;\r\n                }\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreNumbers = `${Math.round(score.confidence * 100)}%`\r\n        const settings = this.props.settings;\r\n\r\n        //Score Numbers\r\n        let scoreImpact = score.confidence;\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (!claim.reversible && score.confidence < 0) {\r\n                scoreImpact = 0;\r\n            }\r\n            if (score.affects === \"relevance\") {\r\n                scoreNumbers = score.pro ? \"X\" : \"÷\";\r\n                scoreNumbers += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreNumbers = `${Math.round(scoreImpact * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Score Description\r\n        let scoreDescription = \"\";\r\n        if (settings.scoreDescriptions) {\r\n            if (score.affects === \"relevance\") {\r\n                scoreDescription = \"Importance\";\r\n                if (score.pro) {\r\n                    scoreDescription = \"Increases \" + scoreDescription;\r\n                } else {\r\n                    scoreDescription = \"Decreases \" + scoreDescription;\r\n                }\r\n            } else {\r\n                let descriptions, trailing = \"\";\r\n                if (!score.parentScoreId) {\r\n                    descriptions = settings.scoreDescriptions.result\r\n                } else {\r\n                    descriptions = settings.scoreDescriptions.impact\r\n                    trailing = proMain ? \" Pro\" : \" Con\";\r\n                }\r\n                for (const descItem of descriptions) {\r\n                    if (score.confidence * score.relevance >= descItem.min) {\r\n                        scoreDescription = descItem.desc;\r\n                    }\r\n                }\r\n                scoreDescription += trailing + \": \";\r\n            }\r\n        }\r\n        if (!childScores.length) {\r\n            scoreDescription = \"Assumed \" + scoreDescription\r\n        }\r\n        let basedOn = \"\"\r\n        if (this.state.score.descendantCount > 0) {\r\n            basedOn = \" based on \" + this.state.score.descendantCount + \" claim\";\r\n            if (this.state.score.descendantCount > 1) basedOn += \"s\"\r\n            basedOn += \".\"\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move score sorting to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        let fractionalizedScore, sign;\r\n        let fractionalizedScoreNumber: number = 0;\r\n        if (score.affects === \"relevance\") {\r\n            fractionalizedScore = score.pro ? \"X\" : \"÷\";\r\n            fractionalizedScore += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n        } else {\r\n            fractionalizedScore = Math.abs(\r\n                ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n            ).toFixed(0);\r\n            fractionalizedScoreNumber = Math.abs(\r\n                ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n            );\r\n            if (fractionalizedScore === \"100\") fractionalizedScore = \"99\";\r\n            if (!score.parentScoreId) {\r\n                if (score.confidence < 0) sign = \"-\";\r\n                else sign = \" \";\r\n            } else {\r\n                sign = proMain ? \"+\" : \"-\";\r\n            }\r\n        }\r\n\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            var html: string = writer.render(parsed)\r\n            //Add target=\"_blank\"\r\n            html = html.replace(/href=\"/g, ' target=\"_blank\" rel=\"noopener noreferrer\"  href=\"');\r\n            // rel=\"noopener noreferrer\" due to security vulnerability https://www.jitbit.com/alexblog/256/\r\n            return { __html: html };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <input id={\"expander2-\" + score.id} type=\"checkbox\" className=\"expander2\" onChange={this.handleChildrenVisible}></input>\r\n                <input id={\"expander3-\" + score.id} type=\"checkbox\" className=\"expander3\"></input>\r\n                <div className={'claim-hider'}>\r\n                    <div className={'claim ' + proMainText} >\r\n                        {childScores.length > 0 &&\r\n                            <div id={\"expander-\" + (this.state.score.id)} className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} >\r\n                                <svg width=\"20px\" height=\"20px\">\r\n                                    <use href=\"#expander\" />\r\n                                </svg>\r\n                            </div>\r\n                        }\r\n                        <div className={'claim-inner'}>\r\n                            <div className=\"lines\">\r\n                                <span className=\"min\" title={claim.labelMin}>{claim.labelMin}</span>\r\n                                <span className=\"mid\" title={claim.labelMid}>{claim.labelMid}</span>\r\n                                <span className=\"max\" title={claim.labelMax}>{claim.labelMax}</span>\r\n\r\n                                <div className=\"lines-inner\">\r\n                                    <svg className=\"lines-pointer\" style={{ left: (proMain ? (scoreImpact + 1) / 2 : 1 - (scoreImpact + 1) / 2) * 100 + \"%\" }} height=\"20\" width=\"20\" viewBox=\"0 0 10 10\">\r\n                                        <path d=\"M 9,3 C 9,6 6,5 5,10 4,5 1,6 1,3 1,1 3,0 5,0 7,0 9,1 9,3 Z\" />\r\n                                    </svg>\r\n                                    <div className=\"tic\" style={{ left: '0%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '33.3%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '66.6%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '100%' }}></div>\r\n                                </div>\r\n                            </div>\r\n                            <label htmlFor={\"expander2-\" + score.id} className={'numbers'}\r\n                                title={scoreDescription + basedOn}>\r\n                                <span className=\"number\">\r\n                                    <span className=\"sign\">{sign}</span>\r\n                                    {fractionalizedScore}\r\n                                </span>\r\n                                {!score.parentScoreId && \"%\"}\r\n                            </label>\r\n                            {/* {fractionalizedScoreNumber < 1 && \"(\" + \r\n                                    (score.percentOfWeight * 100).toFixed(0) + \"%) \"\r\n                                } */}\r\n                            <span className={'score-description'}\r\n                                title={scoreNumbers + '% confidence based on ' + basedOn}>\r\n                                {scoreDescription + basedOn}\r\n                            </span>\r\n                            <span className={'rs-content'} dangerouslySetInnerHTML={createMarkup()}></span>\r\n                            <label className=\"more-info\" htmlFor={\"expander2-\" + score.id} >\r\n                                More info&hellip;\r\n                            </label>\r\n                        </div>\r\n                        <svg className=\"callout\" width=\"30px\" height=\"30px\">\r\n                            <use href=\"#callout\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"scoreInfo\">\r\n                    {scoreDescription + basedOn}\r\n                    <span className=\"editable\">\r\n                        <button onClick={this.handleEditButtonClick} className=\"btn-inline\" >edit this claim</button>\r\n                        <button onClick={this.handleAddButtonClick} className=\"btn-inline\" >add a pro or con</button></span>\r\n                </div>\r\n                <CSSTransition in={this.state.editorVisible} timeout={490} classNames=\"editor\">\r\n                    <div>\r\n                        {this.state.editorVisible &&\r\n                            <EditorElement\r\n                                claimId={claim.id}\r\n                                repository={props.repository}\r\n                                claimEdge={this.state.claimEdge}\r\n                                proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                                handleEditClose={this.handleEditClose}\r\n                                messenger={props.messenger}\r\n                                new={this.state.addMode}\r\n                                scoreId={this.state.score.id}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </CSSTransition>\r\n                <ul id={\"children-\" + (this.state.score.id)} className={'children ' + (this.state.childrenVisible ? '' : 'hide')}>\r\n                    <TransitionGroup component={null}>\r\n                        {childScores.length > 0 && childScoresSorted.map((child) => (\r\n                            <CSSTransition\r\n                                key={child.id}\r\n                                timeout={5000}\r\n                                classNames='score'>\r\n                                <li key={child.id}>\r\n                                    <ScoreElement\r\n                                        scoreId={child.id}\r\n                                        repository={props.repository}\r\n                                        proMainContext={proMain}\r\n                                        messenger={props.messenger}\r\n                                        settings={props.settings}\r\n                                        scoreTree={props.scoreTree}\r\n                                    />\r\n                                </li>\r\n                            </CSSTransition>\r\n\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","import React, { Component } from 'react';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action, ScoreTree } from \"@reasonscore/core\";\r\nimport ScoreElement from './ScoreElement';\r\nimport { selectElement } from './selectElement';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        RsDatabase: any;\r\n    }\r\n}\r\n\r\ntype MyProps = {\r\n    scoreTreeId: string,\r\n    repository: RepositoryLocalPure,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    selectId?: string | null,\r\n};\r\n\r\ntype MyState = {\r\n    settings: {\r\n        [others: string]: boolean;\r\n    }\r\n    settingsOpen: boolean,\r\n    scoreTree?: ScoreTree,\r\n};\r\n\r\nclass Menu extends Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            settings: {\r\n                ...{\r\n                    numbers: false,\r\n                    lines: true,\r\n                    scoreDescriptions: {\r\n                        impact: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Weak\" },\r\n                            { min: .5, desc: \"\" },\r\n                            { min: .9, desc: \"Srong\" },\r\n                            { min: 1.1, desc: \"Very Srong\" },\r\n                        ],\r\n                        result: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Possible\" },\r\n                            { min: .5, desc: \"Likely\" },\r\n                            { min: .9, desc: \"Probable\" },\r\n                            { min: 1.1, desc: \"Probable\" },\r\n                        ]\r\n                    },\r\n                }, ...this.props.settings\r\n            },\r\n            settingsOpen: false,\r\n            scoreTree: undefined,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const scoreTree = await this.props.repository.getScoreTree(this.props.scoreTreeId)\r\n        this.setState({\r\n            scoreTree: scoreTree,\r\n        })\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n\r\n        //Open the proper scores for display\r\n        // TODO: sleep hack because children may take awhile to be created. How can we do this better?\r\n        setTimeout(() => {\r\n            if (this.props.selectId) {\r\n                selectElement(this.props.selectId, this.props.repository.rsData, this.state.settings);\r\n            } else if (!this.props.settings.startClosed && scoreTree) {\r\n                selectElement(scoreTree.topScoreId, this.props.repository.rsData, this.state.settings);\r\n            }\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const action of actions) {\r\n            const { newData, type, dataId } = action;\r\n            let newState: Partial<MyState> = {}\r\n            if (type === \"modify_scoreTree\" && dataId === this.state.scoreTree?.id) {\r\n                newState.scoreTree = { ...this.state.scoreTree, ...newData };\r\n            }\r\n\r\n            this.setState(newState as MyState);\r\n        }\r\n    }\r\n\r\n    handleSave = async () => {\r\n        //TODO: Save Log to databse?\r\n\r\n        // This JSON parsing also some undefineds that will cause Firestore to error out\r\n        const rsDataWithtouUndefined = JSON.parse(JSON.stringify(this.props.repository.rsData));\r\n\r\n        //Save the scores to Firebase\r\n        window.RsDatabase.doc(this.state.settings.dbCollection).set(rsDataWithtouUndefined)\r\n            .then(function () {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function (error: any) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n    handleImport = () => {\r\n        //TODO: HACKs: File Import needs to be completely re-done\r\n        const element = document.createElement('div');\r\n        element.innerHTML = '<input type=\"file\">';\r\n        const fileInput = element.firstChild as HTMLInputElement;\r\n        const that = this;\r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', function () {\r\n                if (fileInput.files) {\r\n                    var file = fileInput.files[0];\r\n                    if (file.name.match(/\\.(txt|json)$/)) {\r\n                        var reader = new FileReader();\r\n\r\n                        reader.onload = async function () {\r\n                            that.props.repository.rsData = JSON.parse(reader.result as string);\r\n                            const scoreTree = that.state.scoreTree;\r\n                            that.setState({ scoreTree: undefined })\r\n                            await calculateScoreActions({\r\n                                actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n                                repository: that.props.repository,\r\n                            }).then((updatedScores: any) => {\r\n                                setTimeout(function () {\r\n                                    that.setState({ scoreTree: scoreTree })\r\n                                }, 100);\r\n                            });\r\n                        }\r\n                        reader.readAsText(file);\r\n                    } else {\r\n                        alert(\"File not supported, .txt or .json files only\");\r\n                    }\r\n                }\r\n            });\r\n            fileInput.click();\r\n        }\r\n    }\r\n\r\n    handleExport = () => {\r\n        var hiddenElement = document.createElement('a');\r\n        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(JSON.stringify(this.props.repository.rsData));\r\n        hiddenElement.target = '_blank';\r\n        hiddenElement.download = 'rsData.json';\r\n        hiddenElement.click();\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState({\r\n            settingsOpen: !this.state.settingsOpen\r\n        })\r\n    }\r\n\r\n    handleSetting = (setting: string, e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            settings: {\r\n                ...this.state.settings,\r\n                [setting]: e.currentTarget.checked,\r\n            }\r\n        })\r\n    }\r\n\r\n    classNames() {\r\n        let classes = \"\";\r\n        for (const className in this.state.settings) {\r\n            if (this.state.settings[className]) {\r\n                classes += \"s-\" + className + \" \";\r\n            }\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        const settings = this.state.settings;\r\n        return (<>\r\n            <div className={this.classNames()}>\r\n                {this.state.scoreTree &&\r\n                    <ScoreElement\r\n                        scoreId={this.state.scoreTree.topScoreId}\r\n                        repository={this.props.repository}\r\n                        proMainContext={true}\r\n                        messenger={this.props.messenger}\r\n                        settings={this.state.settings}\r\n                        scoreTree={this.state.scoreTree}\r\n                    />\r\n                }\r\n            </div>\r\n            <div className=\"Content\">\r\n                <div style={{ maxWidth: \"600px\", margin: \"10px\", padding: \"5rem 0 .5rem 0\", opacity: .3 }} className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save\">\r\n                        {!settings.DbNotAvailable && settings.editable && settings.saveToCloud &&\r\n                            <button onClick={this.handleSave} type=\"button\" value=\"Submit\" className=\"btn btn-secondary\">Save to cloud</button>\r\n                        }\r\n                        {settings.portData && <>\r\n                            <button onClick={this.handleImport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Import</button>\r\n                            <button onClick={this.handleExport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Export</button>\r\n                        </>}\r\n\r\n                    </div>\r\n                    <div className=\"btn-group mr-3 float-right btn-settings\" role=\"group\" aria-label=\"Settings\">\r\n                        <svg onClick={this.toggleSettings} style={{ cursor: \"pointer\", height: \"1em\", fill: \"#aaa\", stroke: \"none\" }} viewBox=\"0 0 1280.000000 1280.000000\">\r\n                            <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\r\n                            <g transform=\"translate(0,1280) scale(0.1,-0.1)\">\r\n                                <path d=\"M5664 11538 c-38 -40 -55 -68 -68 -113 -19 -65 -44 -149 -70 -235 -9 -30 -74 -248 -145 -484 l-128 -429 -97 -33 c-176 -60 -334 -125 -503 -209 l-168 -83 -100 53 c-55 29 -154 82 -220 117 -66 36 -147 80 -180 98 -232 125 -441 239 -505 275 -41 22 -100 54 -131 70 l-57 29 -108 -101 c-60 -56 -315 -308 -568 -561 l-458 -460 54 -98 c30 -55 77 -139 103 -189 26 -49 62 -115 78 -145 17 -30 57 -103 89 -162 32 -60 86 -159 119 -220 34 -62 84 -156 112 -208 27 -52 56 -104 63 -115 8 -11 14 -26 14 -35 0 -8 -31 -76 -69 -150 -90 -176 -178 -385 -247 -587 -18 -50 -20 -52 -74 -68 -30 -10 -73 -23 -95 -30 -34 -11 -101 -31 -140 -41 -5 -2 -41 -12 -80 -24 -38 -12 -77 -23 -85 -25 -8 -2 -46 -13 -85 -25 -38 -12 -77 -23 -85 -25 -8 -2 -69 -20 -135 -40 -177 -53 -269 -81 -370 -110 -82 -24 -95 -31 -147 -83 l-57 -57 -1 -712 c0 -688 0 -713 19 -722 10 -6 56 -21 102 -35 46 -13 170 -50 274 -81 105 -31 197 -58 205 -60 8 -2 47 -14 85 -25 111 -34 154 -47 245 -73 113 -33 287 -85 326 -98 27 -8 34 -18 49 -67 79 -263 165 -482 275 -702 l68 -136 -52 -100 c-29 -54 -81 -151 -116 -214 -34 -63 -79 -146 -100 -185 -21 -38 -65 -119 -97 -180 -97 -177 -187 -344 -236 -436 l-46 -85 510 -510 509 -509 58 29 c31 17 91 49 132 71 82 46 409 224 535 291 44 24 134 72 200 109 66 36 152 82 191 102 l71 36 179 -90 c98 -50 240 -114 314 -143 74 -29 144 -56 155 -61 18 -7 175 -57 231 -74 14 -3 25 -19 32 -43 18 -63 66 -228 112 -377 11 -38 23 -77 25 -85 3 -13 70 -240 139 -470 13 -41 40 -132 61 -203 l38 -127 723 0 723 0 55 66 c31 36 56 68 57 72 1 13 8 37 29 107 12 39 23 77 25 85 2 8 13 47 25 85 12 39 23 77 25 85 2 8 13 44 24 80 11 36 63 211 116 390 53 179 100 332 105 340 4 8 48 28 97 44 156 50 363 137 548 229 l180 90 55 -29 c30 -16 118 -63 195 -105 125 -68 203 -110 445 -241 36 -20 119 -65 185 -100 66 -36 159 -86 206 -111 47 -26 92 -47 101 -47 18 0 1118 1103 1118 1122 0 7 -12 33 -26 58 -14 25 -45 81 -69 125 -23 44 -71 132 -105 195 -35 63 -138 255 -230 426 -93 170 -177 326 -189 345 -11 19 -21 41 -21 50 0 9 27 69 60 133 53 104 109 230 156 351 9 22 19 47 23 55 4 8 25 69 46 135 21 66 43 125 49 132 6 6 52 23 101 38 148 44 177 52 250 75 39 11 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 69 20 135 40 66 20 158 47 204 60 74 21 91 30 138 77 l53 52 0 722 0 722 -62 21 c-59 19 -325 98 -358 106 -8 2 -46 14 -85 25 -105 32 -151 46 -250 75 -49 15 -126 37 -170 50 -44 13 -118 35 -165 49 -47 13 -114 33 -150 45 l-65 20 -34 103 c-67 211 -195 507 -293 684 l-45 80 80 145 c43 79 99 182 124 229 57 106 223 413 360 665 24 44 51 95 60 113 l17 33 -499 499 c-275 275 -507 500 -515 500 -9 0 -24 -6 -35 -13 -11 -8 -58 -34 -105 -59 -90 -48 -253 -136 -447 -242 -65 -35 -145 -78 -178 -96 -92 -49 -169 -91 -302 -164 l-121 -66 -159 79 c-192 96 -331 153 -523 216 -80 26 -154 51 -166 55 -15 6 -26 29 -43 86 -33 117 -60 207 -161 544 -51 168 -102 341 -115 385 -13 44 -33 112 -45 150 -12 39 -23 78 -25 88 -2 9 -7 22 -10 27 -4 7 -260 10 -729 10 l-723 0 -49 -52z m981 -3342 c83 -16 89 -17 166 -35 248 -57 582 -231 789 -413 344 -302 557 -671 644 -1118 23 -119 27 -176 27 -362 0 -163 -9 -263 -30 -361 -6 -23 -13 -58 -16 -77 -13 -77 -89 -282 -150 -405 -178 -362 -407 -601 -735 -767 -355 -180 -750 -252 -1120 -203 -63 8 -126 17 -140 20 -14 3 -47 10 -75 16 -91 18 -310 97 -423 154 -560 280 -966 827 -1058 1425 -30 198 -30 501 1 650 3 14 8 41 11 60 31 174 128 426 228 593 120 200 230 324 406 456 216 163 515 302 745 346 73 14 203 35 240 39 83 9 412 -4 490 -18z\" />\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className={\"settings-container \" + (this.state.settingsOpen && \"show-settings\")}>\r\n                    <div className={\"settings-grid \"}>\r\n                        {Object.keys(this.state.settings).map((setting) => (\r\n                            <div key={setting}>\r\n                                {// TODO: make setting componant handle more than booleans\r\n                                    (this.state.settings[setting] === true || this.state.settings[setting] === false) &&\r\n                                    <>\r\n                                        <input type=\"checkbox\" id={'s-' + setting} checked={this.state.settings[setting]} onChange={this.handleSetting.bind(this, setting)} />\r\n                                        <label htmlFor={'s-' + setting}>{setting}</label>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <svg style={{ display: \"none\" }}>\r\n                <symbol id=\"callout\" viewBox=\"0 0 30 30\">\r\n                    <g>\r\n                        <path d=\"M 18,28 C 10,28 4,28 2,20 L 10,2 c 0,10 0,23 8,26 z\"></path>\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n            <svg height=\"20px\" width=\"20px\" style={{ display: \"none\" }}>\r\n                <symbol id=\"expander\" viewBox=\"0 0 10 10\" >\r\n                    <g>\r\n                        <path d=\"m1 1 7 4-7 4z\" />\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport { Messenger, RepositoryLocalPure } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  scoreTreeId: string,\r\n  repository: RepositoryLocalPure,\r\n  messenger: Messenger,\r\n  settings: any,\r\n  selectId?: string | null,\r\n}> = ({\r\n  scoreTreeId,\r\n  repository,\r\n  messenger,\r\n  settings,\r\n  selectId\r\n}) => (\r\n      <>\r\n        <Menu repository={repository}\r\n          scoreTreeId={scoreTreeId}\r\n          messenger={messenger}\r\n          settings={settings}\r\n          selectId={selectId}>\r\n        </Menu>\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './custom.scss';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action} from \"@reasonscore/core\";\r\n//import { Claim, ClaimEdge, ScoreTree } from \"@reasonscore/core\";\r\n\r\n// TODO: hacks below to use global window to pass objects between javascript an dtypescript. Later pass items out as well for use in vide-script and animated demos\r\ndeclare global {\r\n  interface Window {\r\n    RsDatabase: any,\r\n    RsActions: Action[],\r\n    RsSettings: any,\r\n    RsMessenger: Messenger,\r\n    RsRepository: RepositoryLocalPure,\r\n    RsCalculateScoreActions: any,\r\n  }\r\n}\r\n\r\n\r\nasync function startApp() {\r\n  const repository =  window.RsRepository? window.RsRepository : new RepositoryLocalPure();\r\n  window.RsRepository = repository;\r\n  const messenger = window.RsMessenger? window.RsMessenger : new Messenger();\r\n  window.RsMessenger = messenger;\r\n  const settings = window.RsSettings? window.RsSettings : {};\r\n  window.RsSettings = settings;\r\n  //const calculator : iCalculateScore = window.RsCalculator? window.RsCalculator : calculateScoreActions;\r\n  window.RsCalculateScoreActions = calculateScoreActions;\r\n\r\n  let doc\r\n\r\n  if (settings.dbCollection === null) {\r\n    settings.dbCollection = \"rsData\"\r\n  }\r\n\r\n\r\n  // //TODO: This is for easy testing for now\r\n  // const u = undefined, pro = true, con = false\r\n  // window.RsActions = [\r\n  //   new Action(new Claim('mainClaim', 'mainClaim'), u, 'add_claim'), new Action(new ScoreTree('mainClaim', 'mainClaim-score', u, 'ScoreTree'), u, 'add_scoreTree'),\r\n  //   new Action(new Claim('01', '01'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '01', u, con, '01-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02', '02'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '02', u, pro, '02-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-1', '02-1'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-1', u, pro, '02-1-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-2', '02-2'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-2', u, con, '02-2-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-3', '02-3'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-3', u, pro, '02-3-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('03', '03'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '03', u, pro, '03-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('04', '04'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '04', u, pro, '04-edge'), u, 'add_claimEdge'),\r\n  // ]\r\n\r\n  if (!window.RsActions) {\r\n    window.RsActions = [\r\n      {\r\n        \"newData\": {\r\n          \"content\": \"This is a new claim.\\n\\n.\\n* Select the \\\"edit this claim\\\" button below to change this text.\\n* Select the \\\"add a pro or con\\\" button to add additional claims.\\n* Select the \\\"Import\\\" and \\\"Export\\\" buttons at the bottom to save a copy to your device.\",\r\n          \"id\": \"mainClaim\",\r\n          \"type\": \"claim\"\r\n        },\r\n        \"type\": \"add_claim\",\r\n        \"dataId\": \"mainClaim\"\r\n      },\r\n      {\r\n        \"newData\": {\r\n          \"sourceClaimId\": \"mainClaim\",\r\n          \"topScoreId\": \"mainScore\",\r\n          \"id\": \"ScoreTree\",\r\n          \"type\": \"scoreTree\"\r\n        },\r\n        \"type\": \"add_scoreTree\",\r\n        \"dataId\": \"ScoreTree\"\r\n      },\r\n    ] as Action[] //TODO: need to correct order of params for actions to allow no old data more easily\r\n  }\r\n\r\n  //Populate the Repository\r\n  if (window.RsDatabase) {\r\n    doc = await window.RsDatabase.doc(settings.dbCollection).get()\r\n  }\r\n  if (doc && doc.exists) {\r\n    repository.rsData = doc.data();\r\n  } else if (window.RsActions) {\r\n    await repository.notify(window.RsActions)\r\n    settings.DbNotAvailable = true;\r\n  }\r\n\r\n  //Look in the HTML to see what we need to prep\r\n  //Loop through the html scores and start an app for each\r\n  const scoreElements = document.getElementsByTagName('rs-score');\r\n  for (const scoreElement of scoreElements) {\r\n    const possibleScoreId = scoreElement.getAttribute('score-tree-Id');\r\n    let scoreTreeId = \"\";\r\n    if (possibleScoreId) {\r\n      scoreTreeId = possibleScoreId;\r\n    }\r\n\r\n    //TODO: Check if the scoreTree, Score and Claim exist. If not, create them\r\n    const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n    if (scoreTree) {\r\n      await calculateScoreActions({\r\n        actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n        repository,\r\n      })\r\n    }\r\n\r\n    const selectId = new URL(window.location.href).searchParams.get(\"s\")\r\n\r\n    ReactDOM.render(<App\r\n      scoreTreeId={scoreTreeId}\r\n      repository={repository}\r\n      messenger={messenger}\r\n      settings={window.RsSettings}\r\n      selectId={selectId}\r\n    />, scoreElement);\r\n\r\n  }\r\n}\r\nstartApp();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}