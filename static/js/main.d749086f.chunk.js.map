{"version":3,"sources":["../../src/index.ts","../../src/newId.ts","../../../src/dataModels/Score.ts","../../../src/dataModels/Action.ts","../../../src/dataModels/RsData.ts","../../../../src/repositories/reducers/IndexReducer.ts","../../src/calculateScore.ts","../../../src/repositories/RepositoryLocalPure.ts","../../../src/dataModels/Claim.ts","../../../src/dataModels/ClaimEdge.ts","../../../src/dataModels/ScoreTree.ts","../../src/Messenger.ts","../../src/calculateScoreActions.ts","../../../src/utils/hasItemChanged.ts","../../../../src/repositories/reducers/claims.ts","../../../../src/repositories/reducers/claimEdges.ts","../../../src/repositories/RepositoryLocalBase.ts","../../../../src/repositories/reducers/scores.ts","../../../../src/repositories/reducers/scoresTrees.ts","../../../src/utils/deepClone.ts","../../../src/utils/selectNode.ts","dataModels/ClaimEdge.ts","dataModels/Claim.ts","EditorElement.tsx","selectElement.ts","BucketElement.tsx","utils/renderer.js","utils/PlainTextRenderer.js","utils/creatMarkup.tsx","ScoreElement.tsx","utils/searchTools.ts","SearchElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["when","decimal","s","split","result","Math","Array","constructor","parentScoreId","sourceEdgeId","reversible","pro","affects","confidence","relevance","id","priority","content","scaledWeight","sourceClaimId","scoreTreeId","dataId","newData","oldData","type","this","actionsLog","items","claimEdgeIdsByParentId","claimEdgeIdsByChildId","scoreIdsBySourceId","childIdsByScoreId","ScoreTreeIds","state","calcWeight","score","childScores","newScore","maxChildWeight","childScore","polarity","Object","rsData","RsData","notify","actions","claims","claimEdges","scores","scoreTrees","RepositoryLocalBase","parentId","childId","descendantCount","topScoreId","subscriber","subscribe","unsubscribe","index","subscribers","indexOf","callback","repository","RepositoryLocalPure","calculator","calculateScore","scoreActions","claimIdsToScore","action","scoreTemp","claimEdge","claimEdgeTemp","Action","oldClaimEdge","scoreTree","claimScore","missingScoreActions","mainScore","Score","createBlankMissingScores","scoreTreeActions","calculateScoreDescendants","newMainScore","fractionActions","calculateFractions","generationActions","calculateGenerations","proMainActions","newChildScore","proMain","calculateProMain","newScoreTreePartial","oldScoreTreePartial","edges","edge","u","currentScore","oldChildScores","newChildScores","newDescendantCount","newScoreFragment","oldChildScore","hasItemChanged","parentScore","totalRelevance","oldScore","fractionSimple","fraction","generation","scoreA","JSON","checkResult","itemChanges","newItem","partialOldItem","partialNewItem","oldItem","Claim","ClaimEdge","IndexReducer","IndexDelete","scoreIds","internalIndex","location","getClaim","getClaimEdge","getScore","getScoreTree","getClaimEdgesByParentId","claimEdgeIdStrings","getClaimEdgesByChildId","getScoresBySourceId","scoreIdStrings","getChildrenByScoreId","childIdStrings","getDescendantScoresById","scoresToProcess","getLeafScoresById","children","ScoreTree","selectedId","itemId","status","newId","checked","labelMin","labelMid","labelMax","EditorElement","props","handleSubmit","pasteClaim","push","undefined","claim","new","calculateScoreActions","then","a","messenger","concat","handleEditClose","handleText","e","pathParts","currentTarget","length","setState","value","Error","handlePriority","handlePasteClaim","handlePro","proMainContext","handleProMain","handleDelete","handleCancel","newState","claimId","parse","stringify","className","htmlFor","onChange","rows","href","role","aria-label","onClick","disabled","scoreId","React","Component","selectElement","settings","selectedNodes","selectNode","expander2s","window","document","getElementsByClassName","expander2","expander3","getElementById","replace","selectedNode","find","substring","selectedOnly","BucketElement","p","percentage","style","height","Renderer","prototype","render","ast","event","walker","buffer","lastOut","next","node","entering","out","str","lit","cr","esc","PlainTextRenderer","options","create","text","literal","html_inline","html_block","softbreak","linebreak","link","image","emph","strong","paragraph","grandparent","parent","listTight","heading","code","code_block","thematic_break","block_quote","list","item","custom_inline","custom_block","commonmark","require","createMarkup","writer","fractionalizedScore","sign","plainText","Mustache","reader","Parser","HtmlRenderer","safe","parsed","html","__html","ScoreElement","handleChildrenVisible","handleDataDispatch","change","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","claimResult","scoreNumber","round","scoreNumberText","toLocaleString","minimumFractionDigits","maximumFractionDigits","toString","padStart","scoreDescription","scoreDescriptions","descriptions","trailing","impact","descItem","min","desc","basedOn","childScoresSorted","sort","b","proMainText","abs","toFixed","scoreUrl","URL","searchParams","set","scoreUrlText","encodeURIComponent","width","title","left","viewBox","d","showFractionalized","showScore","showBucket","showFractionSimple","dangerouslySetInnerHTML","target","marginBottom","weight","CSSTransition","in","timeout","classNames","TransitionGroup","component","map","child","InstantSearch","container","tokens","defaultClassName","defaultCaseSensitivity","m_container","m_defaultClassName","m_defaultCaseSensitivity","m_highlightTokens","iterator","bind","checkAndReplace","highlight","highlightNode","token","sensitiveSearch","nodeVal","nodeValue","parentNode","textNode","i","j","curToken","textToHighlight","highlightClassName","caseSensitive","isFirst","foundIndex","toLowerCase","createTextNode","insertBefore","removeChild","begin","matched","substr","span","createElement","classList","contains","add","appendChild","slice","call","childNodes","cur","nodeType","Node","TEXT_NODE","ELEMENT_NODE","n","SearchIndex","Fuse","includeScore","shouldSort","includeMatches","findAllMatches","minMatchCharLength","useExtendedSearch","ignoreLocation","keys","indexPopulated","SearchElement","mainScoreId","useState","searchText","setSearchText","foundClaims","setFoundClaims","forcedRender","forceRender","searchResults","search","searchResult","foundWord","getFoundWord","matches","random","handleOpenButtonClick","scoreid","scrollIntoView","word","wordLengthDifference","indices","tempWord","tempWordLengthDiff","useEffect","elements","querySelectorAll","element","getAttribute","data-highlight","opacity","Menu","handleSave","rsDataCleanedForTransfer","getRsDataCleanedForTransfer","RsDatabase","doc","dbCollection","tempVisualLog","Date","rsDataWithtouUndefined","getVizualExport","vizExport","exportString","topScore","unshift","shortId","max","replaceAll","join","values","ids","nextId","handleUpload","innerHTML","fileInput","firstChild","that","addEventListener","files","file","name","match","FileReader","onload","updatedScores","setTimeout","readAsText","alert","click","download","data","suggestedFileName","showSaveFilePicker","fileHandle","createWritable","writable","write","close","confirm","hiddenElement","encodeURI","handleDownload","handleExport","toggleSettings","settingsOpen","handleSetting","setting","numbers","lines","hideMainScore","selectId","startClosed","classes","maxWidth","margin","padding","DbNotAvailable","editable","saveToCloud","portData","cursor","fill","stroke","transform","display","App","Boolean","hostname","RsRepository","RsMessenger","Messenger","RsSettings","RsCalculateScoreActions","RsActions","get","exists","scoreElements","getElementsByTagName","scoreElement","possibleScoreId","ReactDOM","rsStartApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d749086f.chunk.js","sourcesContent":["export * from \"./calculateScore\";\r\nexport * from \"./Messenger\";\r\nexport * from \"./newId\";\r\nexport * from \"./calculateScoreActions\";\r\nexport * from \"./repositories/RepositoryLocalPure\"\r\nexport * from \"./utils/deepClone\"\r\nexport * from \"./utils/selectNode\"\r\n\r\n// Data Models\r\nexport * from \"./dataModels/Action\";\r\nexport * from \"./dataModels/ActionTypes\";\r\nexport * from \"./dataModels/Affects\";\r\nexport * from \"./dataModels/Item\";\r\nexport * from \"./dataModels/ItemTypes\";\r\nexport * from \"./dataModels/ClaimEdge\";\r\nexport * from \"./dataModels/RsData\";\r\nexport * from \"./dataModels/Score\";\r\nexport * from \"./dataModels/ScoreTree\";\r\nexport * from \"./dataModels/Claim\";\r\n","\r\nexport function newId(when: Date = new Date()): string {\r\n  // take the UTC date and convert to base 62\r\n  let decimal = 5000000000000 - when.getTime();\r\n  const s = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n  let result = '';\r\n  while (decimal >= 1) {\r\n    result = s[(decimal - (62 * Math.floor(decimal / 62)))] + result;\r\n    decimal = Math.floor(decimal / 62);\r\n  }\r\n\r\n  // Add 5 extra random characters in case multiple ids are creates at the same time\r\n  result += Array(5).join().split(',').map(() => s[(Math.floor(Math.random() * s.length))])\r\n    .join('');\r\n\r\n  return result ;\r\n}","import { newId } from \"../newId\";\r\nimport { Affects } from \"./Affects\";\r\nimport { Item } from \"./Item\";\r\nimport { ItemTypes } from \"..\";\r\n/**\r\n * Stores the score for a claim. Just a data transfer object. Does not contain any logic.\r\n */\r\nexport class Score implements Item {\r\n    type: ItemTypes = 'score'\r\n\r\n    constructor(\r\n        /** The claim to which this score belongs */\r\n        public sourceClaimId: string,\r\n        /** The top of the tree of scores that this belongs to. Used for indexing */\r\n        public scoreTreeId: string,\r\n        /** The parent of this score in the score tree graph */\r\n        public parentScoreId: string | null = null, // Use null because Firestore does not allow undefined\r\n        /** The Edge to which this score belongs */\r\n        public sourceEdgeId: string | null = null,\r\n\r\n        public reversible: boolean = false,\r\n        /** Is this score a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        /** how confident we sould be in the claim. (AKA True) */\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = \"confidence\",\r\n        public confidence: number = 1,\r\n        /** How relevent this claim is to it's parent claim. Ranges from 0 to infinity.\r\n         * A multiplier set by all the child edges that affect 'relevance'*/\r\n        public relevance: number = 1,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n        public content: string = \"\",\r\n        /** the impact/weight of this score on it's parent score but scaled so all the children are less than 1  */\r\n        public scaledWeight: number = 0,\r\n    ) {\r\n    }\r\n\r\n    public descendantCount: number = 0;\r\n    public generation: number = 0;\r\n\r\n    /** What fraction of tree is this disregarding all scores */\r\n    public fractionSimple: number = 1;\r\n    /** What fraction of mainScore is this score and it's descendants responsible for */\r\n    public fraction: number = 1;\r\n\r\n    public childrenAveragingWeight: number = 1;\r\n    public childrenConfidenceWeight: number = 1;\r\n    public childrenRelevanceWeight: number = 1;\r\n    public childrenWeight: number = 1;\r\n    public weight: number = 1;\r\n    public percentOfWeight: number = 1;\r\n    /** Is this score pro the main top claim */\r\n    public proMain: boolean = true; // TODO: should this start undefined?\r\n\r\n\r\n    // //TODO:Experimental\r\n    // public childrenProWeight: number = 0;\r\n    // public childrenConWeight: number = 0;\r\n    // public percentAgreeWeight: number = 0;\r\n    // public parentFractionSimple: number = 0;\r\n}\r\n\r\n","import { ActionTypes } from \"./ActionTypes\";\r\n\r\nexport class Action {\r\n    constructor(\r\n        public newData: any,\r\n        public oldData: any,\r\n        public type: ActionTypes,\r\n        public dataId: string = \"\",\r\n    ) {\r\n        if (dataId === \"\") {\r\n            this.dataId = newData.id\r\n        }\r\n    }\r\n}","import { Action } from \"./Action\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport interface Index { [searchIndex: string]: string; } //Store the string for the ID\r\nexport interface IndexArray { [searchIndex: string]: string[]; } //Store the string for the ID\r\n\r\nexport class RsData implements RsData {\r\n    constructor(\r\n        public actionsLog: { actions: Action[] }[] = [],\r\n        // Claim data\r\n        /** Stores all the current items */\r\n        public items: { [idString: string]: Item; } = {},\r\n\r\n        // Claim Indexes - Local\r\n        public claimEdgeIdsByParentId: IndexArray = {},\r\n        public claimEdgeIdsByChildId: IndexArray = {},\r\n\r\n        //Score Indexes - Local\r\n        public scoreIdsBySourceId: IndexArray = {},\r\n        public childIdsByScoreId: IndexArray = {},\r\n        public ScoreTreeIds: string[] = [],\r\n    ) {\r\n    }\r\n}\r\n","import { RsData } from \"../../dataModels/RsData\";\r\nexport function IndexReducer(state: any, index: string, keyId: string | null | undefined, id: string): RsData {\r\n    if (keyId) {\r\n        //TODO: remove this, can I use \"...state[index][keyId] || []\" below?\r\n        if (!state[index][keyId]) {\r\n            state[index][keyId] = [];\r\n        }\r\n        if (state[index][keyId].indexOf(id) == -1) {\r\n            state = {\r\n                ...state,\r\n                [index]: {\r\n                    ...state[index],\r\n                    [keyId]: [\r\n                        ...state[index][keyId],\r\n                        id\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","import { Score } from \"./dataModels/Score\";\r\n\r\nexport interface iCalculateScore {\r\n    ({ childScores }: {\r\n        /** An array of grouped edges and claims*/\r\n        childScores?: Score[];\r\n    }): Partial<Score>\r\n}\r\n\r\n/**\r\n * Calculates a new score based on the child scores passed in.\r\n */\r\nexport function calculateScore({ childScores = [], reversible = true }: {\r\n    /** An array of grouped edges and claims*/\r\n    childScores?: Score[];\r\n    /** Can this score fall below a 0 confidence (have a negative confidence) */\r\n    reversible?: boolean\r\n} = {},\r\n): Partial<Score> {\r\n    // TODO: Simplify all this math and maybe break it up between base functionality and additional scoring (like the points)\r\n    const newScore: Partial<Score> = {};\r\n    newScore.confidence = 0;\r\n    newScore.relevance = 1;\r\n    newScore.childrenAveragingWeight = 0;\r\n    newScore.childrenConfidenceWeight = 0;\r\n    newScore.childrenRelevanceWeight = 0;\r\n    newScore.childrenWeight = 0;\r\n    // newScore.childrenProWeight = 0;\r\n    // newScore.childrenConWeight = 0;\r\n\r\n    let maxChildWeight = 0\r\n\r\n\r\n    if (childScores.filter(s => s.affects === 'confidence').length < 1) {\r\n        // Defaults if there are no children\r\n        newScore.confidence = 1; // assume 100% confident\r\n        newScore.relevance = 1; // assume 100% relevant\r\n        newScore.childrenAveragingWeight = 1;\r\n        newScore.childrenConfidenceWeight = 1;\r\n        newScore.childrenRelevanceWeight = 1;\r\n        newScore.childrenWeight = 1;\r\n        newScore.weight = 1;\r\n    }\r\n\r\n    //Gather children Weights totals for processing further down\r\n    for (const childScore of childScores) {\r\n        // //Ensure calculations for non-reversible scores don't allow the confidence to be below 0\r\n        // //TODO: Is this needed in the totals seciton?\r\n        // let confidence = childScore.confidence\r\n        // if (!childScore.reversible && childScore.confidence < 0) {\r\n        //     confidence = 0\r\n        // }\r\n\r\n        childScore.weight = calcWeight(childScore); //TODO: Just in case a child score comes in uncalculated - maybe should be removed\r\n        newScore.childrenAveragingWeight += 1;\r\n        newScore.childrenConfidenceWeight += Math.abs(childScore.confidence);\r\n        newScore.childrenRelevanceWeight += childScore.relevance;\r\n        newScore.childrenWeight += childScore.weight;\r\n        if (childScore.weight > maxChildWeight){\r\n            maxChildWeight = childScore.weight;\r\n        }\r\n\r\n        // //TODO: Experimantal\r\n        // if (confidence > 0) {\r\n        //     if (childScore.pro) {\r\n        //         newScore.childrenProWeight += confidence\r\n        //     }\r\n        //     if (!childScore.pro) {\r\n        //         newScore.childrenConWeight += confidence\r\n        //     }\r\n        // } else if (confidence < 0) {\r\n        //     if (childScore.pro) {\r\n        //         newScore.childrenConWeight += confidence\r\n        //     }\r\n        //     if (!childScore.pro) {\r\n        //         newScore.childrenProWeight += confidence\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // Loop through to calculate the final scores\r\n    for (const childScore of childScores) {\r\n        const polarity = childScore.pro ? 1 : -1\r\n\r\n        if (childScore.affects === \"confidence\") {\r\n            if (newScore.childrenWeight === 0) {\r\n                childScore.percentOfWeight = 0;\r\n                newScore.confidence = 0;\r\n            } else {\r\n\r\n                childScore.percentOfWeight =\r\n                    childScore.weight /\r\n                    newScore.childrenWeight;\r\n\r\n                newScore.confidence +=\r\n                    childScore.percentOfWeight *\r\n                    childScore.confidence * polarity;\r\n            }\r\n        }\r\n\r\n        if (childScore.affects === \"relevance\") {\r\n            // Process Relevance child claims\r\n\r\n            let confidence = childScore.confidence\r\n            if (!childScore.reversible && childScore.confidence < 0) {\r\n                confidence = 0\r\n            }\r\n\r\n            if (newScore.relevance == undefined) {\r\n                newScore.relevance = 1;\r\n            }\r\n\r\n            if (childScore.pro) {\r\n                newScore.relevance += confidence;\r\n            } else {\r\n                newScore.relevance -= confidence / 2;\r\n            }\r\n        }\r\n\r\n        // if (childScore.pro) {\r\n        //     childScore.percentAgreeWeight = confidence / newScore.childrenProWeight\r\n        // } else {\r\n        //     childScore.percentAgreeWeight = confidence / newScore.childrenConWeight\r\n        // }\r\n\r\n        childScore.scaledWeight = (childScore.weight/maxChildWeight)\r\n\r\n    }\r\n\r\n\r\n    if (Object.is(newScore.confidence, -0)) {\r\n        // Protect against negative zero \r\n        newScore.confidence = 0;\r\n    }\r\n\r\n    let confidence = Math.abs(newScore.confidence)\r\n    if (!newScore.reversible && newScore.confidence < 0) {\r\n        confidence = 0\r\n    }\r\n\r\n    newScore.weight = calcWeight(newScore);\r\n    newScore.scaledWeight = newScore.weight;\r\n\r\n    return newScore;\r\n}\r\n\r\nfunction calcWeight(score: Partial<Score>) {\r\n    if (score.confidence !== undefined && score.relevance !== undefined){\r\n        let confidence = Math.abs(score.confidence)\r\n        if (!score.reversible && score.confidence < 0) {\r\n            confidence = 0\r\n        }\r\n        return confidence * score.relevance;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","import { Action } from \"../dataModels/Action\";\r\nimport { RsData } from \"../dataModels/RsData\";\r\nimport { iRepository } from \"../dataModels/iRepository\";\r\nimport { claims } from \"./reducers/claims\";\r\nimport { claimEdges } from \"./reducers/claimEdges\";\r\nimport { RepositoryLocalBase } from \"./RepositoryLocalBase\";\r\nimport { scores } from \"./reducers/scores\";\r\nimport { scoreTrees } from \"./reducers/scoresTrees\";\r\n\r\n\r\nexport class RepositoryLocalPure extends RepositoryLocalBase implements iRepository {\r\n\r\n    constructor(\r\n        public rsData: RsData = new RsData()\r\n    ) {\r\n        super(rsData);\r\n    }\r\n\r\n    async notify(actions: Action[]) {\r\n        this.rsData.actionsLog.push({actions:actions}); //TODO: put logs back in\r\n        for (const action of actions) {\r\n            this.rsData = claims(this.rsData, action);\r\n            this.rsData = claimEdges(this.rsData, action);\r\n            this.rsData = scores(this.rsData, action);\r\n            this.rsData = scoreTrees(this.rsData, action);\r\n        }\r\n    }\r\n\r\n}","import { ItemTypes } from \"./ItemTypes\";\r\nimport { newId } from \"../newId\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport class Claim implements Item {\r\n    type: ItemTypes = 'claim'\r\n\r\n    constructor(\r\n        public content: string = \"\",\r\n        public id: string = newId(),\r\n        public reversible: boolean = false,\r\n    ) {\r\n    }\r\n}\r\n","import { Affects } from \"./Affects\"\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport { newId } from \"../newId\";\r\n/**\r\n * Stores the relationship between a claim and an item (usually another claim).\r\n * This is directional as the edge points from one claim to it's parent.\r\n * This is just a data transfer object so it should have no logic in it\r\n * and only JSON compatible types string, number, object, array, boolean\r\n */\r\nexport class ClaimEdge {\r\n    type: ItemTypes = 'claimEdge'\r\n\r\n    constructor(\r\n        /** The ID for the parent claim this edge points to */\r\n        public parentId: string,\r\n        /** The ID for the child claim this edge points from */\r\n        public childId: string,\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = 'confidence',\r\n        /** Is the child claim a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n    ) {\r\n    }\r\n}\r\n","import { newId } from \"../newId\";\r\nimport { Item } from \"./Item\";\r\nimport { ItemTypes } from \"..\";\r\n/**\r\n * Represents an intentional top of a tree of scores.\r\n */\r\nexport class ScoreTree implements Item {\r\n    type: ItemTypes = 'scoreTree'\r\n\r\n    constructor(\r\n        /** The claim to which this score belongs */\r\n        public sourceClaimId: string,\r\n        /** The top of the tree of scores that this belongs to. Used for indexing */\r\n        public topScoreId: string,\r\n        /** how confident we sould be in the claim. (AKA True) */\r\n        public confidence: number = 1,\r\n        public id: string = newId(),\r\n        public descendantCount: number = 0,\r\n    ) {\r\n    }\r\n}","import { Action } from \"./dataModels/Action\";\r\n\r\nexport class Messenger {\r\n    public readonly subscribers: { (changes: Action[]): void; }[] = []\r\n    public readonly actionsLog: Action[][] = [];\r\n\r\n    subscribe(callback: (actions: Action[]) => void): void {\r\n        this.subscribers.push(callback)\r\n    }\r\n\r\n    unsubscribe(callback: (actions: Action[]) => void): void {\r\n        const index = this.subscribers.indexOf(callback, 0);\r\n        if (index > -1) {\r\n            this.subscribers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /** this function can be called by outside code to notfy this repository of changes */\r\n    notify = (actions: Action[]) => {\r\n        this.actionsLog.push(actions);\r\n        for (const subscriber of this.subscribers) {\r\n            subscriber(actions);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import { Score } from \"./dataModels/Score\";\r\nimport { hasItemChanged } from \"./utils/hasItemChanged\";\r\nimport { Action } from \"./dataModels/Action\";\r\nimport { iCalculateScore, calculateScore } from \"./calculateScore\";\r\nimport { iRepository } from \"./dataModels/iRepository\";\r\nimport { ClaimEdge } from \"./dataModels/ClaimEdge\";\r\nimport { RepositoryLocalPure } from \"./repositories/RepositoryLocalPure\";\r\nimport { ScoreTree } from \".\";\r\n\r\n/**\r\n * Calculates the score actions based on a list of actions\r\n */\r\nexport async function calculateScoreActions({ actions = [], repository = new RepositoryLocalPure(), calculator = calculateScore }: {\r\n    /** An array of actions, usually on claims or edges that incluse no scores*/\r\n    actions?: Action[];\r\n    /** The repository used to get context for the actions */\r\n    repository?: iRepository;\r\n    /** The function used to calculate the scores */\r\n    calculator?: iCalculateScore;\r\n} = {},\r\n) {\r\n    const scoreActions: Action[] = [];\r\n    const claimIdsToScore: string[] = [];\r\n    const ScoreTreeIds: string[] = [];\r\n\r\n    await repository.notify(actions);\r\n    for (const action of actions) {\r\n\r\n        // find claims that may need scores changed\r\n        if (action.type == 'add_claim' || action.type == 'modify_claim') {\r\n            claimIdsToScore.push(action.dataId)\r\n        }\r\n\r\n        if (action.type == \"add_score\") {\r\n            let score = action.newData as Score;\r\n            if (!score.parentScoreId) {\r\n                const scoreTemp = await repository.getScore(action.dataId)\r\n                if (scoreTemp) {\r\n                    score = scoreTemp;\r\n                }\r\n            }\r\n\r\n            claimIdsToScore.push(score.sourceClaimId)\r\n        }\r\n\r\n        //Add scores if edges adds new children to claims in score trees\r\n        if (action.type == 'add_claimEdge' || action.type == 'modify_claimEdge') {\r\n            let claimEdge = action.newData as ClaimEdge;\r\n            if (!claimEdge.parentId) {\r\n                const claimEdgeTemp = await repository.getClaimEdge(action.dataId)\r\n                if (claimEdgeTemp) {\r\n                    claimEdge = claimEdgeTemp;\r\n                }\r\n            }\r\n            claimIdsToScore.push(claimEdge.parentId)\r\n        }\r\n\r\n        //TODO: If an edge changes then modify the existing scores to match\r\n        if (action.type == 'modify_claimEdge') {\r\n            let claimEdge = await repository.getClaimEdge(action.dataId)\r\n            claimEdge = { ...claimEdge, ...action.newData }\r\n            if (claimEdge) {\r\n                action.newData as ClaimEdge;\r\n                const scores = await repository.getScoresBySourceId(claimEdge.id)\r\n                for (const score of scores) {\r\n                    //TODO: Where should I put this? It is modifying am object. If it is reactive i should just change the data. If pure it should be a new object.\r\n                    //For now I will modify it but it may not trigger updates in a pure library (React)\r\n                    //This change should also probably be centralized somewhere to reduce the chance of inconsistent bugs. I think it will happen in multiple paces\r\n                    //Nope, it is an action so it should always be a new object. If it goes into a reactive respoitory then it will modify the actual object\r\n                    //Should I group these actions or just throw them in one at a time like I am doing\r\n                    if (score.pro != claimEdge.pro\r\n                        || score.affects != claimEdge.affects\r\n                        || score.priority != claimEdge.priority\r\n                    ) {\r\n                        const action = new Action({\r\n                            pro: claimEdge.pro,\r\n                            affects: claimEdge.affects,\r\n                            priority: claimEdge.priority,\r\n                        }, score, \"modify_score\", score.id)\r\n                        scoreActions.push(action);\r\n                        await repository.notify([action]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (action.type == 'delete_claimEdge') {\r\n            const oldClaimEdge = action.oldData as ClaimEdge;\r\n            claimIdsToScore.push(oldClaimEdge.parentId)\r\n        }\r\n\r\n        if (action.type == 'add_scoreTree') {\r\n            const scoreTree = action.newData as ScoreTree;\r\n            ScoreTreeIds.push(scoreTree.id)\r\n        }\r\n\r\n    }\r\n\r\n    //Walk up the scores for each claim to the top\r\n    for (const claimId of claimIdsToScore) {\r\n        for (const claimScore of await repository.getScoresBySourceId(claimId)) {\r\n            ScoreTreeIds.push(claimScore.scoreTreeId)\r\n        }\r\n    }\r\n\r\n    //Re-calc all Score Trees with possible changed claims\r\n\r\n    for (const scoreTreeId of ScoreTreeIds) {\r\n        const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n        if (scoreTree) {\r\n            const missingScoreActions: Action[] = [];\r\n\r\n            let mainScore = await repository.getScore(scoreTree.topScoreId);\r\n            if (!mainScore) {\r\n                mainScore = new Score(scoreTree.sourceClaimId, scoreTree.id);\r\n                mainScore.id = scoreTree.topScoreId;\r\n                missingScoreActions.push(new Action(mainScore, undefined, \"add_score\"));\r\n            }\r\n\r\n            await createBlankMissingScores(repository, scoreTree.topScoreId, scoreTree.sourceClaimId || \"\", missingScoreActions, scoreTreeId)\r\n            if (missingScoreActions.length > 0) {\r\n                await repository.notify(missingScoreActions)\r\n            }\r\n\r\n            const scoreTreeActions: Action[] = [];\r\n            const newMainScore = await calculateScoreDescendants(repository, mainScore, calculator, scoreTreeActions);\r\n            if (missingScoreActions.length > 0) {\r\n                await repository.notify(scoreTreeActions)\r\n            }\r\n\r\n            const fractionActions: Action[] = [];\r\n            await calculateFractions(repository, mainScore, fractionActions)\r\n            if (fractionActions.length > 0) {\r\n                await repository.notify(fractionActions)\r\n            }\r\n\r\n            const generationActions: Action[] = [];\r\n            await calculateGenerations(repository, mainScore.id, generationActions, 0)\r\n            if (generationActions.length > 0) {\r\n                await repository.notify(generationActions)\r\n            }\r\n\r\n\r\n            const proMainActions: Action[] = []; \r\n            const newChildScore = { ...mainScore, proMain: true }\r\n            proMainActions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n            await calculateProMain(repository, mainScore.id, proMainActions, true)\r\n            if (proMainActions.length > 0) {\r\n                await repository.notify(proMainActions)\r\n            }\r\n\r\n            scoreActions.push(\r\n                ...missingScoreActions,\r\n                ...scoreTreeActions,\r\n                ...fractionActions,\r\n                ...generationActions,\r\n                ...proMainActions,\r\n            )\r\n\r\n            if (scoreTree.descendantCount != newMainScore.descendantCount) {\r\n                let newScoreTreePartial: Partial<ScoreTree> = { descendantCount: newMainScore.descendantCount }\r\n                let oldScoreTreePartial: Partial<ScoreTree> = { descendantCount: scoreTree.descendantCount }\r\n                scoreActions.push(\r\n                    new Action(newScoreTreePartial, oldScoreTreePartial, \"modify_scoreTree\", scoreTree.id)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO: Review this decision: Feed the score actions back into the repository so this repository is up to date in case it is used \r\n    await repository.notify(scoreActions);\r\n\r\n    return scoreActions;\r\n}\r\n\r\n//Create Blank Missing Scores\r\nasync function createBlankMissingScores(repository: iRepository, currentScoreId: string, currentClaimId: string, actions: Action[], scoreTreeId: string) {\r\n    const edges = await repository.getClaimEdgesByParentId(currentClaimId)\r\n    const scores = await repository.getChildrenByScoreId(currentScoreId)\r\n    for (const edge of edges) {\r\n        //see if there is a matching child score for the child edge\r\n        let score = scores.find(({ sourceClaimId }) => sourceClaimId === edge.childId);\r\n        if (!score) {\r\n            //Create a new Score and attach it to it's parent\r\n            const u = undefined;\r\n            score = new Score(edge.childId, scoreTreeId, currentScoreId, edge.id, undefined, edge.pro, edge.affects, u, u, u, edge.priority);\r\n            actions.push(new Action(score, undefined, \"add_score\", score.id));\r\n        }\r\n        //Recurse and through children\r\n        await createBlankMissingScores(repository, score.id, edge.childId, actions, scoreTreeId);\r\n    }\r\n}\r\n\r\n//This function assume that all scores already exist\r\nasync function calculateScoreDescendants(repository: iRepository, currentScore: Score, calculator: iCalculateScore = calculateScore, actions: Action[]) {\r\n    const oldChildScores = await repository.getChildrenByScoreId(currentScore.id)\r\n    const newChildScores: Score[] = [];\r\n    let newDescendantCount = 0;\r\n\r\n    for (const oldChildScore of oldChildScores) { //Calculate Children\r\n        //TODO: remove any scores to calculate based on formulas that exclude scores\r\n        const newScore = await calculateScoreDescendants(repository, oldChildScore, calculator, actions);\r\n        newChildScores.push(newScore);\r\n        newDescendantCount += newScore.descendantCount + 1;\r\n    }\r\n\r\n    const newScoreFragment = calculator({\r\n        childScores: newChildScores,\r\n    })\r\n\r\n    //update any newChildScores that changed\r\n    for (const newChildScore of newChildScores) {\r\n        // TODO: Is this slow accessing the data store again for this data or do we assume it is cached if it is in an external DB\r\n        const oldChildScore = await repository.getScore(newChildScore.id);\r\n        if (oldChildScore && hasItemChanged(oldChildScore, newChildScore)) {\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n        }\r\n    }\r\n\r\n    //TODO: Modify the newScore based on any formulas\r\n    const newScore = {\r\n        ...currentScore,\r\n        ...newScoreFragment,\r\n        descendantCount: newDescendantCount\r\n    }\r\n    if (hasItemChanged(currentScore, newScore)) {\r\n        actions.push(new Action(newScore, undefined, \"modify_score\"));\r\n    }\r\n\r\n    return newScore;\r\n}\r\n\r\nasync function calculateFractions(repository: iRepository, parentScore: Partial<Score>, actions: Action[]) {\r\n    if (parentScore.id != undefined &&\r\n        parentScore.fraction != undefined &&\r\n        parentScore.fractionSimple != undefined) {\r\n        const oldChildScores = await repository.getChildrenByScoreId(parentScore.id)\r\n\r\n        //Count up total relevance\r\n        let totalRelevance = 0\r\n        for (const oldScore of oldChildScores) {\r\n            if (oldScore.affects === \"confidence\") {\r\n                totalRelevance += oldScore.relevance\r\n            }\r\n        }\r\n        if (totalRelevance === 0) {\r\n            totalRelevance = 1;\r\n        }\r\n\r\n        for (const oldChildScore of oldChildScores) {\r\n            const newChildScore: Partial<Score> = {\r\n                ...oldChildScore,\r\n                fractionSimple: (oldChildScore.relevance / totalRelevance) * parentScore.fractionSimple,\r\n                fraction: parentScore.fraction * oldChildScore.percentOfWeight,\r\n                // parentFractionSimple: parentScore.fractionSimple,\r\n            }\r\n            if (newChildScore.fractionSimple != oldChildScore.fractionSimple ||\r\n                newChildScore.fraction != oldChildScore.fraction) {\r\n                actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n            }\r\n            await calculateFractions(repository, newChildScore, actions);\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// TODO: factor out duplicate code of these calculate functions. maybe make an array of items to process...\r\nasync function calculateGenerations(repository: iRepository, parentScoreId: string, actions: Action[], generation: number) {\r\n    const oldChildScores = await repository.getChildrenByScoreId(parentScoreId)\r\n    generation++;\r\n\r\n    for (const oldChildScore of oldChildScores) {\r\n        if (oldChildScore.generation != generation) {\r\n            const newChildScore = { ...oldChildScore, generation: generation }\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n        }\r\n        await calculateGenerations(repository, oldChildScore.id, actions, generation)\r\n    }\r\n}\r\n\r\n// TODO: factor out duplicate code of these calculate functions. maybe make an array of items to process...\r\nasync function calculateProMain(repository: iRepository, parentScoreId: string, actions: Action[], proMain: boolean) {\r\n    const oldChildScores = await repository.getChildrenByScoreId(parentScoreId)\r\n\r\n    for (const oldChildScore of oldChildScores) {\r\n        // const newChildScore = { ...oldChildScore, proMain: false }\r\n        // actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n        // await calculateProMain(repository, oldChildScore.id, actions, proMain)\r\n        if (oldChildScore.pro === true){// && oldChildScore.proMain !== proMain) {\r\n            const newChildScore = { ...oldChildScore, proMain: proMain }\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n            await calculateProMain(repository, oldChildScore.id, actions, proMain)\r\n        }\r\n\r\n        if (oldChildScore.pro === false){// && oldChildScore.proMain === proMain) {\r\n            const newChildScore = { ...oldChildScore, proMain: !proMain }\r\n            actions.push(new Action(newChildScore, undefined, \"modify_score\"));\r\n            await calculateProMain(repository, oldChildScore.id, actions, !proMain)\r\n        }\r\n\r\n    }\r\n}\r\n","import { Item } from \"../dataModels/Item\";\r\nimport { Action } from \"../dataModels/Action\";\r\nimport { ActionTypes } from \"..\";\r\n\r\n/** Compare two scores to see if they are different in what the score is.\r\n *  Just compares confidence and relavance\r\n */\r\nexport function hasItemChanged(scoreA: Item, scoreB: Item) {\r\n    return !(JSON.stringify(scoreA, Object.keys(scoreA).sort()) ===\r\n        JSON.stringify(scoreB, Object.keys(scoreB).sort()));\r\n}\r\n\r\n/** Compares two data objects and create apropriate change objects if necessary\r\n * If a property exists on old but not new, it is ignored as the new can be a partial and is not expected to have everything\r\n * If the propert exists on the new but not the old. It retunrs the property on the partialNewItem object\r\n * If the property exists on both items and has the same value, it is ignored\r\n * If the property exists on both items but the value differs, it is added to both partials in the return\r\n * If no changes are detected then undefined is returned so it can be easily checked.\r\n */\r\nexport function itemChanges(newItem: any, oldItem: any ) {\r\n    const partialOldItem: any = {};\r\n    const partialNewItem: any = {};\r\n\r\n    //Loop through the old item properties to see if they changed in the new item\r\n    for (const prop in oldItem) {\r\n        if (oldItem[prop] !== newItem[prop]) {\r\n            partialOldItem[prop] = oldItem[prop];\r\n            partialNewItem[prop] = newItem[prop];\r\n        }\r\n    }\r\n\r\n    //Loop thgout the new item properties to see if there are any new props that should be included\r\n    for (const prop in newItem) {\r\n        if (oldItem[prop] === undefined) {\r\n            partialNewItem[prop] = newItem[prop];\r\n        }\r\n    }\r\n\r\n    if (Object.keys(partialNewItem).length > 0) {\r\n        return {\r\n            partialNewItem: partialNewItem,\r\n            partialOldItem: partialOldItem\r\n        }\r\n    } else\r\n        return undefined\r\n}\r\n\r\nexport function pushActionIfChanged(actions: Action[], newItem: any, OldItem: any, type: ActionTypes, itemId?: string) {\r\n    const checkResult = itemChanges(newItem, OldItem);\r\n    if (checkResult) {\r\n        actions.push(new Action(checkResult.partialNewItem, checkResult.partialNewItem, type, itemId));\r\n    }\r\n}\r\n","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { Claim } from \"../../dataModels/Claim\"\r\n\r\nexport function claims(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_claim\":\r\n        case \"sync_claim\":\r\n        case \"modify_claim\":\r\n            {\r\n                let newItem = state.items[action.dataId] as Claim\r\n                if (!newItem){\r\n                    newItem = new Claim(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n                \r\n                return {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                } as RsData\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData, IndexArray } from \"../../dataModels/RsData\"\r\nimport { IndexReducer } from \"./IndexReducer\"\r\nimport { ClaimEdge } from \"../../dataModels/ClaimEdge\";\r\nimport { Score } from \"../../dataModels/Score\";\r\n\r\nexport function claimEdges(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_claimEdge\":\r\n        case \"modify_claimEdge\":\r\n        case \"sync_claimEdge\":\r\n            {\r\n                let newItem = state.items[action.dataId] as ClaimEdge\r\n                if (!newItem){\r\n                    newItem = new ClaimEdge(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                state = IndexReducer(state, \"claimEdgeIdsByChildId\", newItem.childId, action.dataId);\r\n                state = IndexReducer(state, \"claimEdgeIdsByParentId\", newItem.parentId, action.dataId);\r\n                return state\r\n            }\r\n        case \"delete_claimEdge\":\r\n            {\r\n                const claimEdge = state.items[action.dataId] as ClaimEdge;\r\n                //TODO: Check that I'm not deleting anythign I shouldn't or deleting something twice?\r\n                //TODO: This leaves a lot of orphaned scores and claim and claimedges\r\n                //TODO: Probably should comment what this is doing\r\n                delete state.items[action.dataId];\r\n                state = IndexDelete(state, state.claimEdgeIdsByChildId, claimEdge.childId, action.dataId);\r\n                state = IndexDelete(state, state.claimEdgeIdsByParentId, claimEdge.parentId, action.dataId);\r\n\r\n                const scoreIds = state.scoreIdsBySourceId[action.dataId]\r\n                for (const scoreId of scoreIds) {\r\n                    const score = state.items[scoreId] as Score;\r\n                    delete state.items[scoreId];\r\n                    delete state.scoreIdsBySourceId[action.dataId];\r\n                    delete state.childIdsByScoreId[scoreId];\r\n                    if (score.parentScoreId) {\r\n                        state = IndexDelete(state, state.childIdsByScoreId, score.parentScoreId, scoreId);\r\n                    }\r\n                    state = IndexDelete(state, state.scoreIdsBySourceId, score.sourceClaimId, scoreId);\r\n                }\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function IndexDelete(state: any, index: IndexArray, keyId: string, id: string): RsData {\r\n    const internalIndex = index[keyId]\r\n    const location = internalIndex.indexOf(id, 0);\r\n    if (location > -1) {\r\n        internalIndex.splice(location, 1);\r\n    }\r\n\r\n    return state;\r\n}","import { ClaimEdge } from \"../dataModels/ClaimEdge\";\r\nimport { Score } from \"../dataModels/Score\";\r\nimport { RsData } from \"../dataModels/RsData\";\r\nimport { Action } from \"../dataModels/Action\";\r\nimport { Claim } from \"../dataModels/Claim\";\r\nimport { ScoreTree } from \"../dataModels/ScoreTree\";\r\n\r\n\r\nexport class RepositoryLocalBase {\r\n\r\n    constructor(\r\n        public rsData: RsData = new RsData()\r\n    ) {\r\n    }\r\n\r\n    async getClaim(id: string): Promise<Claim | undefined> {\r\n        return this.rsData.items[id] as Claim;\r\n    }\r\n    async getClaimEdge(id: string): Promise<ClaimEdge | undefined> {\r\n        return this.rsData.items[id] as ClaimEdge;\r\n    }\r\n    async getScore(id: string): Promise<Score | undefined> {\r\n        return this.rsData.items[id] as Score;\r\n    }\r\n    async getScoreTree(id: string): Promise<ScoreTree | undefined> {\r\n        return this.rsData.items[id] as ScoreTree;\r\n    }\r\n    async getClaimEdgesByParentId(parentId: string): Promise<ClaimEdge[]> {\r\n        const claimEdgeIdStrings = this.rsData.claimEdgeIdsByParentId[parentId];\r\n        const claimEdges: ClaimEdge[] = [];\r\n        if (claimEdgeIdStrings) {\r\n            for (const claimEdgeIdString of claimEdgeIdStrings) {\r\n                const claimEdge = await this.getClaimEdge(claimEdgeIdString)\r\n                if (claimEdge) claimEdges.push(claimEdge)\r\n            }\r\n        }\r\n        return claimEdges\r\n    }\r\n    async getClaimEdgesByChildId(childId: string): Promise<ClaimEdge[]> {\r\n        const claimEdgeIdStrings = this.rsData.claimEdgeIdsByChildId[childId];\r\n        const claimEdges: ClaimEdge[] = [];\r\n        for (const claimEdgeIdString of claimEdgeIdStrings) {\r\n            const claimEdge = await this.getClaimEdge(claimEdgeIdString)\r\n            if (claimEdge) claimEdges.push(claimEdge)\r\n        }\r\n        return claimEdges\r\n    }\r\n    async getScoresBySourceId(sourceClaimId: string): Promise<Score[]> {\r\n        const scoreIdStrings = this.rsData.scoreIdsBySourceId[sourceClaimId];\r\n        const scores: Score[] = [];\r\n        if (scoreIdStrings) {\r\n            for (const scoreIdString of scoreIdStrings) {\r\n                const score = await this.getScore(scoreIdString)\r\n                if (score) scores.push(score)\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    async getChildrenByScoreId(parentScoreId: string): Promise<Score[]> {\r\n        const childIdStrings = this.rsData.childIdsByScoreId[parentScoreId];\r\n        const scores: Score[] = [];\r\n        if (childIdStrings) {\r\n            for (const scoreIdString of childIdStrings) {\r\n                const score = await this.getScore(scoreIdString)\r\n                if (score) scores.push(score)\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    async getDescendantScoresById(mainScoreId: string): Promise<Score[]> {\r\n        // TODO: This assumes no loops in the tree\r\n        const scores: Score[] = [];\r\n        const scoresToProcess = await this.getChildrenByScoreId(mainScoreId);\r\n        while (scoresToProcess.length > 0) {\r\n            const currentScore = scoresToProcess.pop();\r\n            if (currentScore) {\r\n                scores.push(currentScore);\r\n                scoresToProcess.push(...await this.getChildrenByScoreId(currentScore.id))\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    async getLeafScoresById(mainScoreId: string): Promise<Score[]> {\r\n        // TODO: This assumes no loops in the tree\r\n        const scores: Score[] = [];\r\n        const scoresToProcess = await this.getChildrenByScoreId(mainScoreId);\r\n        while (scoresToProcess.length > 0) {\r\n            const currentScore = scoresToProcess.pop();\r\n            if (currentScore) {\r\n                const children = await this.getChildrenByScoreId(currentScore.id);\r\n                if (children.length === 0) {\r\n                    scores.push(currentScore);\r\n                }\r\n                scoresToProcess.push(...children)\r\n            }\r\n        }\r\n        return scores\r\n    }\r\n    public readonly log: Action[][] = [];\r\n\r\n}","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { Score } from \"../../dataModels/Score\"\r\nimport { IndexReducer } from \"./IndexReducer\";\r\n\r\nexport function scores(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_score\":\r\n        case \"modify_score\":\r\n        case \"sync_score\":\r\n            {\r\n                let newItem = state.items[action.dataId] as Score\r\n                if (!newItem){\r\n                    newItem = new Score(\"\",\"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = {...newItem, ...action.newData}\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                //TODO: Do I need to stop recreating the state so many times in this reducer?\r\n                state = IndexReducer(state, \"childIdsByScoreId\", newItem.parentScoreId, action.dataId);\r\n                state = IndexReducer(state, \"scoreIdsBySourceId\", newItem.sourceClaimId, action.dataId);\r\n                state = IndexReducer(state, \"scoreIdsBySourceId\", newItem.sourceEdgeId, action.dataId);\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import { Action } from \"../../dataModels/Action\"\r\nimport { RsData } from \"../../dataModels/RsData\"\r\nimport { ScoreTree } from \"../../dataModels/ScoreTree\";\r\nimport { IndexReducer } from \"./IndexReducer\";\r\n\r\nexport function scoreTrees(state: RsData, action: Action, reverse: boolean = false): RsData {\r\n    switch (action.type) {\r\n        case \"add_scoreTree\":\r\n        case \"modify_scoreTree\":\r\n            {\r\n                let newItem = state.items[action.dataId] as ScoreTree\r\n                if (!newItem) {\r\n                    newItem = new ScoreTree(\"\", \"\")\r\n                    newItem.id = action.dataId\r\n                }\r\n                newItem = { ...newItem, ...action.newData }\r\n\r\n                state = {\r\n                    ...state,\r\n                    items: {\r\n                        ...state.items,\r\n                        [action.dataId]: newItem,\r\n                    }\r\n                }\r\n\r\n                //TODO: Do I need to stop recreating the state so many times in this reducer?\r\n                state = IndexReducer(state, \"ScoreTreeIds\", newItem.id, action.dataId);\r\n                return state as RsData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","export function deepClone<T>(item: T): T{\r\n    return JSON.parse(JSON.stringify(item))\r\n}\r\n\r\n","import { RsData } from \"../dataModels/RsData\";\r\nimport { Score } from \"../dataModels/Score\";\r\n\r\nexport function selectNode(selectedId: string, rsData: RsData) {\r\n    const result: selectedStatus[] = []\r\n    result.push({ itemId: selectedId, status: \"selected\" })\r\n\r\n    // Walk up the tree and get ancestors\r\n    let lastScoreId\r\n    let parentScoreId = (rsData.items[selectedId] as Score)?.parentScoreId\r\n    while (parentScoreId != undefined) {\r\n        result.push({ itemId: parentScoreId, status: \"ancestor\" })\r\n        parentScoreId = (rsData.items[parentScoreId] as Score)?.parentScoreId\r\n    }\r\n\r\n    //get the children\r\n    const children = rsData.childIdsByScoreId[selectedId];\r\n    if (children) {\r\n        for (const childId of rsData.childIdsByScoreId[selectedId]) {\r\n            result.push({ itemId: childId, status: \"child\" })\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport type selectedStatus = {\r\n    itemId: string,\r\n    status: selectedStatuses\r\n}\r\n\r\nexport type selectedStatuses =\r\n    \"selected\" |\r\n    \"ancestor\" |\r\n    \"child\" |\r\n    \"main\"","import { ItemTypes, Affects, newId } from \"@reasonscore/core\";\r\n\r\n/**\r\n * Stores the relationship between a claim and an item (usually another claim).\r\n * This is directional as the edge points from one claim to it's parent.\r\n * This is just a data transfer object so it should have no logic in it\r\n * and only JSON compatible types string, number, object, array, boolean\r\n */\r\nexport class ClaimEdge {\r\n    type: ItemTypes = 'claimEdge'\r\n    checked: any;\r\n\r\n    constructor(\r\n        /** The ID for the parent claim this edge points to */\r\n        public parentId: string,\r\n        /** The ID for the child claim this edge points from */\r\n        public childId: string,\r\n        /** How the child affects the parent score */\r\n        public affects: Affects = 'confidence',\r\n        /** Is the child claim a pro of it's parent (false if it is a con) */\r\n        public pro: boolean = true,\r\n        public id: string = newId(),\r\n        public priority: string = \"\",\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaimEdge {\r\n    type: ItemTypes\r\n\r\n    /** The ID for the parent claim this edge points to */\r\n    parentId: string,\r\n    /** The ID for the child claim this edge points from */\r\n    childId: string,\r\n    /** How the child affects the parent score */\r\n    affects: Affects,\r\n    /** Is the child claim a pro of it's parent (false if it is a con) */\r\n    pro: boolean,\r\n    id: string,\r\n    priority: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}","import { ItemTypes, Item, newId } from \"@reasonscore/core\";\r\n\r\nexport class Claim implements iClaim, Item {\r\n    type: ItemTypes = 'claim'\r\n    labelMin: string = \"\";\r\n    labelMid: string = \"\";\r\n    labelMax: string = \"\";\r\n    priority: string = \"\";\r\n\r\n    constructor(\r\n        public content: string = \"\",\r\n        public id: string = newId(),\r\n        public reversible: boolean = false,\r\n    ) {\r\n    }\r\n}\r\n\r\nexport interface iClaim {\r\n    type: ItemTypes,\r\n    id: string,\r\n    reversible: boolean,\r\n    content: string,\r\n\r\n    /** allow for other properties by external implementations */\r\n    // [others: string]: any;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { RepositoryLocalPure, calculateScoreActions, Action, Messenger } from \"@reasonscore/core\";\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\n\r\ntype MyProps = {\r\n    claimId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    scoreId: string,\r\n    new?: boolean,\r\n    claimEdge?: ClaimEdge\r\n};\r\n\r\ntype MyState = {\r\n    pasteClaim: string,\r\n    proMain: boolean,\r\n    claim?: Claim,\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            proMain: true,\r\n            pasteClaim: \"\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const newState = {} as MyState;\r\n        if (this.props.new) {\r\n            newState.claim = new Claim();\r\n            newState.claimEdge = new ClaimEdge(this.props.claimId, newState.claim.id);\r\n        } else {\r\n            const claim = await this.props.repository.getClaim(this.props.claimId) as Claim;\r\n            if (claim) {\r\n                newState.claim = claim;\r\n            }\r\n            if (this.props.claimEdge) {\r\n                newState.claimEdge = JSON.parse(JSON.stringify(this.props.claimEdge)) //TODO: Replace with deep clone function\r\n            }\r\n        }\r\n\r\n        if (newState.claimEdge) {\r\n            newState.proMain = this.props.proMainContext ? newState.claimEdge.pro : !newState.claimEdge.pro;\r\n        }\r\n\r\n        //TODO: Temp for items with blank properties. This correctes error: A component is changing an uncontrolled input of type text to be controlled\r\n        if (newState.claim) {\r\n            if (newState.claim.labelMin === undefined) { newState.claim.labelMin = \"\" }\r\n            if (newState.claim.labelMid === undefined) { newState.claim.labelMid = \"\" }\r\n            if (newState.claim.labelMax === undefined) { newState.claim.labelMax = \"\" }\r\n            if (newState.claimEdge) {\r\n                if (newState.claimEdge.priority === undefined) { newState.claim.priority = \"\" }\r\n            }\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const actions: Action[] = [];\r\n        if (this.state.pasteClaim && this.state.claimEdge) {\r\n            if (this.state.claimEdge) {\r\n                const claimEdge = this.state.claimEdge;\r\n                claimEdge.childId = this.state.pasteClaim;\r\n                actions.push(\r\n                    new Action(\r\n                        this.state.claimEdge, undefined, \"add_claimEdge\"\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            actions.push(\r\n                new Action(\r\n                    this.state.claim,\r\n                    undefined, this.props.new ? \"add_claim\" : \"modify_claim\"\r\n                )\r\n            )\r\n            if (this.state.claimEdge) {\r\n                actions.push(new Action(\r\n                    this.state.claimEdge, undefined,\r\n                    this.props.new ? \"add_claimEdge\" : \"modify_claimEdge\"\r\n                ))\r\n            }\r\n        }\r\n\r\n        calculateScoreActions({\r\n            actions: actions,\r\n            repository: this.props.repository\r\n        }).then(async (scoreActions) => {\r\n            await this.props.messenger.notify(actions.concat(scoreActions));\r\n            this.props.handleEditClose();\r\n        });\r\n    }\r\n\r\n    handleText = (e: React.FormEvent<HTMLInputElement> |\r\n        React.FormEvent<HTMLTextAreaElement> |\r\n        React.FormEvent<HTMLSelectElement>) => {\r\n        const pathParts = e.currentTarget.id.split(\".\");\r\n        const state = this.state as any;\r\n        if (pathParts.length === 2) {\r\n            this.setState({\r\n                [pathParts[0]]: {\r\n                    ...state[pathParts[0]],\r\n                    [pathParts[1]]: e.currentTarget.value\r\n                }\r\n            } as any);\r\n        } else if (pathParts.length === 1) {\r\n            this.setState({\r\n                [pathParts[0]]: e.currentTarget.value\r\n            } as any);\r\n        } else {\r\n            throw new Error(\"id expectes 1 or 2 items in path. \" + pathParts.length + \" were received.\");\r\n        }\r\n\r\n    }\r\n\r\n    handlePriority = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ claimEdge: { \r\n            ...this.state.claimEdge,\r\n            priority: e.currentTarget.value\r\n         } as any });\r\n    }\r\n\r\n    handlePasteClaim = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ pasteClaim: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: e.currentTarget.checked,\r\n            } as any,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            claimEdge: {\r\n                ...this.state.claimEdge,\r\n                pro: pro,\r\n            } as any,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        if (this.state.claimEdge) {\r\n            const actions: Action[] = [];\r\n            actions.push(\r\n                new Action(\r\n                    undefined,\r\n                    this.state.claimEdge, \"delete_claimEdge\", this.state.claimEdge.id\r\n                )\r\n            )\r\n\r\n            calculateScoreActions({\r\n                actions: actions,\r\n                repository: this.props.repository\r\n            }).then(async (scoreActions) => {\r\n                await this.props.messenger.notify(actions.concat(scoreActions));\r\n                this.props.handleEditClose();\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.claim &&\r\n                    <form className=\"container\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"claim.content\">Content</label>\r\n                            <textarea className=\"form-control\" id=\"claim.content\" value={this.state.claim.content} onChange={this.handleText} rows={2}></textarea>\r\n                            <small className=\"form-text text-muted\">\r\n                                For hyperlinks us <a href=\"https://commonmark.org/help/\">commonMark</a> syntax:\r\n                                This is [an example](http://example.com/) inline link.</small>\r\n                        </div>\r\n                        <div className=\"form-row  edit-lines\">\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMin\">Minimum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMin\" value={this.state.claim.labelMin} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMid\">Middle Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMid\" value={this.state.claim.labelMid} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-4\">\r\n                                <label htmlFor=\"claim.labelMax\">Maximum Value Label</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"claim.labelMax\" value={this.state.claim.labelMax} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.state.claimEdge &&\r\n                            < >\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4 mr-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.claimEdge.pro} onChange={this.handlePro} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"claimEdge.pro\">Pro Parent</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                                            <label className=\"form-check-label\" htmlFor=\"proMain\">Pro Main</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.affects\">Affects</label>\r\n                                        <select className=\"form-control\" id=\"claimEdge.affects\" value={this.state.claimEdge.affects} onChange={this.handleText}>\r\n                                            <option value={\"confidence\"}>Confidence</option>\r\n                                            <option value={\"relevance\"}>Relevance</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"claimEdge.priority\">Priority</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"claimEdge.priority\" value={this.state.claimEdge.priority} onChange={this.handlePriority}></input>\r\n                                    </div>\r\n                                    <div className=\"form-group col-xs-4\">\r\n                                        <label htmlFor=\"pasteClaim\">Paste Claim</label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"pasteClaim\" value={this.state.pasteClaim} onChange={this.handlePasteClaim}></input>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save Locally\">\r\n                                <button type=\"button\" value=\"Save Locally\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Save Locally</button>\r\n                            </div>\r\n                            <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Cancel\">\r\n                                <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                            </div>\r\n                            {this.props.claimEdge &&\r\n                                <div className=\"btn-group ml-5\" role=\"group\" aria-label=\"Delete\">\r\n                                    <button type=\"button\" value=\"Delete\" className=\"btn btn btn-outline-danger\" onClick={this.handleDelete}>Delete</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        \r\n                        <br></br>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-6\">\r\n                                <label htmlFor=\"claim.claimId\">Claim ID</label>\r\n                                <input disabled type=\"text\" className=\"form-control\" id=\"claim.claimId\" value={this.state.claim.id} onChange={this.handleText}></input>\r\n                            </div>\r\n                            <div className=\"form-group col-6\">\r\n                                <label htmlFor=\"claim.scoreId\">Score ID</label>\r\n                                <input disabled type=\"text\" className=\"form-control\" id=\"claim.scoreId\" value={this.props.scoreId} onChange={this.handleText}></input>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                }</>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import { selectNode, RsData } from \"@reasonscore/core\";\r\n\r\nexport function selectElement(scoreId: string, rsData: RsData, settings: any) {\r\n    const selectedNodes = selectNode(scoreId, rsData);\r\n    const expander2s = window.document.getElementsByClassName('expander2') as HTMLCollectionOf<HTMLInputElement>;\r\n    for (const expander2 of expander2s) {\r\n        const expander3 = window.document.getElementById(expander2.id.replace(\"expander2\", \"expander3\")) as HTMLInputElement;\r\n        // TODO: Find feels very slow here. Should it be a dictionairy\r\n        const selectedNode = selectedNodes.find(e => e.itemId === expander2.id.substring(10, 100))\r\n        if (selectedNode) {\r\n            if (selectedNode.status === `selected`) {\r\n                expander2.checked = true;\r\n                expander3.checked = true;\r\n            } else if (selectedNode.status === `ancestor` && !settings?.selectedOnly) {\r\n                expander2.checked = false;\r\n                expander3.checked = true;\r\n            } else {\r\n                expander2.checked = false;\r\n                expander3.checked = false;\r\n            }\r\n        } else {\r\n            expander2.checked = false;\r\n            expander3.checked = false;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './BucketElement.scss';\r\n\r\ntype MyProps = {\r\n    percentage: number,\r\n};\r\n\r\n\r\n\r\nclass BucketElement extends React.Component<MyProps> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let p = this.props.percentage;\r\n        if (p > 0 && p < 4) p = 4;\r\n        if (p > 95) p = 95;\r\n        return (\r\n            <div className=\"rs-bucket\">\r\n                <div className=\"rs-bucket-fill\" style={{ height: `${p}%` }}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BucketElement;","\"use strict\";\r\n\r\nfunction Renderer() {}\r\n\r\n/**\r\n *  Walks the AST and calls member methods for each Node type.\r\n *\r\n *  @param ast {Node} The root of the abstract syntax tree.\r\n */\r\nfunction render(ast) {\r\n    var walker = ast.walker(),\r\n        event,\r\n        type;\r\n\r\n    this.buffer = \"\";\r\n    this.lastOut = \"\\n\";\r\n\r\n    while ((event = walker.next())) {\r\n        type = event.node.type;\r\n        if (this[type]) {\r\n            this[type](event.node, event.entering);\r\n        }\r\n    }\r\n    return this.buffer;\r\n}\r\n\r\n/**\r\n *  Concatenate a literal string to the buffer.\r\n *\r\n *  @param str {String} The string to concatenate.\r\n */\r\nfunction lit(str) {\r\n    this.buffer += str;\r\n    this.lastOut = str;\r\n}\r\n\r\n/**\r\n *  Output a newline to the buffer.\r\n */\r\nfunction cr() {\r\n    if (this.lastOut !== \"\\n\") {\r\n        this.lit(\"\\n\");\r\n    }\r\n}\r\n\r\n/**\r\n *  Concatenate a string to the buffer possibly escaping the content.\r\n *\r\n *  Concrete renderer implementations should override this method.\r\n *\r\n *  @param str {String} The string to concatenate.\r\n */\r\nfunction out(str) {\r\n    this.lit(str);\r\n}\r\n\r\n/**\r\n *  Escape a string for the target renderer.\r\n *\r\n *  Abstract function that should be implemented by concrete\r\n *  renderer implementations.\r\n *\r\n *  @param str {String} The string to escape.\r\n */\r\nfunction esc(str) {\r\n    return str;\r\n}\r\n\r\nRenderer.prototype.render = render;\r\nRenderer.prototype.out = out;\r\nRenderer.prototype.lit = lit;\r\nRenderer.prototype.cr = cr;\r\nRenderer.prototype.esc = esc;\r\n\r\nexport default Renderer;","\"use strict\";\r\n\r\nimport Renderer from \"./renderer.js\";\r\n\r\nfunction PlainTextRenderer(options) {\r\n    options = options || {};\r\n}\r\n\r\n/* Node methods */\r\n\r\nfunction text(node) {\r\n    this.out(node.literal);\r\n}\r\n\r\nfunction softbreak() {\r\n}\r\n\r\nfunction linebreak() {\r\n    this.cr();\r\n}\r\n\r\nfunction link(node, entering) {\r\n}\r\n\r\nfunction image(node, entering) {\r\n}\r\n\r\nfunction emph(node, entering) {\r\n}\r\n\r\nfunction strong(node, entering) {\r\n}\r\n\r\nfunction paragraph(node, entering) {\r\n    var grandparent = node.parent.parent;\r\n    if (grandparent !== null && grandparent.type === \"list\") {\r\n        if (grandparent.listTight) {\r\n            return;\r\n        }\r\n    }\r\n    if (entering) {\r\n        this.cr();\r\n    } else {\r\n        this.cr();\r\n    }\r\n}\r\n\r\nfunction heading(node, entering) {\r\n    if (entering) {\r\n        this.cr();\r\n    } else {\r\n        this.cr();\r\n    }\r\n}\r\n\r\nfunction code(node) {\r\n    this.out(node.literal);\r\n}\r\n\r\nfunction code_block(node) {\r\n    this.cr();\r\n    this.out(node.literal);\r\n    this.cr();\r\n}\r\n\r\nfunction thematic_break(node) {\r\n    this.cr();\r\n    this.out('------');\r\n    this.cr();\r\n}\r\n\r\nfunction block_quote(node, entering) {\r\n    if (entering) {\r\n        this.cr();\r\n    } else {\r\n        this.cr();\r\n    }\r\n}\r\n\r\nfunction list(node, entering) {\r\n    if (entering) {\r\n        this.lit('• ');\r\n        this.cr();\r\n    } else {\r\n        this.cr();\r\n    }\r\n}\r\n\r\nfunction item(node, entering) {\r\n    if (entering) {\r\n    } else {\r\n        this.cr();\r\n    }\r\n}\r\n\r\nfunction html_inline(node) {\r\n}\r\n\r\nfunction html_block(node) {\r\n}\r\n\r\nfunction custom_inline(node, entering) {\r\n}\r\n\r\nfunction custom_block(node, entering) {\r\n}\r\n\r\n/* Helper methods */\r\n\r\nfunction out(s) {\r\n    // ToDo, this is not escaped properly so do not trust input form the internet\r\n    this.lit(s);\r\n}\r\n\r\n// quick browser-compatible inheritance\r\nPlainTextRenderer.prototype = Object.create(Renderer.prototype);\r\n\r\nPlainTextRenderer.prototype.text = text;\r\nPlainTextRenderer.prototype.html_inline = html_inline;\r\nPlainTextRenderer.prototype.html_block = html_block;\r\nPlainTextRenderer.prototype.softbreak = softbreak;\r\nPlainTextRenderer.prototype.linebreak = linebreak;\r\nPlainTextRenderer.prototype.link = link;\r\nPlainTextRenderer.prototype.image = image;\r\nPlainTextRenderer.prototype.emph = emph;\r\nPlainTextRenderer.prototype.strong = strong;\r\nPlainTextRenderer.prototype.paragraph = paragraph;\r\nPlainTextRenderer.prototype.heading = heading;\r\nPlainTextRenderer.prototype.code = code;\r\nPlainTextRenderer.prototype.code_block = code_block;\r\nPlainTextRenderer.prototype.thematic_break = thematic_break;\r\nPlainTextRenderer.prototype.block_quote = block_quote;\r\nPlainTextRenderer.prototype.list = list;\r\nPlainTextRenderer.prototype.item = item;\r\nPlainTextRenderer.prototype.custom_inline = custom_inline;\r\nPlainTextRenderer.prototype.custom_block = custom_block;\r\n\r\nPlainTextRenderer.prototype.out = out;\r\n\r\nexport default PlainTextRenderer;","import PlainTextRenderer from \"./PlainTextRenderer\";\r\nimport Mustache from \"mustache\";\r\nimport { Claim, Score } from \"../../../core/lib\";\r\nconst commonmark: any = require('commonmark');\r\n\r\nexport function createMarkup(claim: Claim,\r\n    score?: Score,\r\n    fractionalizedScore: string = \"\",\r\n    sign: string = \"\",\r\n    plainText: boolean = false) {\r\n\r\n    const content = Mustache.render(claim.content, { score, claim, fractionalizedScore, sign });\r\n    var reader = new commonmark.Parser({});\r\n\r\n    let writer: any;\r\n    if (plainText) {\r\n        writer = new PlainTextRenderer();\r\n    } else {\r\n        writer = new commonmark.HtmlRenderer({ safe: true });\r\n    }\r\n\r\n    var parsed = reader.parse(content);\r\n    var html: string = writer.render(parsed)\r\n    //Add target=\"_blank\"\r\n    html = html.replace(/href=\"/g, ' target=\"_blank\" rel=\"noopener noreferrer\"  href=\"');\r\n    // rel=\"noopener noreferrer\" due to security vulnerability https://www.jitbit.com/alexblog/256/\r\n    return { __html: html };\r\n}","import React from 'react';\r\nimport { RepositoryLocalPure, Score, Messenger, Action, ScoreTree } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\nimport { selectElement } from './selectElement';\r\nimport Mustache from 'mustache';\r\nimport BucketElement from './BucketElement';\r\nimport { createMarkup } from './utils/creatMarkup';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    scoreTree: ScoreTree,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childScores: Score[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n        this.state.score.confidence = .5;\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId) as Score;\r\n        let claim = new Claim() as Claim;\r\n        if (score) {\r\n            let claimEdge: ClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId) as ClaimEdge\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id) as Score[];\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleChildrenVisible = () => {\r\n        selectElement(this.state.score.id, this.props.repository.rsData, this.props.settings);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                if (this.state.childrenVisible === false) {\r\n                    newState.childrenVisible = true;\r\n                }\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreNumber = Math.round(score.confidence * 100)\r\n        let scoreNumberText = `${scoreNumber}%`\r\n        const settings = this.props.settings;\r\n\r\n        //Score Numbers\r\n        let confidence = score.confidence;\r\n        let fractionalizedScore: string = \"\", sign: string = \"\";\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (!claim.reversible && score.confidence < 0) {\r\n                confidence = 0;\r\n            }\r\n            scoreNumber = Math.round(confidence * score.relevance * 100)\r\n            if (score.affects === \"relevance\") {\r\n                sign = score.pro ? \"X\" : \"÷\";\r\n                scoreNumberText = `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                if (scoreNumber === 100) scoreNumber = 99;\r\n                scoreNumberText = `${scoreNumber.toString().padStart(2, \" \")}%`\r\n            }\r\n        }\r\n\r\n        //Score Description\r\n        let scoreDescription = \"\";\r\n        if (settings.scoreDescriptions) {\r\n            if (score.affects === \"relevance\") {\r\n                scoreDescription = \"Importance\";\r\n                if (score.pro) {\r\n                    scoreDescription = \"Increases \" + scoreDescription;\r\n                } else {\r\n                    scoreDescription = \"Decreases \" + scoreDescription;\r\n                }\r\n            } else {\r\n                let descriptions, trailing = \"\";\r\n                if (!score.parentScoreId) {\r\n                    descriptions = settings.scoreDescriptions.result\r\n                } else {\r\n                    descriptions = settings.scoreDescriptions.impact\r\n                    trailing = proMain ? \" Pro\" : \" Con\";\r\n                }\r\n                for (const descItem of descriptions) {\r\n                    if (score.confidence * score.relevance >= descItem.min) {\r\n                        scoreDescription = descItem.desc;\r\n                    }\r\n                }\r\n                scoreDescription += trailing + \": \";\r\n            }\r\n        }\r\n        if (!childScores.length) {\r\n            scoreDescription = \"Assumed \" + scoreDescription\r\n        }\r\n        let basedOn = \"\"\r\n        if (this.state.score.descendantCount > 0) {\r\n            basedOn = \" based on \" + this.state.score.descendantCount + \" claim\";\r\n            if (this.state.score.descendantCount > 1) basedOn += \"s\"\r\n            basedOn += \".\"\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move score sorting to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a: Score, b: Score) => {\r\n                // if ((a.priority === undefined || a.priority === \"\")) return 1;\r\n                // if ((b.priority === undefined || b.priority === \"\"))  return -1;\r\n                if (a.priority > b.priority) return 1;\r\n                if (a.priority < b.priority) return -1;\r\n                if (a.descendantCount > b.descendantCount) return 1;\r\n                if (b.descendantCount > a.descendantCount) return -1;\r\n                if (a.confidence > b.confidence) return 1;\r\n                if (b.confidence > a.confidence) return -1;\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        if (score.affects === \"relevance\") {\r\n            sign = score.pro ? \"X\" : \"÷\";\r\n            fractionalizedScore += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n        } else {\r\n            fractionalizedScore = Math.abs(\r\n                ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n            ).toFixed(0);\r\n            if (fractionalizedScore === \"100\") fractionalizedScore = \"99\";\r\n            if (!score.parentScoreId) {\r\n                if (score.confidence < 0) sign = \"-\";\r\n                else sign = \" \";\r\n                //fractionalizedScore += \"%\";\r\n            } else {\r\n                sign = proMain ? \"+\" : \"-\";\r\n            }\r\n        }\r\n\r\n        let scoreUrl = new URL(window.location.toString());\r\n        scoreUrl.searchParams.set(\"s\", score.id);\r\n        let scoreUrlText = `https://twitter.com/intent/tweet?text=${encodeURIComponent(scoreUrl.toString())}%20%40GulliBot`\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <input id={\"expander2-\" + score.id} type=\"checkbox\" className=\"expander2\" onChange={this.handleChildrenVisible}></input>\r\n                <input id={\"expander3-\" + score.id} type=\"checkbox\" className=\"expander3\"></input>\r\n                <div className={'claim-hider' + (score.parentScoreId ? \"\" : \" mainclaim\")}>\r\n                    <div className={'claim ' + proMainText} >\r\n                        {childScores.length > 0 &&\r\n                            <div id={\"expander-\" + (this.state.score.id)} className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} >\r\n                                <svg width=\"20px\" height=\"20px\">\r\n                                    <use href=\"#expander\" />\r\n                                </svg>\r\n                            </div>\r\n                        }\r\n                        <div className={'claim-inner'}>\r\n                            <div className=\"lines\">\r\n                                <span className=\"min\" title={claim.labelMin}>{claim.labelMin}</span>\r\n                                <span className=\"mid\" title={claim.labelMid}>{claim.labelMid}</span>\r\n                                <span className=\"max\" title={claim.labelMax}>{claim.labelMax}</span>\r\n\r\n                                <div className=\"lines-inner\">\r\n                                    <svg className=\"lines-pointer\" style={{ left: (proMain ? (confidence + 1) / 2 : 1 - (confidence + 1) / 2) * 100 + \"%\" }} height=\"20\" width=\"20\" viewBox=\"0 0 10 10\">\r\n                                        <path d=\"M 9,3 C 9,6 6,5 5,10 4,5 1,6 1,3 1,1 3,0 5,0 7,0 9,1 9,3 Z\" />\r\n                                    </svg>\r\n                                    <div className=\"tic\" style={{ left: '0%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '33.3%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '66.6%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '100%' }}></div>\r\n                                </div>\r\n                            </div>\r\n                            <label htmlFor={\"expander2-\" + score.id} className={'numbers'}\r\n                                title={scoreDescription + basedOn}>\r\n                                <span className=\"number\">\r\n                                    {(settings.showFractionalized || settings.showScore || settings.showBucket) && sign != \" \" ?\r\n                                        <span className=\"sign\">{sign}</span> : \"\"\r\n                                    }\r\n                                    {settings.showFractionSimple ? Math.round(score.fractionSimple*100).toString().padStart(2,\" \") + \"%|\" : \"\"}\r\n                                    {settings.showFractionalized ? fractionalizedScore.padStart(2,\" \") + \"%|\" : \"\"}\r\n                                    {settings.showScore ? scoreNumberText : \"\"}\r\n                                    {settings.showBucket ? <BucketElement percentage={score.scaledWeight * 100}></BucketElement> : \"\"}\r\n                                </span>\r\n                            </label>\r\n                            <span className={'score-description'}\r\n                                title={scoreNumberText + '% confidence based on ' + basedOn}>\r\n                                {scoreDescription + basedOn}\r\n                            </span>\r\n                            <span className={'rs-content'} dangerouslySetInnerHTML={createMarkup(claim,score, fractionalizedScore,sign)}></span>\r\n                            <label className=\"more-info\" htmlFor={\"expander2-\" + score.id} >\r\n                                More info&hellip;\r\n                            </label>\r\n                        </div>\r\n                        <svg className=\"callout\" width=\"30px\" height=\"30px\">\r\n                            <use href=\"#callout\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"scoreInfo\">\r\n                    <span className=\"editable\">\r\n                        {scoreDescription + basedOn}\r\n                        <button onClick={this.handleEditButtonClick} className=\"btn-inline\" >edit this claim</button>\r\n                        <button onClick={this.handleAddButtonClick} className=\"btn-inline\" >add a pro or con</button>\r\n                    </span>\r\n                    {childScores.length === 0 ?\r\n                        <p>\r\n                            I assume this claim is 100% accurate because I have not been given a reason to doubt it yet. I am gullible.\r\n                            If you feel this claim is incorrect please give me your specific reasons and evidence\r\n                        on <a target=\"_blank\" href={scoreUrlText}>Twitter</a>&nbsp;\r\n                        or <a target=\"_blank\" href=\"https://www.freesuggestionbox.com/pub/djfbumi\">anonymously</a>. <a target=\"_blank\" href=\"https://GulliBot.com/score\">How I score claims</a>.\r\n                        </p> :\r\n                        <p style={{marginBottom:`0`}}>\r\n                            <a target=\"_blank\" href={scoreUrlText}>Tweet about this claim ^^</a>\r\n                        </p>\r\n                    }\r\n                    {score.scaledWeight < score.weight ? <p>\r\n                        This claim has a lower impact because other claims in this section have a higher importance. Look at the claims with higher impact to see why they are more important.\r\n                        </p> : \"\"}\r\n                </div>\r\n                <CSSTransition in={this.state.editorVisible} timeout={490} classNames=\"editor\">\r\n                    <div>\r\n                        {this.state.editorVisible &&\r\n                            <EditorElement\r\n                                claimId={claim.id}\r\n                                repository={props.repository}\r\n                                claimEdge={this.state.claimEdge}\r\n                                proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                                handleEditClose={this.handleEditClose}\r\n                                messenger={props.messenger}\r\n                                new={this.state.addMode}\r\n                                scoreId={this.state.score.id}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </CSSTransition>\r\n                <ul id={\"children-\" + (this.state.score.id)} className={'children ' + (this.state.childrenVisible ? '' : 'hide')}>\r\n                    <TransitionGroup component={null}>\r\n                        {\r\n                            childScores.length === 0 ?\r\n                                \"\"\r\n                                : childScoresSorted.map((child) => (\r\n                                    <CSSTransition\r\n                                        key={child.id}\r\n                                        timeout={5000}\r\n                                        classNames='score'>\r\n                                        <li key={child.id}>\r\n                                            <ScoreElement\r\n                                                scoreId={child.id}\r\n                                                repository={props.repository}\r\n                                                proMainContext={proMain}\r\n                                                messenger={props.messenger}\r\n                                                settings={props.settings}\r\n                                                scoreTree={props.scoreTree}\r\n                                            />\r\n                                        </li>\r\n                                    </CSSTransition>\r\n                                ))}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","\r\n\r\n    export interface IToken\r\n    {\r\n        token: string;\r\n        className: string;\r\n        sensitiveSearch: boolean;\r\n    }\r\n\r\n\r\n    export class InstantSearch \r\n    {\r\n\r\n        protected m_container: Node;\r\n        protected m_defaultClassName: string;\r\n        protected m_defaultCaseSensitivity: boolean;\r\n        protected m_highlightTokens: IToken[];\r\n\r\n\r\n        constructor(container: Node, tokens: IToken[], defaultClassName?: string, defaultCaseSensitivity?: boolean)\r\n        {\r\n            this.iterator = this.iterator.bind(this);\r\n            this.checkAndReplace = this.checkAndReplace.bind(this);\r\n            this.highlight = this.highlight.bind(this);\r\n            this.highlightNode = this.highlightNode.bind(this);    \r\n\r\n            this.m_container = container;\r\n            this.m_defaultClassName = defaultClassName || \"highlight\";\r\n            this.m_defaultCaseSensitivity = defaultCaseSensitivity || false;\r\n            this.m_highlightTokens = tokens || [{\r\n                token: \"test\",\r\n                className: this.m_defaultClassName,\r\n                sensitiveSearch: this.m_defaultCaseSensitivity\r\n            }];\r\n        }\r\n\r\n\r\n        protected checkAndReplace(node: Node)\r\n        {\r\n            // @ts-ignore\r\n            let nodeVal: string = node.nodeValue;\r\n            // @ts-ignore\r\n            let parentNode: Node = node.parentNode;\r\n            // @ts-ignore\r\n            let textNode: Text = null;\r\n\r\n            for (let i = 0, j = this.m_highlightTokens.length; i < j; i++)\r\n            {\r\n                let curToken: IToken = this.m_highlightTokens[i];\r\n                let textToHighlight: string = curToken.token;\r\n                let highlightClassName: string = curToken.className || this.m_defaultClassName;\r\n                let caseSensitive: boolean = curToken.sensitiveSearch || this.m_defaultCaseSensitivity;\r\n\r\n                let isFirst: boolean = true;\r\n                while (true)\r\n                {\r\n                    let foundIndex: number = caseSensitive ?\r\n                        nodeVal.indexOf(textToHighlight)\r\n                        : nodeVal.toLowerCase().indexOf(textToHighlight.toLowerCase());\r\n\r\n                    if (foundIndex < 0)\r\n                    {\r\n                        if (isFirst)\r\n                            break;\r\n\r\n                        if (nodeVal)\r\n                        {\r\n                            textNode = document.createTextNode(nodeVal);\r\n                            parentNode.insertBefore(textNode, node);\r\n                        } // End if (nodeVal)\r\n\r\n                        parentNode.removeChild(node);\r\n                        break;\r\n                    } // End if (foundIndex < 0)\r\n\r\n                    isFirst = false;\r\n\r\n\r\n                    let begin: string = nodeVal.substring(0, foundIndex);\r\n                    let matched: string = nodeVal.substr(foundIndex, textToHighlight.length);\r\n\r\n                    if (begin)\r\n                    {\r\n                        textNode = document.createTextNode(begin);\r\n                        parentNode.insertBefore(textNode, node);\r\n                    } // End if (begin)\r\n\r\n                    let span: HTMLSpanElement = document.createElement(\"span\");\r\n\r\n                    if (!span.classList.contains(highlightClassName))\r\n                        span.classList.add(highlightClassName);\r\n\r\n                    span.appendChild(document.createTextNode(matched));\r\n                    parentNode.insertBefore(span, node);\r\n\r\n                    nodeVal = nodeVal.substring(foundIndex + textToHighlight.length);\r\n                } // Whend\r\n\r\n            } // Next i \r\n\r\n        } // End Sub checkAndReplace \r\n\r\n\r\n        protected iterator(p: Node)\r\n        {\r\n            if (p == null)\r\n                return;\r\n\r\n            let children: Node[] = Array.prototype.slice.call(p.childNodes);\r\n\r\n            if (children.length)\r\n            {\r\n                for (let i = 0; i < children.length; i++)\r\n                {\r\n                    let cur: Node = children[i];\r\n\r\n                    // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n                    if (cur.nodeType === Node.TEXT_NODE) \r\n                    {\r\n                        this.checkAndReplace(cur);\r\n                    }\r\n                    else if (cur.nodeType === Node.ELEMENT_NODE) \r\n                    {\r\n                        this.iterator(cur);\r\n                    }\r\n                } // Next i \r\n\r\n            } // End if (children.length) \r\n\r\n        } // End Sub iterator\r\n\r\n\r\n        public highlightNode(n:Node)\r\n        {\r\n            this.iterator(n);\r\n        } // End Sub highlight \r\n\r\n\r\n        public highlight()\r\n        {\r\n            this.iterator(this.m_container);\r\n        } // End Sub highlight \r\n\r\n\r\n    } // End Class InstantSearch \r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { createMarkup } from './utils/creatMarkup';\r\nimport { Claim, RepositoryLocalPure, RsData, Score } from \"@reasonscore/core\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './SearchElement.scss';\r\n//@ts-ignore\r\nimport Fuse from 'fuse.js'\r\nimport { selectElement } from './selectElement';\r\nimport { InstantSearch } from './utils/searchTools';\r\nimport { resourceUsage } from 'process';\r\n\r\ntype MyProps = {\r\n    repository: RepositoryLocalPure,\r\n    mainScoreId: string,\r\n};\r\n\r\nconst SearchIndex = new Fuse([], {\r\n    // isCaseSensitive: false,\r\n    includeScore: true,\r\n    shouldSort: true,\r\n    includeMatches: true,\r\n    findAllMatches: false,\r\n    minMatchCharLength: 3,\r\n    // location: 0,\r\n    // threshold: .2,\r\n    // distance: 100,\r\n    useExtendedSearch: true,\r\n    ignoreLocation: true,\r\n    // ignoreFieldNorm: false,\r\n    keys: [\r\n        \"content\",\r\n    ]\r\n});\r\n\r\nlet indexPopulated = false;\r\n\r\nconst SearchElement = ({ repository, mainScoreId }: MyProps) => {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [foundClaims, setFoundClaims] = useState<{ claim: Claim, score: Score, searchResult: any }[]>([]);\r\n    const [forcedRender, forceRender] = useState(.5); // TODO: Really hacky force refresh so highlights update\r\n\r\n    const handleText = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        const searchText = e.currentTarget.value;\r\n        setSearchText(searchText);\r\n\r\n        // If the search index hasn't been populated then populate it now. lazy loading after they indicated they want to search.\r\n        if (!indexPopulated) {\r\n            indexPopulated = true;\r\n            for (const score of (await repository.getDescendantScoresById(mainScoreId))) {\r\n                const claim = await repository.getClaim(score.sourceClaimId);\r\n                if (claim) {\r\n                    // @ts-ignore\r\n                    SearchIndex.add({ id: claim.id, content: claim.content })\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // Perform that search\r\n        if (searchText.length > 2) {\r\n            const items: { claim: Claim, score: Score, searchResult: any }[] = [];\r\n            const searchResults: any[] = SearchIndex.search({ content: searchText });\r\n            for (const searchResult of searchResults) {\r\n                searchResult.foundWord = getFoundWord(searchResult.matches, searchText);\r\n                if (searchResult.score < .82) {\r\n                    const claim = await repository.getClaim(searchResult.item.id);\r\n                    const score = (await repository.getScoresBySourceId(searchResult.item.id))[0];\r\n                    if (claim && score) {\r\n                        items.push({ claim: claim, score: score, searchResult: searchResult });\r\n                    }\r\n                }\r\n            }\r\n            setFoundClaims(items);\r\n            forceRender(Math.random());\r\n        } else if (foundClaims.length) {\r\n            setFoundClaims([]);\r\n        }\r\n    }\r\n\r\n\r\n    const handleOpenButtonClick = (scoreid: string) => {\r\n        selectElement(scoreid, repository.rsData, {})\r\n        document.getElementById(\"children-\" + scoreid)?.scrollIntoView()\r\n    }\r\n\r\n    const getScoreUrl = (score: Score) => {\r\n        if (score) {\r\n            // TODO: Similar to code on SearchElement\r\n            let scoreUrl = new URL(window.location.toString());\r\n            scoreUrl.searchParams.set(\"s\", score.id);\r\n            return scoreUrl.toString();\r\n        }\r\n    }\r\n\r\n    const getFoundWord = (matches: any, searchText: string) => {\r\n        let word: string = \"\";\r\n        let wordLengthDifference: number = 100;\r\n        for (const highlight of matches) {\r\n            for (const index of highlight.indices) {\r\n                const tempWord = highlight.value.substring(index[0], index[1] + 1);\r\n                if (tempWord === searchText){ // If an exact match is found then stop and use that\r\n                    return tempWord;\r\n                }\r\n                const tempWordLengthDiff = Math.abs(tempWord.length - searchText.length);\r\n                if (tempWordLengthDiff < wordLengthDifference) { // else, get the one closest to the length\r\n                    word = tempWord\r\n                    wordLengthDifference = tempWordLengthDiff;\r\n                }\r\n            }\r\n        }\r\n        return word\r\n    }\r\n\r\n    useEffect(() => { // Highlight found words \r\n        const elements = document.querySelectorAll('[data-highlight]')\r\n        for (const element of elements) {\r\n            let highlighter = new InstantSearch(element, [\r\n                {\r\n                    token: element.getAttribute(\"data-highlight\") || \"\", // searchText.value,\r\n                    className: \"highlight\", // this is the individual highlight class\r\n                    sensitiveSearch: false\r\n                }\r\n            ]);\r\n            highlighter.highlight();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <form >\r\n                <div className=\"form-row \">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"searchBox\">Search this analysis</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"searchBox\" value={searchText} onChange={handleText}></input>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <div className={\"search-results-hider\" + (!foundClaims.length ? \"\" : \" hidden\")}>\r\n                <div className=\"searchResults\">\r\n                    <TransitionGroup component={null}>\r\n                        {foundClaims &&\r\n                            foundClaims.map(({ claim, score, searchResult }, index) => (\r\n                                <CSSTransition\r\n                                    key={claim.id}\r\n                                    timeout={500}\r\n                                    classNames='searchitem' >\r\n                                    <div className=\"search-result\" data-highlight={searchResult.foundWord} onClick={() => handleOpenButtonClick(score.id)}>\r\n                                        {index ? <hr></hr> : \"\"}\r\n                                        <span className={'rs-content'} dangerouslySetInnerHTML={{ __html: createMarkup(claim, score, undefined, undefined).__html + `<span style=\"display:none\">${forcedRender}</span>` }}></span>\r\n                                        {/* <br></br><a href={getScoreUrl(score)} target=\"_blank\">Open this claim in a new window</a> */}\r\n                                        &nbsp;<a className=\"searchMoreInfo\" onClick={() => handleOpenButtonClick(score.id)} target=\"_blank\">More Info&hellip;</a>\r\n                                        &nbsp;&nbsp;<small style={{ opacity: .2 }}>{100 - Math.round(searchResult.score * 100)}%</small>\r\n                                    </div>\r\n                                </CSSTransition>\r\n                            ))}\r\n                    </TransitionGroup>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchElement;","import React, { Component } from 'react';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action, ScoreTree, RsData, Claim } from \"@reasonscore/core\";\r\nimport ScoreElement from './ScoreElement';\r\nimport { selectElement } from './selectElement';\r\nimport SearchElement from './SearchElement';\r\nimport { createMarkup } from './utils/creatMarkup';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        RsDatabase: any;\r\n    }\r\n}\r\n\r\ntype MyProps = {\r\n    scoreTreeId: string,\r\n    repository: RepositoryLocalPure,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    selectId?: string | null,\r\n};\r\n\r\ntype MyState = {\r\n    settings: {\r\n        [others: string]: boolean;\r\n    }\r\n    settingsOpen: boolean,\r\n    scoreTree?: ScoreTree,\r\n    tempVisualLog: string,\r\n};\r\n\r\nclass Menu extends Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            settings: {\r\n                ...{\r\n                    numbers: false,\r\n                    showFractionalized: false,\r\n                    showScore: false,\r\n                    showBucket: true,\r\n                    lines: true,\r\n                    hideMainScore: false,\r\n                    search: true,\r\n                    scoreDescriptions: {\r\n                        impact: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Weak\" },\r\n                            { min: .5, desc: \"\" },\r\n                            { min: .9, desc: \"Srong\" },\r\n                            { min: 1.1, desc: \"Very Srong\" },\r\n                        ],\r\n                        result: [\r\n                            { min: -10, desc: \"Myth\" },\r\n                            { min: -.1, desc: \"Unsupported\" },\r\n                            { min: .1, desc: \"Possible\" },\r\n                            { min: .5, desc: \"Likely\" },\r\n                            { min: .9, desc: \"Probable\" },\r\n                            { min: 1.1, desc: \"Probable\" },\r\n                        ]\r\n                    },\r\n                }, ...this.props.settings\r\n            },\r\n            settingsOpen: false,\r\n            scoreTree: undefined,\r\n            tempVisualLog: \"\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const scoreTree = await this.props.repository.getScoreTree(this.props.scoreTreeId)\r\n        this.setState({\r\n            scoreTree: scoreTree,\r\n        })\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n\r\n        //Open the proper scores for display\r\n        // TODO: sleep hack because children may take awhile to be created. How can we do this better?\r\n        setTimeout(() => {\r\n            if (this.props.selectId) {\r\n                selectElement(this.props.selectId, this.props.repository.rsData, this.state.settings);\r\n            } else if (!this.props.settings.startClosed && scoreTree) {\r\n                selectElement(scoreTree.topScoreId, this.props.repository.rsData, this.state.settings);\r\n            }\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const action of actions) {\r\n            const { newData, type, dataId } = action;\r\n            let newState: Partial<MyState> = {}\r\n            if (type === \"modify_scoreTree\" && dataId === this.state.scoreTree?.id) {\r\n                newState.scoreTree = { ...this.state.scoreTree, ...newData };\r\n            }\r\n\r\n            this.setState(newState as MyState);\r\n        }\r\n    }\r\n\r\n    handleSave = async () => {\r\n        //TODO: Save Log to databse?\r\n\r\n\r\n        // This JSON parsing also some undefineds that will cause Firestore to error out\r\n        const rsDataCleanedForTransfer = this.getRsDataCleanedForTransfer();\r\n\r\n        //Save the scores to Firebase\r\n        try {\r\n            await window.RsDatabase.doc(this.state.settings.dbCollection).set(rsDataCleanedForTransfer)\r\n            let newState: Partial<MyState> = { tempVisualLog: `${Date()}: Document successfully written!` };\r\n            this.setState(newState as MyState);\r\n        } catch (error) {\r\n            let newState: Partial<MyState> = { tempVisualLog: `${Date()}: Error writing document:${error}` };\r\n            this.setState(newState as MyState);\r\n        }\r\n    }\r\n\r\n    getRsDataCleanedForTransfer = () => {\r\n        const rsDataWithtouUndefined = JSON.parse(JSON.stringify(this.props.repository.rsData)) as RsData;\r\n        rsDataWithtouUndefined.actionsLog = [];\r\n        return rsDataWithtouUndefined;\r\n    }\r\n\r\n    getVizualExport = async () => {\r\n        const vizExport = [];\r\n        let exportString = '';\r\n\r\n        if (this.state.scoreTree?.topScoreId) {\r\n            const scores = await this.props.repository.getDescendantScoresById(this.state.scoreTree.topScoreId);\r\n            const topScore = await this.props.repository.getScore(this.state.scoreTree.topScoreId)\r\n            if (topScore) scores.unshift(topScore);\r\n\r\n\r\n\r\n\r\n            for (const score of scores) {\r\n                const claim = await this.props.repository.getClaim(score.sourceClaimId) || {} as Claim;\r\n\r\n                vizExport.push({\r\n                    generation: score.generation,\r\n                    id: this.shortId(score.id),\r\n                    parentId: this.shortId(score.parentScoreId),\r\n                    confidence: Math.max(0, Math.round(score.confidence * 100)),\r\n                    pro: score.proMain ? 'pro' : 'con',\r\n                    content: `\"` + createMarkup(claim, score, '', '', true).__html\r\n                    .slice(0, 300)\r\n                    .replaceAll(\"\\r\", \"\")\r\n                    .replaceAll('\\n', '')\r\n                    .replaceAll(`\"`, `'`) +\r\n                    `\"`,\r\n                })\r\n            }\r\n            exportString += Object.keys(vizExport[0]).join(\",\");\r\n            exportString += '\\r\\n';\r\n            for (const item of vizExport) {\r\n                exportString += Object.values(item).join(',');\r\n                exportString += '\\r\\n';\r\n            }\r\n        }\r\n        return exportString;\r\n    }\r\n\r\n    shortId = function () {\r\n        const ids: { [key: string]: number } = {}\r\n        let nextId = 1;\r\n        return function (id: string | null) {\r\n            if (id !== null) {\r\n                if (ids[id]) {\r\n                    return ids[id]\r\n                } else {\r\n                    ids[id] = nextId;\r\n                    nextId++;\r\n                    return ids[id];\r\n                }\r\n            }\r\n        }\r\n    }();\r\n\r\n\r\n    handleUpload = () => {\r\n        //TODO: HACKs: File Import needs to be completely re-done\r\n        const element = document.createElement('div');\r\n        element.innerHTML = '<input type=\"file\">';\r\n        const fileInput = element.firstChild as HTMLInputElement;\r\n        const that = this;\r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', function () {\r\n                if (fileInput.files) {\r\n                    var file = fileInput.files[0];\r\n                    if (file.name.match(/\\.(txt|json)$/)) {\r\n                        var reader = new FileReader();\r\n\r\n                        reader.onload = async function () {\r\n                            that.props.repository.rsData = JSON.parse(reader.result as string);\r\n                            const scoreTree = that.state.scoreTree;\r\n                            that.setState({ scoreTree: undefined })\r\n                            await calculateScoreActions({\r\n                                actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n                                repository: that.props.repository,\r\n                            }).then((updatedScores: any) => {\r\n                                setTimeout(function () {\r\n                                    that.setState({ scoreTree: scoreTree })\r\n                                }, 100);\r\n                            });\r\n                        }\r\n                        reader.readAsText(file);\r\n                    } else {\r\n                        alert(\"File not supported, .txt or .json files only\");\r\n                    }\r\n                }\r\n            });\r\n            fileInput.click();\r\n        }\r\n    }\r\n\r\n    download = async (data: any, suggestedFileName: string) => {\r\n        // @ts-ignore\r\n        if (window.showSaveFilePicker) {\r\n            // @ts-ignore\r\n            const fileHandle = await window.showSaveFilePicker();\r\n            // Create a FileSystemWritableFileStream to write to.\r\n            const writable = await fileHandle.createWritable(data);\r\n            // Write the contents of the file to the stream.\r\n            await writable.write();\r\n            // Close the file and write the contents to disk.\r\n            await writable.close();\r\n        } else {\r\n            if (window.confirm(\"Please use Chrome version 91 or above to download large files. Do you want to attepmt anyay?\")) {\r\n                var hiddenElement = document.createElement('a');\r\n                hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(data);\r\n                hiddenElement.target = '_blank';\r\n                hiddenElement.download = suggestedFileName;\r\n                hiddenElement.click();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleDownload = async () => {\r\n        this.download(\r\n            JSON.stringify(this.getRsDataCleanedForTransfer()),\r\n            'rsData.json'\r\n        )\r\n    }\r\n\r\n    handleExport = async () => {\r\n        this.download(\r\n            await this.getVizualExport(),\r\n            'GulliViz.csv'\r\n        )\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState({\r\n            settingsOpen: !this.state.settingsOpen\r\n        })\r\n    }\r\n\r\n    handleSetting = (setting: string, e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            settings: {\r\n                ...this.state.settings,\r\n                [setting]: e.currentTarget.checked,\r\n            }\r\n        })\r\n    }\r\n\r\n    classNames() {\r\n        let classes = \"\";\r\n        for (const className in this.state.settings) {\r\n            if (this.state.settings[className]) {\r\n                classes += \"s-\" + className + \" \";\r\n            }\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        const settings = this.state.settings;\r\n        return (<>\r\n            <div className={this.classNames()}>\r\n                {this.state.scoreTree &&\r\n                    <>\r\n                        <SearchElement repository={this.props.repository} mainScoreId={this.state.scoreTree.topScoreId} ></SearchElement>\r\n                        <ScoreElement\r\n                            scoreId={this.state.scoreTree.topScoreId}\r\n                            repository={this.props.repository}\r\n                            proMainContext={true}\r\n                            messenger={this.props.messenger}\r\n                            settings={this.state.settings}\r\n                            scoreTree={this.state.scoreTree}\r\n                        />\r\n                    </>\r\n                }\r\n            </div>\r\n            <div className=\"Content\">\r\n                <div style={{ maxWidth: \"600px\", margin: \"10px\", padding: \"1rem 0 .5rem 0\", opacity: .3 }} className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-3\" role=\"group\" aria-label=\"Save\">\r\n                        {!settings.DbNotAvailable && settings.editable && settings.saveToCloud &&\r\n                            <button onClick={this.handleSave} type=\"button\" value=\"Submit\" className=\"btn btn-secondary\">Save to cloud</button>\r\n                        }\r\n                        {settings.portData && <>\r\n                            <button onClick={this.handleUpload} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Upload</button>\r\n                            <button onClick={this.handleDownload} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Download</button>\r\n                            <button onClick={this.handleExport} type=\"button\" value=\"download\" className=\"btn btn-secondary\">Export</button>\r\n                        </>}\r\n\r\n                    </div>\r\n                    <div className=\"btn-group mr-3 float-right btn-settings\" role=\"group\" aria-label=\"Settings\">\r\n                        <svg onClick={this.toggleSettings} style={{ cursor: \"pointer\", height: \"1em\", fill: \"#aaa\", stroke: \"none\" }} viewBox=\"0 0 1280.000000 1280.000000\">\r\n                            <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\r\n                            <g transform=\"translate(0,1280) scale(0.1,-0.1)\">\r\n                                <path d=\"M5664 11538 c-38 -40 -55 -68 -68 -113 -19 -65 -44 -149 -70 -235 -9 -30 -74 -248 -145 -484 l-128 -429 -97 -33 c-176 -60 -334 -125 -503 -209 l-168 -83 -100 53 c-55 29 -154 82 -220 117 -66 36 -147 80 -180 98 -232 125 -441 239 -505 275 -41 22 -100 54 -131 70 l-57 29 -108 -101 c-60 -56 -315 -308 -568 -561 l-458 -460 54 -98 c30 -55 77 -139 103 -189 26 -49 62 -115 78 -145 17 -30 57 -103 89 -162 32 -60 86 -159 119 -220 34 -62 84 -156 112 -208 27 -52 56 -104 63 -115 8 -11 14 -26 14 -35 0 -8 -31 -76 -69 -150 -90 -176 -178 -385 -247 -587 -18 -50 -20 -52 -74 -68 -30 -10 -73 -23 -95 -30 -34 -11 -101 -31 -140 -41 -5 -2 -41 -12 -80 -24 -38 -12 -77 -23 -85 -25 -8 -2 -46 -13 -85 -25 -38 -12 -77 -23 -85 -25 -8 -2 -69 -20 -135 -40 -177 -53 -269 -81 -370 -110 -82 -24 -95 -31 -147 -83 l-57 -57 -1 -712 c0 -688 0 -713 19 -722 10 -6 56 -21 102 -35 46 -13 170 -50 274 -81 105 -31 197 -58 205 -60 8 -2 47 -14 85 -25 111 -34 154 -47 245 -73 113 -33 287 -85 326 -98 27 -8 34 -18 49 -67 79 -263 165 -482 275 -702 l68 -136 -52 -100 c-29 -54 -81 -151 -116 -214 -34 -63 -79 -146 -100 -185 -21 -38 -65 -119 -97 -180 -97 -177 -187 -344 -236 -436 l-46 -85 510 -510 509 -509 58 29 c31 17 91 49 132 71 82 46 409 224 535 291 44 24 134 72 200 109 66 36 152 82 191 102 l71 36 179 -90 c98 -50 240 -114 314 -143 74 -29 144 -56 155 -61 18 -7 175 -57 231 -74 14 -3 25 -19 32 -43 18 -63 66 -228 112 -377 11 -38 23 -77 25 -85 3 -13 70 -240 139 -470 13 -41 40 -132 61 -203 l38 -127 723 0 723 0 55 66 c31 36 56 68 57 72 1 13 8 37 29 107 12 39 23 77 25 85 2 8 13 47 25 85 12 39 23 77 25 85 2 8 13 44 24 80 11 36 63 211 116 390 53 179 100 332 105 340 4 8 48 28 97 44 156 50 363 137 548 229 l180 90 55 -29 c30 -16 118 -63 195 -105 125 -68 203 -110 445 -241 36 -20 119 -65 185 -100 66 -36 159 -86 206 -111 47 -26 92 -47 101 -47 18 0 1118 1103 1118 1122 0 7 -12 33 -26 58 -14 25 -45 81 -69 125 -23 44 -71 132 -105 195 -35 63 -138 255 -230 426 -93 170 -177 326 -189 345 -11 19 -21 41 -21 50 0 9 27 69 60 133 53 104 109 230 156 351 9 22 19 47 23 55 4 8 25 69 46 135 21 66 43 125 49 132 6 6 52 23 101 38 148 44 177 52 250 75 39 11 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 47 13 85 25 39 12 77 23 85 25 8 2 69 20 135 40 66 20 158 47 204 60 74 21 91 30 138 77 l53 52 0 722 0 722 -62 21 c-59 19 -325 98 -358 106 -8 2 -46 14 -85 25 -105 32 -151 46 -250 75 -49 15 -126 37 -170 50 -44 13 -118 35 -165 49 -47 13 -114 33 -150 45 l-65 20 -34 103 c-67 211 -195 507 -293 684 l-45 80 80 145 c43 79 99 182 124 229 57 106 223 413 360 665 24 44 51 95 60 113 l17 33 -499 499 c-275 275 -507 500 -515 500 -9 0 -24 -6 -35 -13 -11 -8 -58 -34 -105 -59 -90 -48 -253 -136 -447 -242 -65 -35 -145 -78 -178 -96 -92 -49 -169 -91 -302 -164 l-121 -66 -159 79 c-192 96 -331 153 -523 216 -80 26 -154 51 -166 55 -15 6 -26 29 -43 86 -33 117 -60 207 -161 544 -51 168 -102 341 -115 385 -13 44 -33 112 -45 150 -12 39 -23 78 -25 88 -2 9 -7 22 -10 27 -4 7 -260 10 -729 10 l-723 0 -49 -52z m981 -3342 c83 -16 89 -17 166 -35 248 -57 582 -231 789 -413 344 -302 557 -671 644 -1118 23 -119 27 -176 27 -362 0 -163 -9 -263 -30 -361 -6 -23 -13 -58 -16 -77 -13 -77 -89 -282 -150 -405 -178 -362 -407 -601 -735 -767 -355 -180 -750 -252 -1120 -203 -63 8 -126 17 -140 20 -14 3 -47 10 -75 16 -91 18 -310 97 -423 154 -560 280 -966 827 -1058 1425 -30 198 -30 501 1 650 3 14 8 41 11 60 31 174 128 426 228 593 120 200 230 324 406 456 216 163 515 302 745 346 73 14 203 35 240 39 83 9 412 -4 490 -18z\" />\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"tempVisualLog\">{this.state.tempVisualLog}</div>\r\n                </div>\r\n                <div className={\"settings-container \" + (this.state.settingsOpen && \"show-settings\")}>\r\n                    <div className={\"settings-grid \"}>\r\n                        {Object.keys(this.state.settings).map((setting) => (\r\n                            <div key={setting}>\r\n                                {// TODO: make setting componant handle more than booleans\r\n                                    (this.state.settings[setting] === true || this.state.settings[setting] === false) &&\r\n                                    <>\r\n                                        <input type=\"checkbox\" id={'s-' + setting} checked={this.state.settings[setting]} onChange={this.handleSetting.bind(this, setting)} />\r\n                                        <label htmlFor={'s-' + setting}>{setting}</label>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <svg style={{ display: \"none\" }}>\r\n                <symbol id=\"callout\" viewBox=\"0 0 9 9\">\r\n                    <g>\r\n                        <path d=\"m9 0h-9l9 9z\"></path>\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n            <svg height=\"20px\" width=\"20px\" style={{ display: \"none\" }}>\r\n                <symbol id=\"expander\" viewBox=\"0 0 10 10\" >\r\n                    <g>\r\n                        <path d=\"m1 1 7 4-7 4z\" />\r\n                    </g>\r\n                </symbol>\r\n            </svg>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport { Messenger, RepositoryLocalPure } from \"@reasonscore/core\";\r\nimport Menu from './Menu';\r\n\r\n\r\nconst App: React.FC<{\r\n  scoreTreeId: string,\r\n  repository: RepositoryLocalPure,\r\n  messenger: Messenger,\r\n  settings: any,\r\n  selectId?: string | null,\r\n}> = ({\r\n  scoreTreeId,\r\n  repository,\r\n  messenger,\r\n  settings,\r\n  selectId\r\n}) => (\r\n      <>\r\n        <Menu repository={repository}\r\n          scoreTreeId={scoreTreeId}\r\n          messenger={messenger}\r\n          settings={settings}\r\n          selectId={selectId}>\r\n        </Menu>\r\n      </>\r\n    );\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './custom.scss';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RepositoryLocalPure, Messenger, calculateScoreActions, Action} from \"@reasonscore/core\";\r\n//import { Claim, ClaimEdge, ScoreTree } from \"@reasonscore/core\";\r\n\r\n// TODO: hacks below to use global window to pass objects between javascript an dtypescript. Later pass items out as well for use in vide-script and animated demos\r\ndeclare global {\r\n  interface Window {\r\n    RsDatabase: any,\r\n    RsActions: Action[],\r\n    RsSettings: any,\r\n    RsMessenger: Messenger,\r\n    RsRepository: RepositoryLocalPure,\r\n    RsCalculateScoreActions: any,\r\n  }\r\n}\r\n\r\n\r\nasync function startApp() {\r\n  const repository =  window.RsRepository? window.RsRepository : new RepositoryLocalPure();\r\n  window.RsRepository = repository;\r\n  const messenger = window.RsMessenger? window.RsMessenger : new Messenger();\r\n  window.RsMessenger = messenger;\r\n  const settings = window.RsSettings? window.RsSettings : {};\r\n  window.RsSettings = settings;\r\n  //const calculator : iCalculateScore = window.RsCalculator? window.RsCalculator : calculateScoreActions;\r\n  window.RsCalculateScoreActions = calculateScoreActions;\r\n\r\n  let doc\r\n  if (settings.dbCollection === null) {\r\n    settings.dbCollection = \"rsData\"\r\n  }\r\n\r\n\r\n  // //TODO: This is for easy testing for now\r\n  // const u = undefined, pro = true, con = false\r\n  // window.RsActions = [\r\n  //   new Action(new Claim('mainClaim', 'mainClaim'), u, 'add_claim'), new Action(new ScoreTree('mainClaim', 'mainClaim-score', u, 'ScoreTree'), u, 'add_scoreTree'),\r\n  //   new Action(new Claim('01', '01'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '01', u, con, '01-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02', '02'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '02', u, pro, '02-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-1', '02-1'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-1', u, pro, '02-1-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-2', '02-2'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-2', u, con, '02-2-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('02-3', '02-3'), u, 'add_claim'), new Action(new ClaimEdge('02', '02-3', u, pro, '02-3-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('03', '03'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '03', u, pro, '03-edge'), u, 'add_claimEdge'),\r\n  //   new Action(new Claim('04', '04'), u, 'add_claim'), new Action(new ClaimEdge('mainClaim', '04', u, pro, '04-edge'), u, 'add_claimEdge'),\r\n  // ]\r\n\r\n  if (!window.RsActions) {\r\n    window.RsActions = [\r\n      {\r\n        \"newData\": {\r\n          \"content\": \"This is a new claim.\\n\\n.\\n* Select the \\\"edit this claim\\\" button below to change this text.\\n* Select the \\\"add a pro or con\\\" button to add additional claims.\\n* Select the \\\"Import\\\" and \\\"Export\\\" buttons at the bottom to save a copy to your device.\",\r\n          \"id\": \"mainClaim\",\r\n          \"type\": \"claim\"\r\n        },\r\n        \"type\": \"add_claim\",\r\n        \"dataId\": \"mainClaim\"\r\n      },\r\n      {\r\n        \"newData\": {\r\n          \"sourceClaimId\": \"mainClaim\",\r\n          \"topScoreId\": \"mainScore\",\r\n          \"id\": \"ScoreTree\",\r\n          \"type\": \"scoreTree\"\r\n        },\r\n        \"type\": \"add_scoreTree\",\r\n        \"dataId\": \"ScoreTree\"\r\n      },\r\n    ] as Action[] //TODO: need to correct order of params for actions to allow no old data more easily\r\n  }\r\n\r\n  //Populate the Repository\r\n  if (window.RsDatabase) {\r\n    doc = await window.RsDatabase.doc(settings.dbCollection).get()\r\n  }\r\n  if (doc && doc.exists) {\r\n    repository.rsData = doc.data();\r\n  } else if (window.RsActions) {\r\n    await repository.notify(window.RsActions)\r\n    settings.DbNotAvailable = true;\r\n  }\r\n\r\n  //Look in the HTML to see what we need to prep\r\n  //Loop through the html scores and start an app for each\r\n  const scoreElements = document.getElementsByTagName('rs-score');\r\n  for (const scoreElement of scoreElements) {\r\n    const possibleScoreId = scoreElement.getAttribute('score-tree-Id');\r\n    let scoreTreeId = \"\";\r\n    if (possibleScoreId) {\r\n      scoreTreeId = possibleScoreId;\r\n    }\r\n\r\n    //TODO: Check if the scoreTree, Score and Claim exist. If not, create them\r\n    const scoreTree = await repository.getScoreTree(scoreTreeId)\r\n    if (scoreTree) {\r\n      await calculateScoreActions({\r\n        actions: [new Action(scoreTree, undefined, \"add_scoreTree\")],\r\n        repository,\r\n      })\r\n    }\r\n\r\n    const selectId = new URL(window.location.href).searchParams.get(\"s\")\r\n\r\n    ReactDOM.render(<App\r\n      scoreTreeId={scoreTreeId}\r\n      repository={repository}\r\n      messenger={messenger}\r\n      settings={window.RsSettings}\r\n      selectId={selectId}\r\n    />, scoreElement);\r\n\r\n  }\r\n}\r\n// @ts-ignore\r\nwindow.rsStartApp = startApp\r\n//startApp();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}