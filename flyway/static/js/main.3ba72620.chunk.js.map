{"version":3,"sources":["EditorElement.tsx","ClaimElement.tsx","Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorElement","props","claim","Claim","claimEdge","handleSubmit","changes","Change","state","content","id","push","ClaimEdge","parentId","childId","undefined","pro","calculationInitator","notify","handleEditClose","handleContent","e","setState","currentTarget","value","handlePro","proMain","proMainContext","checked","handleProMain","handleAffects","affects","handleDelete","a","rsData","repository","edges","claimEdgesByParentId","toString","index","indexOf","splice","JSON","getItem","stringify","parentClaim","parse","handleCancel","new","claimId","awaitClaim","Promise","all","then","values","newState","className","htmlFor","this","onChange","rows","href","type","Affects","Confidence","Relevance","role","aria-label","onClick","React","Component","commonmark","require","ClaimElement","handleDataDispatch","change","newItem","Type","score","getClaimEdgesByParentId","ChildClaimEedges","childClaimEedges","handleExpanderClick","childrenVisible","handleEditButtonClick","editorVisible","addMode","handleAddButtonClick","Score","awaitScore","getScoreBySourceClaimId","awaitChildClaimEedges","messenger","subscribe","unsubscribe","scoreText","Math","round","confidence","relevance","toLocaleString","minimumFractionDigits","maximumFractionDigits","proMainText","xmlns","height","viewBox","width","d","fill","length","dangerouslySetInnerHTML","reader","Parser","writer","HtmlRenderer","safe","parsed","__html","render","createMarkup","map","child","key","Menu","handleSave","window","db","doc","set","console","log","catch","error","App","Boolean","location","hostname","match","repo","Repository","Messenger","CalculationInitator","topClaim","ID","reversible","get","exists","data","claims","document","getElementsByTagName","possibleClaimId","getAttribute","ReactDOM","RsData","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ba72620.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Change, Messenger, RsData } from \"@reasonscore/core\";\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    handleEditClose: () => void,\r\n    messenger: Messenger,\r\n    new?: boolean,\r\n};\r\n\r\ntype MyState = {\r\n    content: string,\r\n    pro?: boolean,\r\n    proMain?: boolean,\r\n    affects?: string,\r\n};\r\n\r\nclass EditorElement extends React.Component<MyProps, MyState> {\r\n\r\n    claim = new Claim();\r\n    claimEdge = this.props.claimEdge\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        if (this.props.new) {\r\n            this.claim = new Claim();\r\n            this.claimEdge = new ClaimEdge(this.props.claimId, this.claim.id)\r\n        } else {\r\n            const awaitClaim = this.props.repository.getItem(this.props.claimId)\r\n            Promise.all([awaitClaim]).then((values) => {\r\n                if (values[0]) {\r\n                    this.claim = values[0] as Claim;\r\n                }\r\n\r\n                const pro = this.claimEdge ? this.claimEdge.pro : true;\r\n\r\n                let newState: any = {\r\n                    content: this.claim.content,\r\n                    pro: pro,\r\n                    proMain: this.props.proMainContext ? pro : !pro,\r\n                    affects: this.claimEdge ? this.claimEdge.affects.toString() : undefined,\r\n                }\r\n\r\n                this.setState(newState);\r\n            });\r\n\r\n        }\r\n\r\n        this.state = {\r\n            content: \"\",\r\n            pro: true,\r\n            proMain: this.props.proMainContext,\r\n            affects: undefined,\r\n        };\r\n\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const changes = [\r\n            new Change(new Claim(this.state.content, this.claim.id)),\r\n        ]\r\n        if (this.claimEdge) {\r\n            changes.push(new Change(new ClaimEdge(this.claimEdge.parentId, this.claimEdge.childId, undefined, this.state.pro, this.claimEdge.id)))\r\n        }\r\n        this.props.calculationInitator.notify(changes);\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    handleContent = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n        this.setState({ content: e.currentTarget.value });\r\n    }\r\n\r\n    handlePro = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let proMain = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: e.currentTarget.checked,\r\n            proMain: proMain\r\n        });\r\n    }\r\n\r\n    handleProMain = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let pro = this.props.proMainContext ? e.currentTarget.checked : !e.currentTarget.checked;\r\n        this.setState({\r\n            pro: pro,\r\n            proMain: e.currentTarget.checked\r\n        });\r\n    }\r\n\r\n    handleAffects = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        this.setState({ affects: e.currentTarget.value });\r\n    }\r\n\r\n    handleDelete = async () => {\r\n        //To Do : move to repository\r\n        const rsData = this.props.repository.rsData as RsData\r\n        if (this.claimEdge) {\r\n            const edges = rsData.claimEdgesByParentId[this.claimEdge.parentId.toString()]\r\n            const index = edges.indexOf(this.claimEdge.id.toString(), 0);\r\n            if (index > -1) {\r\n                edges.splice(index, 1);\r\n            }\r\n            const parentClaim = JSON.parse(\r\n                JSON.stringify(\r\n                    await this.props.repository.getItem(\r\n                        this.claimEdge.parentId\r\n                    )\r\n                )\r\n            ) as Claim;\r\n            this.props.calculationInitator.notify([new Change(parentClaim)])\r\n            this.props.handleEditClose();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.props.handleEditClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"content\">Content</label>\r\n                    <textarea className=\"form-control\" id=\"claim.content\" value={this.state.content} onChange={this.handleContent} rows={2}></textarea>\r\n                    <small className=\"form-text text-muted\">For hyperlinks us <a href=\"https://spec.commonmark.org/0.29/#links\">commonMark</a> syntax:\r\n                    This is [an example](http://example.com/) inline link.</small>\r\n                </div>\r\n                {this.claimEdge &&\r\n                    < >\r\n                    {this.props.proMainContext?\"True\":\"false\"}\r\n                        <div className=\"form-group form-check\">\r\n                            <input type=\"checkbox\" id=\"claimEdge.pro\" checked={this.state.pro} onChange={this.handlePro} />\r\n                            <label> Pro Parent</label>\r\n                        </div>\r\n                        <div className=\"form-group form-check\">\r\n                            <input type=\"checkbox\" id=\"proMain\" checked={this.state.proMain} onChange={this.handleProMain} />\r\n                            <label> Pro Main</label>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>\r\n                                Affects:\r\n                            <select id=\"claimEdge.affects\" value={this.state.affects} onChange={this.handleAffects}>\r\n                                    <option value={Affects.Confidence}>Confidence</option>\r\n                                    <option value={Affects.Relevance}>Relevance</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Third group\">\r\n                            <button type=\"button\" value=\"Delete\" className=\"btn btn-secondary\" onClick={this.handleDelete}>Delete</button>\r\n                        </div>\r\n                    </>\r\n                }\r\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n                        <button type=\"button\" value=\"Submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Submit</button>\r\n                    </div>\r\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\r\n                        <button type=\"button\" value=\"Cancel\" className=\"btn btn-secondary\" onClick={this.handleCancel}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorElement;","import React from 'react';\r\nimport { Repository, CalculationInitator, Claim, ClaimEdge, Id, Affects, Score, Messenger, Change, Type } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    claimId: Id,\r\n    repository: Repository,\r\n    calculationInitator: CalculationInitator,\r\n    proMainContext: boolean,\r\n    claimEdge?: ClaimEdge,\r\n    messenger: Messenger,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childClaimEedges: ClaimEdge[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ClaimElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: this.props.claimEdge ? false : true,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(),\r\n            claim: new Claim(),\r\n            childClaimEedges: [],\r\n            claimEdge: this.props.claimEdge,\r\n        };\r\n\r\n        const awaitScore = this.props.repository.getScoreBySourceClaimId(this.props.claimId)\r\n        const awaitClaim = this.props.repository.getItem(this.props.claimId)\r\n        const awaitChildClaimEedges = this.props.repository.getClaimEdgesByParentId(this.props.claimId)\r\n        Promise.all([awaitScore, awaitClaim, awaitChildClaimEedges]).then((values) => {\r\n            let newState: any = {}\r\n            newState.score = values[0];\r\n            if (values[1]) {\r\n                newState.claim = values[1]\r\n            }\r\n            newState.childClaimEedges = values[2];\r\n            this.setState(newState);\r\n        });\r\n\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (changes: Change[]) => {\r\n        for (const change of changes) {\r\n            const { newItem } = change;\r\n            let newState: any = {}\r\n            if (newItem.id === this.props.claimId && newItem.type === Type.claim) {\r\n                const claim = newItem as Claim;\r\n                newState.claim = claim;\r\n            }\r\n            if (newItem.id === this.state.score.id && newItem.type === Type.score) {\r\n                const score = newItem as Score;\r\n                newState.score = score;\r\n            }\r\n            if (this.state.claimEdge && newItem.id === this.state.claimEdge.id && newItem.type === Type.claimEdge) {\r\n                const claimEdge = newItem as ClaimEdge;\r\n                newState.claimEdge = claimEdge;\r\n            }\r\n            //Check for changes to child edges\r\n            if (newItem.type === Type.claimEdge) {\r\n                const claimEdge = newItem as ClaimEdge;\r\n                if (claimEdge.parentId === this.props.claimId){\r\n                    const ChildClaimEedges = await this.props.repository.getClaimEdgesByParentId(this.props.claimId)\r\n                    newState.childClaimEedges = ChildClaimEedges;\r\n                }\r\n            }\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleExpanderClick = () => {\r\n        this.setState({\r\n            childrenVisible: !this.state.childrenVisible\r\n        });\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childClaimEedges = this.state.childClaimEedges;\r\n        let proMain = props.proMainContext;\r\n        let scoreText = `${Math.round(this.state.score.confidence * 100)}%`\r\n        if (this.state.claimEdge) {\r\n            if (!this.state.claimEdge.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (this.state.claimEdge.affects === Affects.Relevance) {\r\n                scoreText = `×${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreText = `${Math.round(score.confidence * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        //Commonmark\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            return { __html: writer.render(parsed) };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <div className={'claim ' + proMainText} >\r\n                    <div className={'editor-button'} onClick={this.handleEditButtonClick}><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 48 48\" width=\"15\"><path d=\"M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\" /><path d=\"M0 0h48v48h-48z\" fill=\"none\" /></svg></div>\r\n                    <div className={'add-button'} onClick={this.handleAddButtonClick}>+</div>\r\n                    {childClaimEedges.length > 0 &&\r\n                        <div className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} onClick={this.handleExpanderClick} >\r\n                            &#9701;\r\n                    </div>\r\n                    }\r\n                    <div className={'claim-inner'}>\r\n                        <span className={`score`}>\r\n                            {scoreText}\r\n                        </span>\r\n                        <span dangerouslySetInnerHTML={createMarkup()}>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {this.state.editorVisible &&\r\n                    <EditorElement\r\n                        claimId={claim.id}\r\n                        repository={props.repository}\r\n                        calculationInitator={props.calculationInitator}\r\n                        claimEdge={this.state.claimEdge}\r\n                        proMainContext={this.state.addMode? proMain: props.proMainContext}\r\n                        handleEditClose={this.handleEditClose}\r\n                        messenger={props.messenger}\r\n                        new={this.state.addMode}\r\n                    />}\r\n\r\n                {this.state.childrenVisible &&\r\n                    <ul className=\"children\">\r\n                        {childClaimEedges.length > 0 && childClaimEedges.map((child) => (\r\n                            <li key={child.childId.toString()}>\r\n                                <ClaimElement\r\n                                    claimId={child.childId}\r\n                                    repository={props.repository}\r\n                                    calculationInitator={props.calculationInitator}\r\n                                    claimEdge={child}\r\n                                    proMainContext={proMain}\r\n                                    messenger={props.messenger}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClaimElement;","import React from 'react';\r\nimport { Repository} from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      db: any;\r\n    }\r\n  }\r\n\r\ntype MyProps = {\r\n    repository: Repository,\r\n};\r\n\r\ntype MyState = {\r\n\r\n};\r\n\r\nclass Menu extends React.Component<MyProps, MyState> {\r\n\r\n\r\n    // constructor(props: MyProps) {\r\n    //     super(props);\r\n    // }\r\n\r\n    handleSave = () => {\r\n        window.db.doc(\"rsData\").set(JSON.parse(JSON.stringify(this.props.repository.rsData)))\r\n        .then(function() {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch(function(error: any) {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" value=\"Save\" className=\"btn btn-secondary\" onClick={this.handleSave}>Save</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport ClaimElement from './ClaimElement';\nimport { Repository, CalculationInitator, Id, Messenger } from \"@reasonscore/core\";\nimport Menu from './Menu';\n\n\nconst App: React.FC<{\n  claimId: Id,\n  repository: Repository,\n  calculationInitator: CalculationInitator,\n  messenger: Messenger\n}> = ({\n  claimId,\n  repository,\n  calculationInitator,\n  messenger\n}) => (\n      <>\n      <Menu repository={repository}></Menu>\n        <ClaimElement\n          claimId={claimId}\n          repository={repository}\n          calculationInitator={calculationInitator}\n          proMainContext={true}\n          messenger = {messenger}\n        />\n      </>\n    );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Repository, CalculationInitator, Change, Claim, ID, Messenger, RsData } from \"@reasonscore/core\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    db: any;\r\n  }\r\n}\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n// Generate Data (Might need to move to)\r\nconst repo = new Repository();\r\nconst messenger = new Messenger();\r\nconst calculationInitator = new CalculationInitator(repo, messenger.notify);\r\nconst topClaim = new Claim(\"Not From Database\", ID(\"Yk3JDShDv0lm\"));\r\ntopClaim.reversible = true;\r\ncalculationInitator.notify([\r\n  new Change(topClaim),\r\n]);\r\n\r\nwindow.db.doc(\"rsData\").get().then( (doc: any) => {\r\n  if (doc.exists) {\r\n    repo.rsData = doc.data();\r\n    //Connect to the HTML\r\n    const claims = document.getElementsByTagName('rs-claim');\r\n    for (const claim of claims) {\r\n      const possibleClaimId = claim.getAttribute('claimId');\r\n      let claimId = ID(\"\");\r\n      if (possibleClaimId) {\r\n        claimId = ID(possibleClaimId);\r\n      }\r\n      ReactDOM.render(<App\r\n        claimId={claimId}\r\n        repository={repo}\r\n        calculationInitator={calculationInitator}\r\n        messenger={messenger}\r\n      />, claim);\r\n    }\r\n  } else {\r\n    // Create a new RsData object with empty claims\r\n    repo.rsData = new RsData();\r\n    //Connect to the HTML\r\n    const claims = document.getElementsByTagName('rs-claim');\r\n    for (const claim of claims) {\r\n      const possibleClaimId = claim.getAttribute('claimId');\r\n      let claimId = ID(\"\");\r\n      if (possibleClaimId) {\r\n        claimId = ID(possibleClaimId);\r\n      }\r\n\r\n      //Create the new claim\r\n      calculationInitator.notify([\r\n        new Change(\r\n          new Claim(\"New Claim\", claimId)\r\n          ),\r\n      ]);\r\n\r\n      ReactDOM.render(<App\r\n        claimId={claimId}\r\n        repository={repo}\r\n        calculationInitator={calculationInitator}\r\n        messenger={messenger}\r\n      />, claim);\r\n    }\r\n  }\r\n}).catch(function (error: any) {\r\n  console.log(\"Error getting document:\", error);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}